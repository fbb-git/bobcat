#ifndef INCLUDED_BOBCAT_GLOB_
#define INCLUDED_BOBCAT_GLOB_

#include <string>
#include <glob.h>

#include <bobcat/gs>

namespace FBB
{

class Glob: public GS__
{
    struct GlobShare
    {
        glob_t      globStruct;
        size_t      users;
        size_t      gsType;
        char      **begin;
        char      **end;
        size_t      size;
    };

    GlobShare *d_share;

    public:
        enum Flags
        {
            // These flags are equal to the ones used in <glob.h>

            ERR =       1 << 0, // Return on read errors.
            MARK =      1 << 1, // Append a slash to each name.
            NOSORT =    1 << 2, // Don't sort the names.
            NOESCAPE =  1 << 6, // Backslashes don't quote metacharacters.
            PERIOD =    1 << 7, // Leading `.' can be matched by metachars.
        };

        enum Dots
        {
            FIRST,
            DEFAULT
        };
            
        Glob(std::string const &pattern = "*", int flags = PERIOD,  // 1
             Dots dots = FIRST);
        Glob(Type type, std::string const &pattern = "*",           // 2
                int flags = PERIOD, Dots dots = FIRST);
        Glob(Glob &&tmp);                                           // 3
        Glob(Glob const &other);                                    // 4

        ~Glob();

        Glob &operator=(Glob const &other);
        Glob &operator=(Glob &&tmp);

        size_t size() const;
        char const *operator[](size_t idx) const;
        char const *const *begin() const;
        char const *const *end() const;

        void verify() const;        // no-op

        void swap(Glob &other);

    private:
        char const **mbegin() const;
        char const **mend() const;

        void accept(Type type);

        static bool isDot(char const *cp);
};

} // FBB
        
#endif




