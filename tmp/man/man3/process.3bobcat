.TH "FBB::Process" "3bobcat" "2005-2006" "libbobcat1-dev_1\&.10\&.0-x\&.tar\&.gz" "Running Child Processes"

.PP 
.SH "NAME"
FBB::Process \- Runs external programs
.PP 
.SH "SYNOPSIS"
\fB#include <bobcat/process>\fP
.br 
Linking option: \fI-lbobcat\fP 
.PP 
.SH "DESCRIPTION"
The \fBFBB::Process\fP class offers a simple interface to call external
programs and/or scripts from a \fBC++\fP program (so-called
\fIchild-processes\fP\&. The class offers a standard, stream-based interface to
the child process\&' standard input, standard output and standard error streams\&.
.PP 
Objects of the \fBFBB::Process\fP class use the standard process-executing
functions, like \fBsystem\fP(1) and members of the \fBexecl\fP(1) family to
execute the child process, and allow \fIshell-scripts\fP to be executed as
well\&. 
.PP 
The standard input, output and error streams of executed child processes
may be accessed using the \fBFBB::Process\fP object\&. When child processes
themselves redirect their standard streams, then \fBFBB::Process\fP objects will
not be able to access them anymore (of course)\&.
.PP 
The same \fBFBB::Process\fP object may be used repeatedly to execute child
processes repeatedly\&. Before doing so, \fBFBB::Process\fP\&'s \fBstop()\fP member
must be called\&.
.PP 
Programs may be called directly from the constructor, or whenever
appropriate using the \fBstart()\fP member\&. Since some child processes will
continue until their standard input stream is exhausted, the \fBstop()\fP member
is provided to close these streams and to terminate child processes\&. The
\fBstop()\fP member will first close the child process\&' standard input
stream, followed by the sending of termination signals (\fISIGTERM\fP and
\fISIGKILL\fP), to ensure that child processes terminate properly\&. 
.PP 
The class \fBFBB::Process\fP offers no facilities to construct \fIdaemon\fP
processes, which may be constructed easily using the \fBFBB::Fork\fP class\&.
.PP 
.SH "NAMESPACE"
\fBFBB\fP
.br 
All constructors, members, operators and manipulators, mentioned in this
man-page, are defined in the namespace \fBFBB\fP\&.
.PP 
.SH "INHERITS FROM"
\fBFBB::Fork\fP(3bobcat) (private) , 
.br 
\fBFBB:IOStream\fP(3bobcat)
.PP 
.SH "ENUMERATIONS"

.PP 
\fBenum Program\fP:
.br 
This enumeration has the following values:
.IP o 
\fBNO_PATH\fP:
.br 
This value indicates that the external program should be called as
specified, without searching the elements in the \fIPATH\fP environment
variable\&. 
.IP o 
\fBUSE_PATH\fP:
.br 
This value indicates that the \fIPATH\fP environment variable should
be used to locate the external program to be executed\&.
.IP o 
\fBUSE_SHELL\fP:
.br 
This value indicates that the external program should be called as
command to \fB/bin/sh\fP, using the \fBsystem\fP(3) system call\&.
)
.PP 
\fBenum IOMode\fP:
.br 
This enumeration has the following values:
.IP o 
\fBCIN\fP:
.br 
This value is used to indicate that information written (inserted)
to the \fBFBB::Process\fP object should be sent to its child process\&.
.IP o 
\fBCOUT\fP:
.br 
This value is used to indicate that information read (extracted)
from the \fBFBB::Process\fP object should be the information written by the
child process to its standard output stream\&.
.IP o 
\fBCERR\fP:
.br 
This value is used to indicate that information written by the
child process to its standard error stream should be accessible through the
\fBFBB::Process::cerr()\fP member\&.
.IP o 
\fBMERGE_COUT_CERR\fP:
.br 
This value is used to indicate that information read (extracted)
from the \fBFBB::Process\fP object should be the information written by the
child process to its standard output and standard error streams\&. This
\fBIOMode\fP will overrule an explicitly specified \fBCERR\fP mode\&., 
.IP o 
\fBIGNORE_COUT\fP:
.br 
This value is used to indicate that information written by the
child process to its standard output stream should besent to \fI/dev/null\fP\&. It
is ignored when either \fBCOUT\fP or \fBMERGE_COUT_CERR\fP is specified\&.
.IP o 
\fBIGNORE_CERR\fP:
.br 
This value is used to indicate that information written by the
child process to its standard error stream should be sent to \fI/dev/null\fP\&. It
is ignored when either \fBCERR\fP or \fBMERGE_COUT_CERR\fP is specified\&.

.PP 
.SH "TYPE"
.IP o 
\fBiomode\fP:
.br 
Sets of values  of the \fBenum IOMode\fP (using the \fIbit_or\fP operator)
may be used as value of a variable of this type\&. In functions expecting an
\fBiomode\fP argument the empty set should not normally be specified\&.

.PP 
.SH "CONSTRUCTORS"
.IP o 
\fBProcess(std::string const &cmd = "", iomode mode = CIN | COUT | CERR)\fP:
.br 
This constructor may also be used as default constructor\&. By default it
defines a \fBFBB::Process\fP object without setting a command\&. By default the
command\&'s standard streams are accessible via the \fBFBB::Process\fP object\&.
The string that is provided as its first argument may be (the initial part of)
the external program to run\&. If the command starts and ends with a
\fIback-tick\fP (\fI`\fP) then the back-ticks are removed, and the resulting
contents are interpreted as a command that should directly be executed by the
\fBstart(Program)\fP member, using that member\&'s default argument (see
below)\&. When the \fIFBB::Process\fP object goes out of scope or when its
\fBstop()\fP member is called, the child is given one second to terminate\&. If
the child didn\&'t terminate within one second, it is twice sent a \fISIG_TERM\fP
signal, followed by a \fISIG_KILL\fP signal\&.
.IP o 
\fBProcess(unsigned waitSeconds, std::string const &cmd = "", 
iomode mode = CIN | COUT | CERR)\fP:
.br 
By default this constructor defines a \fBFBB::Process\fP object without
setting a command, while the command\&'s standard streams are accessible via the
\fBFBB::Process\fP object\&.  The string that is provided as its first argument
may be (the initial part of) the external program to run\&. If the command
starts and ends with a \fIback-tick\fP (\fI`\fP) then the back-ticks are removed,
and the resulting contents are interpreted as a command that should directly
be executed by the \fBstart(Program)\fP member, using that member\&'s default
argument (see below)\&. When the \fIFBB::Process\fP object goes out of scope or
when its \fBstop()\fP member is called, the child is given \fIwaitSeconds\fP
seconds to terminate\&. If the child didn\&'t terminate within one second, it is
twice sent a \fISIG_TERM\fP signal, followed by a \fISIG_KILL\fP signal\&.
The \fBFBB::Process\fP class does not offer a copy constructor\&.
.PP 
.SH "OVERLOADED OPERATORS"

.PP 
.IP o 
\fBstd::ostream &operator<<(FBB::Process &, \&.\&.\&.)\fP:
.br 
This operator may be used to insert information into the child
process\&' standard input stream if \fIIOMode CIN\fP was specified\&. If \fIIOMODE
CIN\fP was not specified the insertion is silently ignored\&. Note that
information \fIinserted\fP into \fBFBB::Process\fP objects is \fIextracted\fP by
their child processes\&. 
.IP 
Note: this operator can only be used between \fBstart()\fP and
\fBstop()\fP calls (see below)\&. It may produce unexpected results if used
otherwise\&. Note that the \fBFBB::Process\fP constructor may imply a \fBstart()\fP
call\&. 
.IP o 
\fBstd::istream &operator>>(FBB::Process &, \&.\&.\&.)\fP:
.br 
This operator may be used to extract information from the child
process\&' standard output stream or from both the standard output and standard
error streams\&. Information from both streams is extracted if \fIIOMode
MERGE_CIN_COUT\fP was specified\&. If \fIIOMODE COUT\fP was specified the
information written by the child process to its standard output stream is
extracted\&. Note that information \fIextracted\fP from \fBFBB::Process\fP objects
is \fIinserted\fP by their child processes\&. If neither modes are specified, the
default processing of the child\&'s standard streams takes place\&.
.IP 
Note: this operator can only be used between \fBstart()\fP and
\fBstop()\fP calls (see below)\&. It may produce unexpected results if used
otherwise\&. Note that the \fBFBB::Process\fP constructor may imply a \fBstart()\fP
call\&. 
.IP o 
\fBProcess &operator+=(std::string const &)\fP:
.br 
This operator adds the provided \fIstd::string\fP object to the command
already stored in a \fBFBB::Process\fP object\&.  Note that this member does not
add, e\&.g\&., a separating blank space between its argument and information that
may already have been inserted\&. 
.IP 
Note: this operator will not have an effect if used between \fBstart()\fP
and \fBstop()\fP calls (see below)\&. 
.IP o 
\fBint operator=(std::string const &)\fP:
.br 
The \fBoperator=()\fP member (re)defines the command currently stored in
an \fBFBB::Process\fP object\&.  If the command starts and ends with a
\fIback-tick\fP (\fI`\fP) then the back-ticks are removed, and the resulting
contents are interpreted as a command that should directly be executed by the
\fBstart(Program)\fP member, using that member\&'s default argument (see below)\&.
This operator also calls \fBstop()\fP (see below)\&. The return value is undefined
if there was no child process that was stopped, otherwise it is the child
process\&' exit value\&.
The default overloaded assignment operator is not available\&.
.PP 
.SH "MEMBERS"

.PP 
The function\&'s return value is the return value of the used \fBexec\fP
function\&. See also the member \fBsystem\fP, below\&. Arguments surrounded by
double quotes will have their double quotes removed, interpreting any
escape-sequences that may have been used within\&. Arguments surrounded by
single quotes will have their single quotes removed, accepting their contents
unmodified\&.
.IP o 
\fBint available()\fP:
.br 
This member returns immediately\&. Its return value indicates whether
any information can be obtained from the child process\&. 0 is returned if no
information is ready for extraction\&. 1 is returned if information from the
child process\&' standard output stream is available; 2 is returned if
information from the child process\&' standard error stream is available (unless
\fIMERGE_CIN_COUT\fP was specified, in which case both the standard output and
the standard error streams are merged to the standard output stream); 3 is
returned if information from both the standard output stream and the standard
error stream is available\&.
.IP o 
\fBstd::istream &cerr()\fP:
.br 
This member may be used to extract the information written by the
child process to its standard error stream\&. It can only be used for this when
\fBIOMode\fP \fICERR\fP was specified\&.
.IP o 
\fBint start(Program program = NO_PATH)\fP:
.br 
The current contents of the command buffer are executed using
\fBsystem\fP(3) or a member of the \fBexecl\fP(3) family\&. Before starting the
child process, all redirections are set according to the current \fBIOMode\fP
specification\&. This mode may be set or modified by the constructor, by
\fBstart()\fP\&'s overloaded version (see below) or by the \fBsystem()\fP member
(see below)\&.  By default (as a security measure), the \fIPATH\fP environment
variable is \fInot\fP used to search the program to execute\&. If it is considered
safe to use the \fIPATH\fP environment variable, \fIUSE_PATH\fP may be
specified\&. By default the first white-space delimited element of the defined
command is used as the name of the program to execute\&. If the program should
be called as a command to \fBsh\fP(1), specify \fIUSE_SHELL\fP\&. If \fIUSE_SHELL\fP
is specified, the defined command is passed as argument to the \fBsystem\fP(3)
member (see below)\&. When the \fIFBB::Process\fP object goes out of scope or when
its \fBProcess::stop()\fP member is called, the child is given one second to
terminate\&. If the child didn\&'t terminate within one second, it is twice sent a
\fISIG_TERM\fP signal, followed by a \fISIG_KILL\fP signal\&. The function has no
effect if the command buffer is empty\&.
.IP o 
\fBint start(iomode mode, Program program = NO_PATH)\fP:
.br 
Before transferring control to the above \fBstart()\fP member, the
\fBIOMode\fP is set to \fImode\fP\&. Having set \fBIOMode\fP, the child process is
started according to the procedure described with the former \fBstart()\fP
member\&.
.IP o 
\fBint start(unsigned waitSeconds, iomode mode, 
Program program = NO_PATH)\fP:
.br 
Before transferring control to the first \fBstart()\fP member, the
\fBIOMode\fP is set to \fImode\fP\&. Having set \fBIOMode\fP, the child process is
started according to the procedure described with the former \fBstart()\fP
member\&. However, when the \fIFBB::Process\fP object goes out of scope or when
its \fBstop()\fP member is called, the child is given \fIwaitSeconds\fP seconds to
terminate\&. If the child didn\&'t terminate within one second, it is twice sent a
\fISIG_TERM\fP signal, followed by a \fISIG_KILL\fP signal\&.
.IP o 
\fBint stop()\fP:
.br 
This member closes the connections to the child\&'s input, output and
error streams (if any) and erases the contents of a \fBFBB::Process\fP object\&'s
command buffer\&. Next it will wait for at most one second or for the number of
seconds specified at the \fBFBB::Process\fP object\&'s construction (or as
specified when its \fBstart()\fP member was called) allowing the child to
complete\&. If the child didn\&'t terminate within one second, it is twice sent a
\fISIG_TERM\fP signal, followed by a \fISIG_KILL\fP signal\&.  Following \fBstop()\fP
a new command may be constructed\&. This member\&'s return value is the child
process\&' exit value\&. This member is also called when the \fBFBB::Process\fP
object goes out of scope\&.
.IP o 
\fBvoid system()\fP:
.br 
This member executes the stored command using the \fBsystem\fP(3) system
call (therefore executing the command as a shell command)\&.  When using
\fBsystem\fP redirections can be included in the command itself (although this
might undo the previously set \fBIOMode\fP)\&.
.IP o 
\fBvoid system(iomode mode)\fP:
.br 
This member sets a new \fBIOMode\fP set, and then executes the stored
command using the \fBsystem\fP(3) system call (therefore executing the command
as a shell command)\&.  When using \fBsystem\fP redirections can be included in
the command itself (although this might undo the just set \fBIOMode\fP)\&.
.IP o 
\fBint wait()\fP:
.br 
This member waits for information written by the child process to its
standard output or error streams\&.  1 is returned if information from the child
process\&' standard output stream is available; 2 is returned if information
from the child process\&' standard error stream is available (unless
\fIMERGE_CIN_COUT\fP was specified, in which case both the standard output and
the standard error streams are merged to the standard output stream); 3 is
returned if information from both the standard output stream and the standard
error stream is available\&.
.IP o 
\fBint wait(unsigned sec, unsigned msec = 0)\fP:
.br 
This member waits at most \fIsec\fP seconds plus \fImsec\fP milliseconds
for information written by the child process to its standard output or error
streams\&. 0 is returned if, following the delay, no information is ready for
extraction\&.  1 is returned if information from the child process\&' standard
output stream is available; 2 is returned if information from the child
process\&' standard error stream is available (unless \fIMERGE_CIN_COUT\fP was
specified, in which case both the standard output and the standard error
streams are merged to the standard output stream); 3 is returned if
information from both the standard output stream and the standard error stream
is available\&.

.PP 
.SH "EXAMPLE"
.nf 

#include <iostream>
#include <string>
#include <bobcat/process>

using namespace std;
using namespace FBB;

int main()
{
    string line;
                                        // setup a command
    Process process("/bin/cat", Process::CIN | 
                                Process::COUT | 
                                Process::IGNORE_CERR);

    process\&.start();                    // start it

    process << "hello world" << endl;   // insert this text
    getline(process, line);             // read its `cat\&' output
    cout << line << endl;               // show it

    process = "`/bin/ls`";              // run another command 
                                        // (assignment implies 
                                        // `stop()\&')

    while (getline(process, line))      // read all its output
        cout << line << endl;

    cout << process\&.stop() << endl;     // show the process\&' exit
                                        // value
    return 0;
}
        
.fi 

.PP 
.SH "FILES"
\fIbobcat/process\fP - defines the class interface
.PP 
.SH "SEE ALSO"
\fBbobcat\fP(7), \fBexecle\fP(3), \fBfork\fP(3bobcat), \fBiostream\fP(3fork),
\fBsystem\fP(3)
.PP 
.SH "BUGS"
None Reported\&.
.PP 
.SH "DISTRIBUTION FILES"
.IP o 
\fIbobcat_1\&.10\&.0-x\&.dsc\fP: detached signature;
.IP o 
\fIbobcat_1\&.10\&.0-x\&.tar\&.gz\fP: source archive;
.IP o 
\fIbobcat_1\&.10\&.0-x_i386\&.changes\fP: change log;
.IP o 
\fIlibbobcat1_1\&.10\&.0-x_i386\&.deb\fP: debian package holding the
libraries;
.IP o 
\fIlibbobcat1-dev_1\&.10\&.0-x_i386\&.deb\fP: debian package holding the
libraries, headers and manual pages;
.IP o 
\fIhttp://sourceforge\&.net/projects/bobcat\fP: public archive location;

.PP 
.SH "BOBCAT"
Bobcat is an acronym of `Brokken\&'s Own Base Classes And Templates\&'\&.
.PP 
.SH "COPYRIGHT"
This is free software, distributed under the terms of the 
Academic Free Licence\&.
.PP 
.SH "AUTHOR"
Frank B\&. Brokken (\fBf\&.b\&.brokken@rug\&.nl\fP)\&.
.PP 
