.TH "FBB::Hash" "3bobcat" "2005-2006" "libbobcat1-dev_1\&.10\&.0-x\&.tar\&.gz" "Key hashing containers"

.PP 
.SH "NAME"
FBB::Hash \- Various mapping template classes using hashing
.PP 
.SH "SYNOPSIS"
\fB#include <bobcat/hash>\fP
.br 

.PP 
.SH "DESCRIPTION"
The \fBFBB:Hash\fP group of template classes offer hashing-based
mapping\&. Various variants are availabe, all based on the facilities offered by
the GNU \fBg++\fP(1) \fBext/hash_map\fP header file\&. Hashing containers are not
(yet) part of the ANSI-ISO \fBC++\fP standard, and an extension to the standard
is offered by GNU\&'s \fBg++\fP(1) compiler\&. GNU\&'s hash map is defined in the
\fB__gnu_cxx\fP namespace, indicating that this container is not one that is
offered in the \fBC++\fP standard\&. 
.PP 
Unfortunately, the hash-map offered in the \fBext/hash_map\fP header file
has a fairly complex interface, and \fBFBB::Hash\fP is an attempt to simplify
this interface\&. In practice, hashing uses a textual key, which may be 
\fBstd::string\fP or \fIchar *\fP based, and the keys may be used either case
sensitively or case insensitively\&. \fBFBB::Hash\fP simplifies the use of the
hash map offered in \fBext/hash_map\fP by requiring its users to specify only
the map\&'s value type\&. 
.PP 
.SH "NAMESPACE"
\fBFBB\fP
.br 
All constructors, members, operators and manipulators, mentioned in this
man-page, are defined in the namespace \fBFBB\fP\&.
.PP 
.SH "INHERITS FROM"
\fB__gnu_cxx::hash_map\fP, using various instantiations\&.
.PP 
.SH "CONSTRUCTORS"
Using \fIcase sensitive\fP \fBchar const *\fP keys:
.IP o 
\fBHashCharPtr<Value>()\fP:
.br 
The default constructor creates an empty hash-map container, in which
the keys are \fIchar const *\fPs\&. The map contains value of template type
\fIValue\fP\&. 
.IP o 
\fBHashCharPtr<Value>(InputIterator begin, InputIterator end)\fP:
.br 
This constructor creates a hash-map container, using elements pointed
to by a pair of iterators in the hash-map\&. The iterators must point to 
\fIstd::pair<char const *, Value>\fP objects\&.

.PP 
Using \fIcase insensitive\fP \fBchar const *\fP keys:
.IP o 
\fBHashCharCasePtr<Value>()\fP:
.br 
The default constructor creates an empty hash-map container, in which
the keys are \fIchar const *\fPs\&. The map contains value of template type
\fIValue\fP\&. 
.IP o 
\fBHashCharCasePtr<Value>(InputIterator begin, InputIterator end)\fP:
.br 
This constructor creates a hash-map container, using elements pointed
to by a pair of iterators in the hash-map\&. The iterators must point to 
\fIstd::pair<char const *, Value>\fP objects\&.

.PP 
Using \fIcase sensitive\fP \fBstd::string\fP keys:
.IP o 
\fBHashString<Value>()\fP:
.br 
The default constructor creates an empty hash-map container, in which
the keys are \fIstd::string\fPs\&. The map contains value of template type
\fIValue\fP\&. 
.IP o 
\fBHashString<Value>(InputIterator begin, InputIterator end)\fP:
.br 
This constructor creates a hash-map container, using elements pointed
to by a pair of iterators in the hash-map\&. The iterators must point to 
\fIstd::pair<std::string, Value>\fP objects\&.

.PP 
Using \fIcase insensitive\fP \fBstd::string\fP keys:
.IP o 
\fBHashStringCase<Value>()\fP:
.br 
The default constructor creates an empty hash-map container, in which
the keys are \fIstd::string\fPs\&. The map contains value of template type
\fIValue\fP\&. 
.IP o 
\fBHashStringCase<Value>(InputIterator begin, InputIterator end)\fP:
.br 
This constructor creates a hash-map container, using elements pointed
to by a pair of iterators in the hash-map\&. The iterators must point to 
\fIstd::pair<std::string, Value>\fP objects\&.
The copy constructor is available for all \fBFBB:Hash\&.\&.\&.\fP hash-map 
containers\&.
.PP 
.SH "OVERLOADED OPERATOR"
The overloaded assignment operator is available for all \fBFBB:Hash\fP
hash-map containers\&.
.PP 
.SH "MEMBER FUNCTIONS"
All members of \fB__gnu_cxx::hash_map\fP are available, as \fBFBB::Hash\fP
inherits from this template class\&. These members are (expected to be) the same
members as available for the \fBstd::map\fP container\&.
.PP 
.SH "EXAMPLE"
.nf 

    #include <iostream>
    #include <bobcat/hash>
    
    using namespace std;
    using namespace FBB;
    
    pair<char const *, unsigned> ap[] =
    {
        pair<char const *, unsigned>("one", 1),
        pair<char const *, unsigned>("two", 2),
    };
    
    int main()
    {
        HashCharPtr<unsigned> hcp;
        HashCharPtr<unsigned> hcp2(ap, ap + 2);
        HashCharPtr<unsigned> hcp3(hcp2);

        hcp = hcp2;
    
        cout << hcp2["one"] << endl;
    }
        
.fi 

.PP 
.SH "FILES"
\fIbobcat/hash\fP - defines the class interface
.PP 
.SH "SEE ALSO"
\fBbobcat\fP(7), \fBg++\fP(1), \fBext/hash_map\fP
.PP 
.SH "BUGS"
None Reported\&.
.PP 
.SH "DISTRIBUTION FILES"
.IP o 
\fIbobcat_1\&.10\&.0-x\&.dsc\fP: detached signature;
.IP o 
\fIbobcat_1\&.10\&.0-x\&.tar\&.gz\fP: source archive;
.IP o 
\fIbobcat_1\&.10\&.0-x_i386\&.changes\fP: change log;
.IP o 
\fIlibbobcat1_1\&.10\&.0-x_i386\&.deb\fP: debian package holding the
libraries;
.IP o 
\fIlibbobcat1-dev_1\&.10\&.0-x_i386\&.deb\fP: debian package holding the
libraries, headers and manual pages;
.IP o 
\fIhttp://sourceforge\&.net/projects/bobcat\fP: public archive location;

.PP 
.SH "BOBCAT"
Bobcat is an acronym of `Brokken\&'s Own Base Classes And Templates\&'\&.
.PP 
.SH "COPYRIGHT"
This is free software, distributed under the terms of the 
Academic Free Licence\&.
.PP 
.SH "AUTHOR"
Frank B\&. Brokken (\fBf\&.b\&.brokken@rug\&.nl\fP)\&.
.PP 
