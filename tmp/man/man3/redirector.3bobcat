.TH "FBB::Redirector" "3bobcat" "2005-2006" "libbobcat1-dev_1\&.10\&.0-x\&.tar\&.gz" "System Level File Redirection"

.PP 
.SH "NAME"
FBB::Redirector \- Redirects a file descriptor to another descriptor
.PP 
.SH "SYNOPSIS"
\fB#include <bobcat/redirector>\fP
.br 
Linking option: \fI-lbobcat\fP 
.PP 
.SH "DESCRIPTION"
Objects of the class \fBFBB::Redirector\fP set up a system level file
redirection, using file descriptors rather than streams\&. \fBFBB::Redirector\fP
objects are effectively \fIwrappers\fP around the \fBdup2\fP(2) system
call\&. System level redirection allows the programmer to send output to, e\&.g\&.,
the standard output stream, which actually appears at another stream (e\&.g\&.,
the standard output)\&. It is a stronger form of redirection than the standard
one offered by \fBC++\fP, which uses \fIstd::streambuf\fP redirection, and which
is, because of that, bound to the program\&'s scope\&. System level redirection,
on the other hand, is applied at the system level, allowing the programmer to
redirect standard streams when starting a program\&. For example, the standard
error is commonly written to the standard output using an invocation like
\fIprogram 2>&1\fP\&.
.PP 
When constructing \fBFBB::Redirector\fP objects a file descriptor is
required, and another file descriptor is required when defining the
redirection\&. Formally, file descriptors are not defined in \fBC++\fP, but they
are available in many types of operating systems\&. In those systems each `file\&'
has an associated `file descriptor\&'\&. A file descriptor is an \fBint\fP, which is
an index into the program\&'s file allocation table, maintained by the
system\&. Another type of well-known entities which are file descriptors are
\fIsockets\fP\&.
.PP 
Well-known filedescriptors (defined in, e\&.g\&., \fIunistd\&.h\fP) 
having fixed values are
\fI\fP 0 (\fISTDIN_FILENO\fP), representing the standard input stream
(\fIstd::cin\fP);
\fI\fP 1, (\fISTDOUT_FILENO\fP), representing the standard output stream
(\fIstd::cout\fP);
\fI\fP 2, (\fISTDERR_FILENO\fP), representing the standard error stream
(\fIcerr\fP);
Notes:
.IP o 
System-level redirection outlives system calls from the \fBexecl\fP(3)
family\&.
.IP o 
Destroying a \fBFBB::Redirector\fP object does \fInot\fP undo the
redirection set up by that object\&.

.PP 
.SH "NAMESPACE"
\fBFBB\fP
.br 
All constructors, members, operators and manipulators, mentioned in this
man-page, are defined in the namespace \fBFBB\fP\&.
.PP 
.SH "INHERITS FROM"
-
.PP 
.SH "ENUM"
The enumeration \fBStandardFileno\fP holds the following values:
.IP o 
\fISTDIN\fP (0)
.IP o 
\fISTDOUT\fP (1)
.IP o 
\fISTDERR\fP (2)
These values may be used to set up a redirection instead of the plain
numbers\&. 
.PP 
.SH "CONSTRUCTORS"
.IP o 
\fBRedirector(int fd)\fP:
.br 
This constructor expects the file descriptor of the file that will be
used in the program to access (read, write) another file\&.
.IP o 
\fBRedirector(Redirector const &other) throw()\fP:
.br 
The standard copy constructor is available\&.

.PP 
.SH "MEMBER FUNCTIONS"
.IP o 
\fBvoid accessVia(int alternateFd) const throw (Errno)\fP:
.br 
This is the only available member function\&. It expects the file
descriptor of the file that will be redirected\&. If the redirection fails an
\fBFBB::Errno\fP object is thrown, whose \fIwhich()\fP member shows the
system\&'s \fIerrno\fP value set by the failing \fBdup2\fP(2) function\&.

.PP 
.SH "EXAMPLE"
.nf 

    #include <iostream>
    #include <bobcat/redirector>
    
    using namespace std;
    using namespace FBB;
    
    int main()
    {
        Redirector redirector(Redirector::STDOUT);
        redirector\&.accessVia(Redirector::STDERR);
    
        cerr << "This appears at the standard output stream\en"
                "use `a\&.out > /dev/null\&' to suppress this message" << endl;
    }
        
.fi 

.PP 
.SH "FILES"
\fIbobcat/redirector\fP - defines the class interface
.PP 
.SH "SEE ALSO"
\fBbobcat\fP(7), \fBerrno\fP(3bobcat), \fBdup2\fP(2), \fBexecl\fP(3)
.PP 
.SH "BUGS"
None Reported\&.
.PP 
.SH "DISTRIBUTION FILES"
.IP o 
\fIbobcat_1\&.10\&.0-x\&.dsc\fP: detached signature;
.IP o 
\fIbobcat_1\&.10\&.0-x\&.tar\&.gz\fP: source archive;
.IP o 
\fIbobcat_1\&.10\&.0-x_i386\&.changes\fP: change log;
.IP o 
\fIlibbobcat1_1\&.10\&.0-x_i386\&.deb\fP: debian package holding the
libraries;
.IP o 
\fIlibbobcat1-dev_1\&.10\&.0-x_i386\&.deb\fP: debian package holding the
libraries, headers and manual pages;
.IP o 
\fIhttp://sourceforge\&.net/projects/bobcat\fP: public archive location;

.PP 
.SH "BOBCAT"
Bobcat is an acronym of `Brokken\&'s Own Base Classes And Templates\&'\&.
.PP 
.SH "COPYRIGHT"
This is free software, distributed under the terms of the 
Academic Free Licence\&.
.PP 
.SH "AUTHOR"
Frank B\&. Brokken (\fBf\&.b\&.brokken@rug\&.nl\fP)\&.
.PP 
