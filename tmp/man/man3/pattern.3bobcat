.TH "FBB::Pattern" "3bobcat" "2005-2006" "libbobcat1-dev_1\&.10\&.0-x\&.tar\&.gz" "Pattern matcher"

.PP 
.SH "NAME"
FBB::Pattern \- Performs RE pattern matching
.PP 
.SH "SYNOPSIS"
\fB#include <bobcat/pattern>\fP
.br 
Linking option: \fI-lbobcat\fP 
.PP 
.SH "DESCRIPTION"
\fBFBB::Pattern\fP objects may be used for Regular Expression (RE) pattern
matching\&. The class is a wrapper around the \fBregcomp\fP(3) family of
functions\&. 
.PP 
Patterns may use: 
.br 
\eb - indicating a word-boundary 
.br 
\ed - indicating a digit         
.br 
\es - indicating a white-space (\fI[:space:]\fP) char  
.br 
\ew - indicating a word (\fI[:alnum:]\fP) char
.PP 
The corresponding capitals (e\&.g\&., \fB\eW\fP) define the complementary
character sets\&. The capital sets cannot be used in character-classes (\fI[
\&.\&.\&. ]\fP constructions)\&. 
.PP 
As the \fI\e\fP is treated as a special character it should be doubled in
patterns that are passed to \fIPattern\fP objects: When a \fI\es\fP must be
matched, the pattern should therefore be written as \fI\e\es\fP\&. More in general,
stand-alone backslashes should be treated as follows:
.nf 

    ------------------------------------------------------------
    Required pattern        Provide Pattern()   Use as argument:
                            internally with:
    ------------------------------------------------------------
    \e\e                      \e\e\e\e                \e\e\e\e\e\e\e\e    
    \ed                      \ed                  \e\ed
    ------------------------------------------------------------
        
.fi 

.PP 
.SH "NAMESPACE"
\fBFBB\fP
.br 
All constructors, members, operators and manipulators, mentioned in this
man-page, are defined in the namespace \fBFBB\fP\&.
.PP 
.SH "INHERITS FROM"
-
.PP 
.SH "TYPEDEF"
.IP o 
\fBPattern::Position\fP:
.br 
A nested type representing the offsets of the first character and
the offset beyond the last character of the matched text or indexed
subexpression, defined as \fIstd::pair<std::string::size_type,
std::string::size_type>\fP\&.

.PP 
.SH "CONSTRUCTORS"
.IP o 
\fBPattern()\fP:
.br 
The default constructor defines no pattern, but is available as a
placeholder for, e\&.g\&., containers requiring default constructors\&. A
\fBFBB::Pattern\fP object thus constructed cannot be used to match patterns, but
can be the \fIlvalue\fP in assignments where another \fBFBB::Pattern\fP object is
the \fIrvalue\fP\&. However, it can receive a pattern using the member
\fBsetPattern()\fP (see below)\&. An \fBFBB::Errno\fP object is thrown if the object
could not be constructed\&.
.IP o 
\fBPattern(std::string const &pattern, 
bool caseSensitive = true, 
unsigned nSub = 10,
int options = REG_EXTENDED | REG_NEWLINE)\fP:
.br 
This constructor compiles \fIpattern\fP, preparing the \fBFBB::Pattern\fP
object for pattern matches\&. The second parameter determines whether case
sensitive matching will be used (the default) or not\&. Subexpressions are
defined by parentheses pairs\&. Each matching pair defines a subexpression,
where the order-number of their opening parentheses determines the
subexpression\&'s index\&. By default at most 10 subexpressions are recognized\&.
The \fIoptions\fP flags may be:
.IP 
REG_EXTENDED: 
.br 
Use POSIX Extended Regular Expression syntax when
interpreting regex\&.  If not set, POSIX Basic Regular
Expression syntax is used\&.
.IP 
REG_NOSUB: 
.br 
Support for substring addressing of matches is  not
required\&.   The  nmatch  and  pmatch  parameters to
regexec are ignored if the pattern buffer  supplied
was compiled with this flag set\&.
.IP 
REG_NEWLINE: 
.br 
Match-any-character  operators  don\&'t  match a newline\&.
.IP 
A non-matching list ([^\&.\&.\&.])  not containing a newline
does not match a newline\&.
.IP 
Match-beginning-of-line operator (^) matches the empty
string immediately after a newline, regardless of whether
eflags, the execution flags of regexec, contains
REG_NOTBOL\&.
.IP 
Match-end-of-line operator ($)  matches  the  empty
string  immediately before a newline, regardless of
whether eflags contains REG_NOTEOL\&.
.IP 
An \fBFBB::Errno\fP object is thrown if the regular expression could not
be compiled\&.
.IP 
.IP o 
\fBPattern(Pattern const &other)\fP:
.br 
The standard copy constructor is available\&.

.PP 
.SH "MEMBER FUNCTIONS"
All members of \fBstd::ostringstream\fP and \fB  std::exception\fP are
available, as \fBFBB::Pattern\fP inherits from these classes\&.
.IP o 
\fBstd::string before() const\fP:
.br 
Following a successful match, \fBbefore()\fP returns the text before the
matched text\&.
.IP o 
\fBstd::string beyond() const\fP:
.br 
Following a successful match, \fBbeyond()\fP returns the text beyond the
matched text\&.
.IP o 
\fBunsigned end() const\fP:
.br 
Returns the number of matched elements (text and
subexpressions)\&. \fBend()\fP is the lowest index value for which \fBposition()\fP
returns two \fIstd::string::npos\fP values (see the \fBposition()\fP member
function, below)\&.
.IP o 
\fBvoid match(std::string const &text, int options = 0)\fP:
.br 
Match a string with a pattern\&.  If the text could not be matched, an
\fBErrno\fP exception is thrown , using \fBPattern::match()\fP as its prefix-text\&.
.IP 
Options may be:
.IP 
REG_NOTBOL: 
.br 
The match-beginning-of-line operator always fails to match
(but see the compilation flag REG_NEWLINE above) This flag
may be used when different portions of a string are passed
to regexec and the beginning of the string should not be
interpreted as the beginning of the line\&.
.IP 
REG_NOTEOL: 
.br 
The  match-end-of-line  operator  always  fails  to
match  (but  see  the  compilation flag REG_NEWLINE)
.IP o 
\fBstd::string matched() const\fP:
.br 
Following a successful match, this function returns the matched text\&.
.IP o 
\fBPattern::Position position(unsigned index) const\fP:
.br 
With \fIindex == 0\fP the fully matched text is returned (identical to
\fImatched()\fP)\&. Other index values return the corresponding
subexpressions\&. \fBstd::string::npos, std::string::npos\fP is returned if index
is at least \fBend()\fP (which may happen at index value 0)\&.
.IP o 
\fBvoid setPattern(std::string const &pattern, 
bool caseSensitive = true, 
unsigned nSub = 10,
int options = REG_EXTENDED | REG_NEWLINE)\fP:
.br 
This member function installs a new  compiled \fIpattern\fP in its
\fBFBB::Pattern\fP object\&. This member\&'s parameters are identical to the second
constructor\&'s parameters\&. Refer to that constructor for details about the
parameters\&. Like the constructor, an \fBFBB::Errno\fP exception is thrown if the
new pattern could not be compiled\&.

.PP 
.SH "OVERLOADED OPERATORS"

.PP 
.IP o 
\fBPattern &operator=(Pattern &other)\fP:
.br 
A standard overloaded assignment operator\&.
.IP o 
\fBstd::string operator[](unsigned index) const\fP:
.br 
Returns the matched text (for index 0) or the text of a
subexpression\&. An empty string is returned for index values which are at least
\fBend()\fP\&.
.IP o 
\fBPattern &operator<<(int matchOptions)\fP:
.br 
Defines match-options to be used with the following overloaded
operator\&. 
.IP o 
\fBbool operator<<(std::string const &text)\fP:
.br 
Performs a \fBmatch(text, matchOptions)\fP call, catching any exception
that might be thrown\&. If no \fImatchOptions\fP were set using the above
overloaded operator, none are used\&. The options set this way are not `sticky\&':
when necessary, they have to be re-inserted before each new pattern
matching\&. The function returns \fBtrue\fP if the matching was successful,
\fBfalse\fP otherwise\&.

.PP 
.SH "EXAMPLE"
To do
.PP 
.SH "FILES"
\fIbobcat/pattern\fP - defines the class interface
.PP 
.SH "SEE ALSO"
\fBbobcat\fP(7)
.PP 
.SH "BUGS"
None Reported\&.
.PP 
.SH "DISTRIBUTION FILES"
.IP o 
\fIbobcat_1\&.10\&.0-x\&.dsc\fP: detached signature;
.IP o 
\fIbobcat_1\&.10\&.0-x\&.tar\&.gz\fP: source archive;
.IP o 
\fIbobcat_1\&.10\&.0-x_i386\&.changes\fP: change log;
.IP o 
\fIlibbobcat1_1\&.10\&.0-x_i386\&.deb\fP: debian package holding the
libraries;
.IP o 
\fIlibbobcat1-dev_1\&.10\&.0-x_i386\&.deb\fP: debian package holding the
libraries, headers and manual pages;
.IP o 
\fIhttp://sourceforge\&.net/projects/bobcat\fP: public archive location;

.PP 
.SH "BOBCAT"
Bobcat is an acronym of `Brokken\&'s Own Base Classes And Templates\&'\&.
.PP 
.SH "COPYRIGHT"
This is free software, distributed under the terms of the 
Academic Free Licence\&.
.PP 
.SH "AUTHOR"
Frank B\&. Brokken (\fBf\&.b\&.brokken@rug\&.nl\fP)\&.
.PP 
