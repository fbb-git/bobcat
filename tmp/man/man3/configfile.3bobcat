.TH "FBB::ConfigFileile" "3bobcat" "2005-2006" "libbobcat1-dev_1\&.10\&.0-x\&.tar\&.gz" "Configuration File Processing"

.PP 
.SH "NAME"
FBB::ConfigFileile \- A class processing standard unix-like configuration files
.PP 
.SH "SYNOPSIS"
\fB#include <bobcat/configfile>\fP
.br 
Linking option: \fI-lbobcat\fP 
.PP 
.SH "DESCRIPTION"
\fBFBB::ConfigFile\fP objects read standard \fIunix\fP-style configuration
files\&.  Lines are stored with initial white-space (blanks and tabs) removed\&.
If a line ends in \e, then the next line (initial white-space removed) is
appended to the current line\&.
.PP 
Information at and beyond the first \fI#\fP on individual lines is removed
if the \fIrmComment\fP flag is set to \fBtrue\fP\&.  In that case, lines containing
only blanks and tabs are not stored\&.
.PP 
.SH "NAMESPACE"
\fBFBB\fP
.br 
All constructors, members, operators and manipulators, mentioned in this
man-page, are defined in the namespace \fBFBB\fP\&.
.PP 
.SH "INHERITS FROM"
\fBstd::vector<std::string>\fP
.PP 
.SH "ENUMERATIONS"
The following enumerations are defined by the class \fBFBB::ConfigFile\fP:
.IP o 
\fBComment\fP:
.br 
This enumeration has two values: 
.br 
\fBFBB::ConfigFile::KeepComment\fP is used to indicate that comment on
lines must be kept; 
.br 
\fBFBB::ConfigFile::RemoveComment\fP is used to indicate that comment on
lines must be removed;
.IP o 
\fBSearchCasing\fP:
.br 
This enumeration also has two values:
.br 
\fBFBB::ConfigFile::SearchCaseSensitive\fP is used to do case sensitive
searches for targets;
.br 
\fBFBB::ConfigFile::SearchCaseInsensitive\fP is used to do case
insensitive searches for targets\&.
.IP o 
\fBIndices\fP:
.br 
This enumeration also has two values:
.br 
\fBFBB::ConfigFile::IgnoreIndices\fP when used, the line numbers of the
original configuration file will not be made available;
.br 
\fBFBB::ConfigFile::StoreIndices\fP when used, the line numbers of the
original configuration file will be made available;
.br 

.PP 
.SH "CONSTRUCTORS"
.IP o 
\fBConfigfile(Comment cType = KeepComment, SearchCasing sType =
SearchCaseSensitive, Indices iType = IgnoreIndices)\fP:
.br 
This constructor is used to create an empty \fBFBB::ConfigFile\fP
object\&. It is not associated with an input stream: the \fBopen()\fP member can
be used for that\&. The parameters can be used to specify specific handling of
comment, letter-casing and storage of line numbers in the original
configuration file\&.
.IP o 
\fBConfigfile(std::string const &fname, Comment cType = KeepComment,
SearchCasing sType = SearchCaseSensitive, 
Indices iType = IgnoreIndices)\fP:
.br 
This constructor is used to create a \fBFBB::ConfigFile\fP object, which
is filled with the information from a file whose name is provided as the
constructor\&'s first argument\&. The other parameters are used as described with
the first constructor\&.
.IP o 
\fBConfigfile(FBB::ConfigFile const &other)\fP:
.br 
The copy constructor is available\&.

.PP 
.SH "MEMBER FUNCTIONS"
All members of \fBstd::vector<std::string>\fP  are
available, as \fBFBB::ConfigFile\fP inherits from this class\&.
.IP o 
\fBConfigFile::const_RE_iterator beginRE(std::string const &target) const\fP:
.br 
This member returns a \fIconst\fP iterator to the first element (i\&.e\&.,
line) of the \fBFBB::ConfigFile\fP object in which the regular expression
\fItarget\fP is found\&. \fBFBB::Pattern\fP is used to perform the pattern
matching\&. If the \fIRemoveComment\fP flag was specified, then comment-text is
not searched\&.  The returned iterator can be incremented until \fBendRe()\fP is
reached; all iterators will point to lines matching the specified regular
expression\&.  This member also interprets the \fISearchCasing\fP flag\&.
.IP o 
\fBConfigFile::const_RE_iterator endRE() const\fP:
.br 
This member returns a \fIconst\fP iterator marking the end of the series
of lines started at the the first line matching the regular expression
specified by \fBbeginRE()\fP
.IP o 
\fBConfigFile::const_iterator find(std::string const &target) const\fP:
.br 
This member will return an iterator to the first element (i\&.e\&., line)
of the \fBFBB::ConfigFile\fP object in which \fItarget\fP is found\&. Note that
\fItarget\fP may appear anywhere within a line\&. If the \fIRemoveComment\fP flag
was specified, then comment-text is not searched\&. Use the
\fBFBB::ConfigFile::end()\fP member to determine the end-iterator\&. It is not
guaranteed that all lines between the returned iterator and \fBend()\fP will
also contain \fItarget\fP\&.  This member also interprets the \fISearchCasing\fP
flag\&.
.IP o 
\fBConfigFile::const_iterator findRE(std::string const &target) const\fP:
.br 
This member returns an iterator to the first element (i\&.e\&., line) of
the \fBFBB::ConfigFile\fP object in which the regular expression \fItarget\fP is
found\&. \fBFBB::Pattern\fP is used to perform the pattern matching\&. If the
\fIRemoveComment\fP flag was specified, then comment-text is not searched\&.  The
inherited \fBFBB::ConfigFile::end()\fP member can be used to determine the
end-iterator\&. It is not guaranteed that all lines between the returned
iterator and \fBend()\fP will also contain \fItarget\fP\&. If that is required, the
members \fBbeginRE()\fP and \fBendRE()\fP can be used\&.  This member also
interprets the \fISearchCasing\fP flag\&.
.IP o 
\fBunsigned index(unsigned idx)\fP:
.br 
This function should only be used when the parameter \fIStoreIndices\fP
was specified at construction time\&. In that case it will return the original
0-based line index in the configuration file associated with the \fIidx\fPsup(th)
(0-based) index in the current \fIConfiguration\fP object\&. 
.IP o 
\fBunsigned index(const_iterator const &iter)\fP:
.br 
This function should only be used when the parameter \fIStoreIndices\fP
was specified at construction time\&. In that case it will return the original
0-based line index in the configuration file associated with the configuration
line in the current \fIConfiguration\fP object pointed to by \fIiter\fP\&. This may
also be an (incremented version of the) iterator returned by the member
\fIfindRE\fP or \fIbeginRE\fP, as long as the iterator\&'s value is within the half
open range \fIbeginRE\fP to \fIendRE\fP\&.
.IP o 
\fBvoid open(std::string const &fname) throw(FBB::Errno)\fP:
.br 
This member will read the configuration file having name \fIfname\fP\&.
It will redefine the current contents of the \fBFBB::ConfigFile\fP object,
destroying any information previously stored in it\&. The configuation file is
read according to the latest setting of the comment-flag\&. It will throw an
\fIFBB::Errno\fP exception if the file could not be opened\&.
.IP o 
\fBvoid setCommentHandling(Comment type)\fP:
.br 
This member can be used to change the comment-handling type originally
set by the constructor, or set by earlier calls of this function\&. When called
it won\&'t affect the current contents of the \fBFBB::ConfigFile\fP object, but
new calls of its \fIopen()\fP member will read the configuation file according
to the last setting of the comment flag\&.
.IP o 
\fBvoid setSearchCasing(SearchCasing type)\fP:
.br 
This member can be used to change the handling of the letter-casing
originally set by the constructor, or set by earlier calls of this
function\&. When called it won\&'t affect the current contents of the
\fBFBB::ConfigFile\fP object, but new calls of its \fIopen()\fP member will read
the configuation file according to the last setting of the letter-casing flag\&.
.IP 
.SH "EXAMPLE"
Assume the configuration file is called \fIconfig\&.rc\fP and contains the
following lines: 
.PP 
.nf 


# this is ignored

noline: this one too

line: this is found

this is not a line containing line: at the beginning of the line

line: this one is

    line: what about this one? \e 
        it\&'s extending over multiple lines

and there may, of course, be more lines in this file
    
.fi 

.PP 
The following program may be compiled and run as \fIa\&.out config\&.rc\fP:
.nf 

#include <iostream>
#include <iterator>
#include <algorithm>
#include <string>
#include <bobcat/configfile>

using namespace std;
using namespace FBB;
    
int main(int argc, char **argv)
{
    ConfigFile cf(argv[1]);     

    cout << *cf\&.find("this one") << endl; // find text within a line

                                         // find all lines matching 
                                         // `^line:\&'
    copy(cf\&.beginRE("^line:"), cf\&.endRE(), 
                    ostream_iterator<string>(cout, "\en"));
}
    
.fi 

.PP 
Producing the output:
.nf 

noline: this one too
line: this is found
line: this one is
line: what about this one? it\&'s extending over multiple lines
    
.fi 

.PP 
.SH "FILES"
\fIbobcat/configfile\fP - defines the class interface
.PP 
.SH "SEE ALSO"
\fBbobcat\fP(7), \fBerrno\fP(3bobcat), \fBpattern\fP(3bobcat)
.PP 
.SH "BUGS"
None Reported\&.
.PP 
.SH "DISTRIBUTION FILES"
.IP o 
\fIbobcat_1\&.10\&.0-x\&.dsc\fP: detached signature;
.IP o 
\fIbobcat_1\&.10\&.0-x\&.tar\&.gz\fP: source archive;
.IP o 
\fIbobcat_1\&.10\&.0-x_i386\&.changes\fP: change log;
.IP o 
\fIlibbobcat1_1\&.10\&.0-x_i386\&.deb\fP: debian package holding the
libraries;
.IP o 
\fIlibbobcat1-dev_1\&.10\&.0-x_i386\&.deb\fP: debian package holding the
libraries, headers and manual pages;
.IP o 
\fIhttp://sourceforge\&.net/projects/bobcat\fP: public archive location;

.PP 
.SH "BOBCAT"
Bobcat is an acronym of `Brokken\&'s Own Base Classes And Templates\&'\&.
.PP 
.SH "COPYRIGHT"
This is free software, distributed under the terms of the 
Academic Free Licence\&.
.PP 
.SH "AUTHOR"
Frank B\&. Brokken (\fBf\&.b\&.brokken@rug\&.nl\fP)\&.
.PP 
