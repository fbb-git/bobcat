.TH "FBB::String" "3bobcat" "2005-2006" "libbobcat1-dev_1\&.10\&.0-x\&.tar\&.gz" "Error handler"

.PP 
.SH "NAME"
FBB::String \- Several extensions to \fBstd::string\fP
.PP 
.SH "SYNOPSIS"
\fB#include <bobcat/string>\fP
.br 
Linking option: \fI-lbobcat\fP 
.PP 
.SH "DESCRIPTION"
This class offers the same functionality as \fBstd::string\fP, adding
facilities for often used transformations, currently missing in
\fBstd::string\fP\&.  
.PP 
.SH "NAMESPACE"
\fBFBB\fP
.br 
All constructors, members, operators and manipulators, mentioned in this
man-page, are defined in the namespace \fBFBB\fP\&.
.PP 
.SH "INHERITS FROM"
\fBstd::string\fP
.PP 
.SH "ENUMERATION"
.IP o 
\fBType\fP:
.br 
This enumeration has the following values, which are used in the second
variant of the \fBsplit\fP member (see below): 
.IP 
\fBDQUOTE\fP, a series of characters surrounded by double quotes
in the original string; 
.IP 
\fBDQUOTE_UNTERMINATED\fP, a series of characters beginning with
a double quote in the original string, but lacking the matching terminating
double quote;
.IP 
\fBESCAPED_END\fP, a series of characters representing an
otherwise normal string, but terminating in a plain backslash;
.IP 
\fBNORMAL\fP, a normal string; 
.IP 
\fBSEPARATOR\fP, a separator;
.IP 
\fBSQUOTE\fP, a series of characters surrounded by single quotes
in the original string; 
.IP 
\fBSQUOTE_UNTERMINATED\fP, a series of characters beginning with
a single quote in the original string, but lacking the matching terminating
single quote\&.

.PP 
.SH "TYPEDEF"

.PP 
The \fBtypedef SplitPair\fP represents \fBstd::pair<std::string,
String::Type>\fP and is used in the second variant of the \fBsplit\fP member (see
below)\&.
.PP 
.SH "CONSTRUCTORS"
.IP o 
\fBString()\fP:
.br 
The default constructor, creating an empty \fBFBB::String\fP object\&.
.IP o 
\fBString(std::string const &str)\fP:
.br 
Initializes a \fBFBB::String\fP with the contents of an existing
\fBstd::string\fP\&.
.IP o 
\fBString(char const *cp)\fP:
.br 
:
.br 
Initializes a \fBFBB::String\fP with the contents of an existing
\fBC\fP-string: \fBcp\fP should not be a 0-pointer
.IP o 
\fBString(String const &other)\fP:
.br 
The standard copy constructor is available\&.

.PP 
.SH "MEMBER FUNCTIONS"
All members of \fBstd::ostringstream\fP and \fB  std::exception\fP are
available, as \fBFBB::String\fP inherits from these classes\&.
.IP o 
\fBint casecmp(std::string const &other) const\fP:
.br 
Performs a case-insensitive comparison between the current object\&'s
contents and the contenst of \fIother\fP\&. A negative value is returned if the
current object should be ordered before \fIother\fP; 0 is returned if the two
strings have identical contents; a positive value is returned if the
current object should be ordered beyond \fIother\fP\&.
.IP o 
\fBString lc() const\fP:
.br 
Returns a copy of the current string in which all letters were
transformed to lower case letters\&.
.IP o 
\fBString trim() const\fP:
.br 
Returns a copy of the current string from which the leading and
trailing blanks have been removed\&.
.IP o 
\fBunsigned  split(std::vector<std::string> *words,
char const *separators = " \et", bool addEmpty = false)\fP:
.br 
Fills \fIwords\fP with all elements of the current string, separated by
any of the characters in \fIseparators\fP\&. If the parameter \fIaddEmpty\fP is set
to \fItrue\fP, the individual separators are stored as empty strings in
\fIwords\fP\&. If a word starts with \fI"\fP or \fI\&'\fP all characters until a
matching terminating \fI"\fP or \fI\&'\fP at the end of a word are considered as one
word\&.  The surrounding quotes are not stored\&. The function returns the number
of elements in the vector pointed to by \fIwords\fP\&. This vector is initially
cleared\&.
.IP o 
\fBunsigned  split(std::vector<SplitPair> *words,
char const *separators = " \et", bool addEmpty = false)\fP:
.br 
Same functionality as the former member, but the \fIwords\fP vector is
filled with pairs, of which the first elements are the recognized strings, and
the second elements values of the \fIString::Type\fP enumeration\&. If
\fBaddEmpty\fP is requested, then the \fBstring\fP elements contain the actual
contents of the separator, while the \fBType\fP elements are set to
\fBSEPARATOR\fP\&.
.IP o 
\fBString unescape() const\fP:
.br 
Returns a \fIString\fP object in which the escaped (i\&.e\&., prefixed by a
backslash) characters have been interpreted\&. All standard escape characters
(\fI\ea\fP, \fI\eb\fP, \fI\ef\fP, \fI\en\fP, \fI\er\fP, \fI\et\fP, \fI\ev\fP) are recognized\&. If an
escape character is followed by \fIx\fP or \fIX\fP the next two characters are
interpreted as a hexadecimal number\&. If an escape character is followed by an
octal digit, then the next three characters following the backslash are
interpreted as an octal number\&. In all other cases, the backslash is removed
and the character following the backslash is kept\&.
.IP o 
\fBString uc() const\fP:
.br 
Returns a copy of the current string in which all letters were
capitalized\&. 

.PP 
.SH "STATIC MEMBER FUNCTION"
.IP o 
\fBchar const **argv(std::vector<std::string> const &words)\fP:
.br 
Returns a pointer to an allocated series of pointers to the \fBC\fP
strings stored in the vector \fIwords\fP\&. The caller is responsible for
returning the array of pointers to the common pool, but should \fInot\fP delete
the \fBC\fP-strings to which the pointers point\&. The last element of the
returned array is guaranteed to be a 0-pointer\&. 

.PP 
.SH "EXAMPLE"
To do
.PP 
.SH "FILES"
\fIbobcat/string\fP - defines the class interface
.PP 
.SH "SEE ALSO"
\fBbobcat\fP(7)
.PP 
.SH "BUGS"
None Reported\&.
.PP 
.SH "DISTRIBUTION FILES"
.IP o 
\fIbobcat_1\&.10\&.0-x\&.dsc\fP: detached signature;
.IP o 
\fIbobcat_1\&.10\&.0-x\&.tar\&.gz\fP: source archive;
.IP o 
\fIbobcat_1\&.10\&.0-x_i386\&.changes\fP: change log;
.IP o 
\fIlibbobcat1_1\&.10\&.0-x_i386\&.deb\fP: debian package holding the
libraries;
.IP o 
\fIlibbobcat1-dev_1\&.10\&.0-x_i386\&.deb\fP: debian package holding the
libraries, headers and manual pages;
.IP o 
\fIhttp://sourceforge\&.net/projects/bobcat\fP: public archive location;

.PP 
.SH "BOBCAT"
Bobcat is an acronym of `Brokken\&'s Own Base Classes And Templates\&'\&.
.PP 
.SH "COPYRIGHT"
This is free software, distributed under the terms of the 
Academic Free Licence\&.
.PP 
.SH "AUTHOR"
Frank B\&. Brokken (\fBf\&.b\&.brokken@rug\&.nl\fP)\&.
.PP 
