.TH "FBB::TableSupport" "3bobcat" "2005-2007" "libbobcat1-dev_1\&.14\&.1-x\&.tar\&.gz" "Table Support Base class"

.PP 
.SH "NAME"
FBB::TableSupport \- Defines protocol for Table-support classes
.PP 
.SH "SYNOPSIS"
\fB#include <bobcat/tableSupport>\fP
.br 
Linking option: \fI-lbobcat\fP 
.PP 
.SH "DESCRIPTION"
This class is designed as a (non-pure) base class for objects handling
some of the functionality of \fBFBB::Table\fP objects\&. By overriding its virtual
functions users have control over the way the actual layout of tables is
defined\&. By default the virtual members of this class implement plain,
blank-space delimited table elements\&.
.PP 
When this is not appropriate, a class should be derived from
\fBFBB::TableSupport\fP overriding those members that violate the programmer\&'s
current intentions\&. Then, an object of this derived class may be presented 
to one of the \fBFBB::Table\fP constructors, resulting in modifications of the
default procedures used to disaplay separators between table elements\&.
.PP 
.SH "NAMESPACE"
\fBFBB\fP
.br 
All constructors, members, operators and manipulators, mentioned in this
man-page, are defined in the namespace \fBFBB\fP\&.
.PP 
.SH "INHERITS FROM"
-
.PP 
.SH "PUBLIC TYPE"

.PP 
The type \fBHLine\fP is a \fBstruct\fP having the following fields:
.nf 

    size_t d_row;
    size_t d_begin;
    size_t d_end;
        
.fi 
Furthermore, it has a constructor that is defined as follows:
.IP o 
\fBHLine(size_t row, size_t begin, size_t end)\fP:
.br 
This constructor may be used to initialize the struct\&'s values\&.
Objects of type \fBTableSupport::HLine\fP may be inserted into a
\fBTableSupport\fP object to indicate what section(s) of a horizontal separator
of a table-row should be displayed or skipped (see below at the \fIType\fP-type
description)\&. 
.PP 
.SH "PROTECTED TYPES"

.PP 
The following types may be used by classes derived from \fBTableSupport\fP:
.IP o 
\fBBeginEnd\fP:
.br 
This type represents a \fBstd::pair<size_t, size_t>\fP, representing the
first column offset for which a horizontal separator should be shown
(\fIfirst\fP) and the first column offset beyond the last column offset to show
a separator for\&. E\&.g, \fIBeginEnd(2, 5)\fP indicates that a separator should be
shown from column 2 until column 4\&.
.IP o 
\fBconst_iterator\fP:
.br 
The \fBTableSupport::const_iterator\fP is an input-iterator returning
pointers to \fBElement struct\fPs for all column separators and elements in a
table\&. The first element represents the separator immediately preceding the
elements in the table\&'s leftmost column, the last element represents the
separator immediately succeeding the elements in the table\&'s rightmost
column\&. 
.IP o 
\fBElement\fP:
.br 
An \fBElement\fP is a \fBstruct\fP having two fields: a \fIType type\fP and
a \fIsize_t width\fP\&. The \fIwidth\fP field defines the size of a
column(-separator), \fItype\fP defines its type\&.
.IP o 
\fBType\fP:
.br 
This type has two values: \fBSKIP\fP and \fBUSE\fP\&. The values indicate
that a certain part of a row may be left blank or should be using a
separator when a horizontal line (\fBhline()\fP) is written\&.
.IP o 
\fBSizeBeginEndMap\fP:
.br 
This type represents a \fBstd::map<size_t, std::vector<BeginEnd> >\fP\&.
Its key represents a row-separator (0 being the separator above row 0,
\fInRows\fP being the separator beyond the last row)\&. Subsequent 
\fBBeginEnd\fP elements in its \fBvector\fP values should represent increasing and
non overlapping sections of a table \&.

.PP 
.SH "CONSTRUCTORS"

.PP 
The default constructor and standard copy constructor are available\&.
.PP 
.SH "OVERLOADED OPERATORS"

.PP 
.IP o 
\fBTableSupport &operator<<(TableSupport &support, size_t width)\fP:
.br 
This operator defines a blank column-separator of \fIwidth\fP
characters\&. The argument \fIwidth\fP may be zero, in which case no visible
separator is inserted into the table (thus, it can be used to reach the next
separator position)\&. The first separator inserted refers to the separator to
the left of the table\&'s leftmost column\&. Subsequent separators separate
subsequent columns\&. At most \fInColumns + 1\fP separators can be inserted\&. Any
additional separator that is inserted is ignored\&.
.IP o 
\fBTableSupport &operator<<(TableSupport &support, 
std::string const &sep)\fP:
.br 
This operator defines a textual separator\&. The string may be empty, in
which case no visible separator is inserted into the table (thus, it can be
used to reach the next separator position)\&. The first separator inserted
refers to the separator to the left of the table\&'s leftmost column\&. Subsequent
separators separate subsequent columns\&. At most \fInColumns + 1\fP separators
can be inserted\&. Any additional separator that is inserted is ignored\&.
.IP o 
\fBTableSupport &operator<<(TableSupport &support, HLine const &hsep)\fP:
.br 
This operator defines a section of a horizontal separator of a
specified row which should be displayed\&. Subsequent insertions of \fBHLine\fP
elements referring to the same row should refer to increasing and
non overlapping sections of a table\&. E\&.g\&., if \fIsupport\fP is a
\fBTableSupport\fP object, the following insertions indicate that columns 2
until 3 and 5 until 6 of row 7 should have a visible horizontal separator:
.nf 

    support << HLine(7, 2, 4) << HLine(7, 5, 7);
        
.fi 
The overloaded assignment operator is available\&.
.PP 
.SH "NON_VIRTUAL MEMBER FUNCTIONS"
.IP o 
\fBvoid setParam(std::ostream &ostr, size_t nRows, size_t nColumns,
std::vector<Align> const &align)\fP:
.br 
This member function defines the \fBTableSupport\fP object\&'s essential
parameters: 
.br 
\fBostr\fP is a reference to the \fBstd::ostream\fP into which the table
will be inserted; 
.br 
\fBnRows\fP specifies  the number of rows used by the table;
.br 
\fBnColumns\fP specifies  the number of columns if the table;
.br 
\fBalign\fP is a reference to a constant vector of (column) alignment
specifications\&. This member should normally not be used by the programmer\&. It
is called with appropriate values by \fBFBB::Table\fP objects\&.
.IP o 
\fBsize_t width() const\fP:
.br 
Returns the width of the table\&.

.PP 
.SH "VIRTUAL MEMBER FUNCTIONS"

.PP 
The following member functions may be overridden in derived classes\&. There
default implementations are given together with their prototypes, below:
.PP 
.IP o 
\fBvirtual void hline(size_t row) const\fP:
.br 
This member is called just before the indicated row (offset, not
number) is inserted into the \fBstd::ostream\fP\&.  Its intended task is to write
a (partial) horizontal line either before the first row (row == 0) or between
two rows of the table\&. By default it performs no actions\&.
.IP o 
\fBvirtual void hline() const\fP:
.br 
This member is called when the table\&'s last line has been inserted 
into the \fBstd::ostream\fP\&. Its intended task is to write a (partial) horizontal
line at the end of the table\&. By default it calls \fIhline(nRows)\fP\&.
.IP o 
\fBvirtual void vline(size_t col) const\fP:
.br 
This member is called just before the indicated column element
(offset, not number) is inserted into the \fBstd::ostream\fP\&. Its intended task
is to write a separator either before the first element of a row (col == 0) or
between two subsequent elements in the table\&'s rows\&. By default it performs no
actions\&.
.IP o 
\fBvirtual void vline() const\fP:
.br 
This member is called when the last element of a row has been inserted
into the \fIostr\fP stream\&.  Its intended task is to write a line separator,
terminating a line of the table\&. By default it inserts a new-line (\fI\en\fP)
character\&. 

.PP 
.SH "PROTECTED MEMBER FUNCTIONS"

.PP 
The following members are available to classes derived from
\fBTableSupport\fP objects, e\&.g, to be used in overridden \fBhline()\fP or
\fBvline()\fP members\&. 
.IP o 
\fBstd::vector<Align> const &align() const\fP:
.br 
This member returns a reference to a vector of \fIAlign\fP objects,
defining the alignments and widths of the table\&'s columns\&.
.IP o 
\fBconst_iterator begin(size_t row) const\fP:
.br 
This member returns an iterator returning information about fields to
display or ignore in the horizontal separator preceding line \fIrow\fP\&. To
obtain the information beyond the last row specify \fInRows\fP as its argument\&.
.IP o 
\fBsize_t colWidth(size_t col) const\fP:
.br 
This member returns the width of the indicated column;
.IP o 
\fBconst_iterator end(size_t row) const\fP:
.br 
This member returns an iterator which refers to the location beyond
the table\&'s rightmost separator\&.
.IP o 
\fBSizeBeginEndMap const &hlineMap() const\fP:
.br 
This member returns a reference to the information defining the 
visible separatorsections of the table\&.
.IP o 
\fBsize_t nColumns() const\fP:
.br 
This member returns the number of columns of the table\&.
.IP o 
\fBsize_t nRows() const\fP:
.br 
This member returns the number of rows of the table\&.
.IP o 
\fBstd::ostream &out() const\fP:
.br 
This member returns a reference to the stream into which the table
is inserted\&.
.IP o 
\fBstd::vector<std::string> const &sep()\fP:
.br 
This member returns a reference to the separators that are defined for
the table\&'s columns\&. Element 0 refers to the separator to the left of the
leftmost table column, element \fInColumns\fP refers to the separator to the
right of the rightmost table column\&.
.IP o 
\fBsize_t sepWidth(size_t col) const\fP:
.br 
This member returns the width of the indicated separator\&. Index value
0 refers to the separator before the table\&'s leftmost column, index value
\fInColumns()\fP refers to the separator to the right of the table\&'s rightmost
column\&. 

.PP 
.SH "EXAMPLE"
See the example in the \fBtable\fP(3bobcat) man-page\&.
.PP 
.SH "FILES"
\fIbobcat/tableSupport\fP - defines the class interface
.PP 
.SH "SEE ALSO"
\fBbobcat\fP(7), \fBalign\fP(3bobcat), \fBtable\fP(3bobcat)
.PP 
.SH "BUGS"
None Reported\&.
.PP 
.SH "DISTRIBUTION FILES"
.IP o 
\fIbobcat_1\&.14\&.1-x\&.dsc\fP: detached signature;
.IP o 
\fIbobcat_1\&.14\&.1-x\&.tar\&.gz\fP: source archive;
.IP o 
\fIbobcat_1\&.14\&.1-x_i386\&.changes\fP: change log;
.IP o 
\fIlibbobcat1_1\&.14\&.1-x_i386\&.deb\fP: debian package holding the
libraries;
.IP o 
\fIlibbobcat1-dev_1\&.14\&.1-x_i386\&.deb\fP: debian package holding the
libraries, headers and manual pages;
.IP o 
\fIhttp://sourceforge\&.net/projects/bobcat\fP: public archive location;

.PP 
.SH "BOBCAT"
Bobcat is an acronym of `Brokken\&'s Own Base Classes And Templates\&'\&.
.PP 
.SH "COPYRIGHT"
This is free software, distributed under the terms of the 
GNU General Public License (GPL)\&.
.PP 
.SH "AUTHOR"
Frank B\&. Brokken (\fBf\&.b\&.brokken@rug\&.nl\fP)\&.
.PP 
