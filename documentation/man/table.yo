includefile(include/header)

COMMENT(manpage, section, releasedate, archive, short name)
manpage(FBB::Table)(3bobcat)(_CurYrs_)(libbobcat-dev__CurVers_-x.tar.gz)
                    (Table-formatter)

manpagename(FBB::Table)(Generates row- or column-wise filled tables)

manpagesynopsis()
    bf(#include <bobcat/table>)nl()
    Linking option: tt(-lbobcat) 

manpagedescription()

    bf(FBB::Table) objects can be used to create tables. The tables are filled
either column-wise or row-wise. Many of the table's characteristics may be
fine-tuned using a separate bf(FBB::TableSupport) object, described in a
separate man-page (bf(TableSupport)(3bobcat)). When no bf(FBB::TableSupport)
object is used, a plain row-wise or column-wise table is constructed
which can be inserted into a bf(std::ostream).

    Tables defined by tt(Table) consist of a (number of element dependent)
number of rows and a fixed number of columns, the latter value is specified at
construction time. Columns and rows are normally addressed using index values
(starting at 0). Before the leftmost column, between the columns and beyond
the last column em(separators) are defined. By default the separators are
empty, but each separator may be given a (fixed) width or content. The
separator before column tt(col) is addressed as separator tt(col), the
rightmost separator is addressed as separator tt(nColummns). 

Likewise, rows can be separated from each other using separators. These
separating rows are also empty by default. The row-separator before row
tt(row) is addressed as row-separator tt(row). The row-separator following the
final row is addressed as row-separator tt(nRows), where tt(nRows) is the
value returned by the tt(nRows) member function.

Non-default (i.e., non-empty) separators are defined using
tt(FBB::TableSupport) objects (cf. bf(tablesupport)(3bobcat)).

    tt(Table) objects look a lot like tt(ostream) objects, but they also adopt
a fairly rigid way to define new elements: each new insertion defines another
table element, and it is difficult to end a row before it has received its
tt(nColumn) number of elements. tt(Table)'s sister-class, tt(TableBuf), is a
tt(std::streambuf) type of class, offering additional control through the use
of a wrapping tt(ostream) class object.

includefile(include/namespace)

manpagesection(INHERITS FROM)

    bf(std::ostringstream) - tt(Table) inherits from bf(std::ostringstream),
allowing insertions into a bf(Table) object. Each separate insertion adds
another element to the bf(Table) object.

    bf(FBB::TableBase) - This class implements common elements of the
table implementation (the tt(FBB::TableBuf) class is also derived from
tt(TableBase). The tt(TableBase) class is not intended to be used otherwise,
and no separate man-page is provided. All facilities provided by tt(Table)
inherited from tt(TableBase) are described in this man-page.

manpagesection(ENUMERATIONS)
    The following enumerations are defined by the class bf(FBB::Table):
    bf(enum FillDirection)nl()
    This enumeration defines two values:
    itemization(
    itb(ROWWISE)
        When this value is specified at construction time, elements are added
row-wise to the table. I.e., the second element inserted into the bf(Table)
will be found in the second column of the first row.
    itb(COLUMNWISE)
        When this value is specified at construction time, elements are added
column-wise to the table. I.e., the second element will be found in the second
row of the first column.
    )

    bf(enum WidthType)nl()
    This enumeration defines two values:
    itemization(
    itb(COLUMNWIDTH)
        This value may be specified when the columns should be allowed
variable widths. In this case each column will be as wide as its widest
element. This is the default bf(WidthType) used by bf(Table) objects. 
    itb(EQUALWIDTH)
        This value may be specified when all the table's columns should have
equal width (i.e., equal to the width of the widest table element), 
    )

manpagesection(CONSTRUCTORS)
    itemization(
    itb(Table(size_t nColumns, Table::FillDirection direction,
            Table::WidthType widthType = Table::COLUMNWIDTH))
        The table's number of columns, the fill directions and the column
width-type must be provided.  The number of rows is implied by the combination
of this parameter and the number of elements that is actually inserted into
the bf(Table) object.  The bf(direction) parameter specifies the way new
elements are added to the bf(Table) object: row-wise or column-wise. Finally,
the tt(widthType) parameter is used to specify the way the width of the
table's columns is determined. Each column either defines its own width or all
columns have equal widths.
    itb(Table(TableSupport &tableSupport, Table::FillDirection direction,
            Table::WidthType widthType = Table::COLUMNWIDTH))
        This constructor operates identically to the previous constructor, but
expects an additional reference to a bf(TableSupport) object. A
bf(TableSupport) object offers additional formatting features used by the
table defining elements like horizontal lines between rows, additional
separators, etc, etc. The bf(TableSupport) object is passed as a non-const
reference as the bf(Table) object must be able to manipulate its data. See
bf(tablesuppport)(3bobcat) for more information about tt(TableSupport).
    )
    The copy constructor is not available.

manpagesection(OVERLOADED OPERATORS)

    itemization(
    itb(std::ostream &operator<<(std::ostream &str, Table &table))
        This operator inserts a bf(Table) into a tt(std::ostream) object.
This operator requires a non-const table as it may have to complete the table
by adding empty elements (i.e., empty strings) to obtain a completely filled
rectangular table.
    itb(Table &operator<<(Table &obj, Align const &align))
        This operator is used to change the default alignment of either a
column or an element. It is a wrapper around the member tt(setAlign()) (see
below for its description). By default, all elements are right-aligned. See
bf(align)(3bobcat) for more information about the tt(Align) class.
    itb(Table &operator<<(Table &obj, Type const &x))
        This overloaded operator is defined as a function template: bf(Type)
is a template type parameter instantiated to a type for which
bf(std::ostringstream) insertions are possible.  It inserts the value/object
tt(x) into the bf(Table)'s bf(std::ostringstream) base class object as the
next element of the table.
    )
    The overloaded assignment operator is not available.

manpagesection(MEMBER FUNCTIONS)
    itemization(
    itb(Table &append(std::string const &text
                 char const *sep = " \t", bool addEmpty = false))
        Fields in tt(text) separated by one of the characters in tt(sep) are
added as additional elements to the bf(Table) object. Empty fields are ignored
unless the parameter tt(addEmpty) is initialized to tt(true).
    itb(void clear())
        The contents of the table are erased. All existing elements are
removed, and the table will be empty.
    itb(void clearStr())
        The contents of its tt(std::ostringstream) base class buffer are
erased.
    itb(void fill(InputIterator begin, InputIterator end))
        This member is defined as a member template; tt(InputIterator) is a
template type parameter representing any input iterator. It can also be, e.g.,
a pointer to an insertable type. The iterators must point to data elements
which can be inserted into an tt(std::ostream). The range of values implied by
the member's iterator pair are inserted into the table as new elements.
    itb(void push_back(std::string const &element))
        New elements can be added to the table using tt(push_back). It is,
e.g., called from a tt(back_inserter) adaptor).
    itb(size_t nRows())
        The currently available number of rows in the table is returned. Its
value is only defined after calling bf(CHAR(d)ef()).
    itb(Table &setAlign(Align const &align))
        The alignment type of either a column or an element of the bf(Table)
object is defined using tt(setAlign). The standard alignments tt(std::left,
std::right) and tt(std::internal) may be specified, but in addition the
alignment tt(FBB::center) may be used if elements should be centered into
their column. A construction like
        verb(tab << Align(2, FBB::center))
    requests centering of all elements in the table's column having index
value 2 (i.e., the table's 3rd column), whereas a construction like
        verb(tab << Align(2, 3, FBB::center))
    requests centering of element [2][3]. It is the responsibility of the
programmer to ensure that such elements exist. By default, all elements are
right-aligned.
    itb(Table &CHAR(d)ef())
        After inserting elements into a tt(Table) object its number of
elements may or may not be an integral multiple of the number of columns
specified at construction time. To `complete' a bf(Table) object to a
rectangular object, for which all column widths and alignments have been
determined tt(def) may be called. It is automatically called by
tt(operator<<(ostream, Table)). In other situations it may be called
explicitly to force the insertion of another row in a table using tt(ROWWISE)
insertions. With tt(COLUMNWISE) insertions its working is complex, since new
elements added to a tt(COLUMNWISE) filled table will reshuffle its elements
over the table's columns.
    )

manpagesection(MANPULATORS)
    itemization(
    itb(Table &CHAR(d)ef(Table &table))
        This manipulator can be inserted into a table to call the table's
bf(CHAR(d)ef()) member.
    )

manpagesection(EXAMPLE)

    verbinclude(../../table/driver/driver.cc)

manpagefiles()
    em(bobcat/table) - defines the class interface;nl()

manpageseealso()
    bf(bobcat)(7), bf(align)(3bobcat), bf(manipulator)(3bobcat),
    bf(tablebuf)(3bobcat), bf(tablelines)(3bobcat), 
    bf(tablesupport)(3bobcat)
    
manpagebugs()
    Note that tt(CHAR(d)ef()) will reshuffle elements over the table's
columns when new elements are added to the table subsequent to calling
tt(CHAR(d)ef())

includefile(include/trailer)
