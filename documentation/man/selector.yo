includefile(include/header)

COMMENT(manpage, section, releasedate, archive, short name)
manpage(FBB::Selector)(3bobcat)(_CurYrs_)(libbobcat1-dev__CurVers_-x.tar.gz)
                    (Timed Delays, Multiple File I/O)

manpagename(FBB::Selector)(Timed delays, Alarms and Multiple File I/O.)

manpagesynopsis()
    bf(#include <bobcat/selector>)nl()
    Linking option: tt(-lbobcat) 

manpagedescription()
    bf(FBB::Selector) objects are wrappers around the bf(select())(2) system
calls and allow timed delays, alarm functionality and/or multiple file I/O. It
requires the use of em(file descriptors), which are not an official part of
bf(C++). However, most operating systems offer em(file descriptors). Sockets
are well-known file descriptors.

includefile(include/namespace)

manpagesection(INHERITS FROM)
    -

manpagesection(CONSTRUCTORS)
    itemization(
    itb(Selector())
        This constructor initializes the object.
    )
        The copy constructor is available.

manpagesection(MEMBER FUNCTIONS)
    itemization(
    itb(void addExceptFd(int fd))
        Adds a filedescriptor to the set of file descriptors that are
monitored for exceptions (note these are not bf(C++) exceptions. See bf(man 2
select) for details).
    itb(void addReadFd(int fd))
        Adds a filedescriptor to the set of file descriptors that are
monitored for reading.
    itb(void addWriteFd(int fd))
        Adds a filedescriptor to the set of file descriptors that are
monitored for writing.
    itb(int exceptFd())
        Returns -1 of no more file descriptors are
available in the em(exception) category. Otherwise the next available file
descriptor in the em(exception) category is returned. Returning from
bf(wait()), this function can be called repeatedly until -1 is returned,
servicing each available filedescriptor in turn.
    itb(void noAlarm()) 
        This member prevents any timeout-alarm from occurring.
    itb(int nReady())
        Returns the number of available file descriptors.  0 is returned at a
timeout, -1: is returned when tt(select)(2) itself failed.
    itb(int readFd())
        Returns -1 of no more file descriptors are available for
reading. Otherwise the next available file descriptor for reading is
returned. Returning from bf(wait()), this function can be called repeatedly
until -1 is returned, servicing each available filedescriptor in turn.
    itb(void rmExceptFd(int fd)) 
        Removes a filedescriptor from the set of file descriptors that are
monitored for exceptions (note these are not bf(C++) exceptions. See bf(man 2
select) for details).
    itb(void rmReadFd(int fd))
        Removes a filedescriptor from the set of file descriptors that are
monitored for reading.
    itb(void rmWriteFd(int fd))
        Removes a filedescriptor from the set of file descriptors that are
monitored for writing.
    itb(void setAlarm(int sec, int usec = 0))
        This member sets the alarm at the indicated seconds and
micro-seconds. If no action occurred on one of the monitored file descriptions
following the indicated amount of time, tt(wait()) will return with
tt(nReady()) returning 0. The requested alarm time (tt(sec + usec / 1e+6)) may
not be negative and may not exceed tt(INT_MAX) or an bf(FBB::Errno) exception
(em(Selector::setAlarm())) will be thrown. A 0 alarm time specification
results in tt(wait()) returning immediately. To switch off the alarm time use
tt(noAlarm()).
    itb(int wait())
        This member should be called to wait for activities on the installed
file descriptors or timeout-period. The members tt(exceptFd(), nReady(),
readFd()) and tt(writeFd()) show their defined behaviors only after bf(wait())
has returned.  It throws an bf(FBB::Errno) exception when tt(select()) fails,
which may very well indicate the end of any available input. Otherwise it
returns the number of available file descriptors.
    itb(int writeFd())
        Returns -1 of no more file descriptors are available for
writing. Otherwise the next available file descriptor for writing is
returned. Returning from bf(wait()), this function can be called repeatedly
until -1 is returned, servicing each available filedescriptor in turn.
    )

manpagesection(EXAMPLE)
    verb(
#include <string>
#include <iostream>

#include <bobcat/selector>
#include <bobcat/errno>

using namespace std;
using namespace FBB;

int main(int argc, char **argv, char **envp)
{
    Selector selector;

    selector.setAlarm(5);               // every 5 secs: alarm fires
    selector.addReadFd(STDIN_FILENO);   // look also at cin

    try
    {
        while (true)
        {
            if (!selector.wait())           // 0: alarm fires
                cout << "Are you still there?" << endl;                
            else
            {
                string s;
                if (!getline(cin, s) || !s.length())
                    return 0;
                cout << "Thank you for: " << s << endl;
            }
        }
    }
    catch (Errno const &e)
    {
        cout << e.what() << endl;
    }
    return 0;
}
    )

manpagefiles()
    em(bobcat/selector) - defines the class interface

manpageseealso()
    bf(bobcat)(7), bf(select)(2)

manpagebugs()
    None Reported.

includefile(include/trailer)
