To Install the bobcat library by hand instead of using the binary distribution
perform the following steps:

    0. The previously used scripts below make/ are obsolete and were removed
        from this and future distributions. Icmake should be used instead, for
        which a top-level script (build) and support scripts in the ./icmake/
        directory are available. Icmake is available on a great many
        architectures. See the file INSTALL (and INSTALL.im) for further
        details.

    1. Inspect the values of the variables in the file INSTALL.im. Modify
        these when necessary.

    2. Inspect the path to icmake in the `build' script. By default it is
        /usr/bin/icmake, but some installations use /usr/local/bin/icmake
        Adapt when necessary.

    3. Run 
            ./build libraries

        to compile the bobcat libraries. 
        Optionally add the argument 'strip' if you want the libraries to be
        stripped. Unless you need the symbolic information in the compiled
        object modules, it is probably a good idea to provide this
        argument. So in that case issue:

            ./build libraries strip 

        Several Bobcat classes depend on additional, non standard,
        libraries. They are libmilter, libssl, libX11, and libreadline. By
        just starting ./build libraries [strip] you are asked whether you want
        those classes included in the Bobcat library. 

        If you know beforehand that you don't need those additional classes,
        then run

            ./build light [strip]

        (see also README.class-setup).

    4. Run (probably as root) 
            ./build install

        to install. Optionally add two additional argument as a base
        directories below which respectively the run time (shared) library
        documentation and the development files plus static library 
        documentation will be installed.

        if the environment variable BOBCAT was
        defined when issuing the `./build install ...' command then the file
        indicated by the BOBCAT environment variable contains a log of all
        installed files. In that case the ./build uninstall command (see next)
        can be used to uninstall these files again.

        Following the installation nothing in this directory tree is required
        for the proper functioning of the bobcat library, so consider removing
        it.


    5.  Uninstalling previously installed components of Bobcat (using
        ./build install ...) is easy if the environment variable BOBCAT was
        defined when issuing the `./build install ...' commands. In that case,
        run the command

            ./build uninstall

        This command only works if the environment variable BOBCAT has the
        same value as used with the `./build install' commands, and the file
        to which it refers still exists. In that case `./build install'
        removes all installed files (unless they were modified) and removes
        all empty directories created by the various `./build install ...'
        commands. 
        Defining the BOBCAT environment variable as ~/.bobcat usually works
        well. 

Make sure that the library is found by the loader. By default it is installed
in /usr/lib, which is in the loader's standard search path

By default the headers are stored under /usr/include. Since this is part of
the compiler's the standard include path the header files are included as,
e.g., #include <bobcat/errno>. No `bobcat' headers have (.h) extensions.

By default the manual pages are stored under /usr/share/man/man1,
/usr/share/man/man3, and /usr/share/man/man7, which are normally in the `man'
program's set of visited directories.





