#ifndef _INCLUDED_BOBCAT_PROCESS_
#define _INCLUDED_BOBCAT_PROCESS_

#include <string>
#include <memory>

#include <bobcat/fork>
#include <bobcat/string>
#include <bobcat/pipe>
#include <bobcat/selector>
#include <bobcat/ifdstreambuf>
#include <bobcat/ofdstreambuf>

#include <bobcat/iostream>

namespace FBB
{

class Process: private Fork, public IOStream                
{
    std::auto_ptr<Pipe> d_child_inp;          // cin read by the CHILD
    std::auto_ptr<Pipe> d_child_outp;         // cout written by the CHILD
    std::auto_ptr<Pipe> d_child_errp;         // cerr written by the CHILD    

    OFdStreambuf    d_childCinbuf;      // Child extracts,  
    std::ostream    d_childCin;         // Parent inserts to child's cin

    IFdStreambuf    d_childCoutbuf;     // Child inserts,
    std::istream    d_childCout;        // Parent extracts child's cout

    IFdStreambuf    d_childCerrbuf;     // Child inserts
    std::istream    d_childCerr;        // Parent extracts child's cerr

    Selector        d_selector;         // sense activities on outp/errp

    std::string     d_command;

    int             d_ret;              // return value of last executed
                                        // process 
    unsigned        d_mode;
    unsigned        d_processType;
    unsigned        d_waitSeconds;      // seconds to wait for 
                                        // child-termination
    public:
        enum Program
        {
            NO_PATH,
            USE_PATH,
            USE_SHELL,
        };

        enum IOMode
        {
            CIN             = 1 << 0,
            COUT            = 1 << 1,
            CERR            = 1 << 2,
            IGNORE_COUT     = 1 << 3,
            IGNORE_CERR     = 1 << 4,
            

            MERGE_COUT_CERR = 1 << 5,
        };
        typedef unsigned iomode;

        Process(std::string const &command = "", 
                iomode mode = CIN | COUT | CERR);
                                                
        Process(unsigned waitSeconds, std::string const &command = "", 
                iomode mode = CIN | COUT | CERR);

                                                
        void start(Program program = NO_PATH)
        {   
            start(1, d_mode, program);
        }

        void start(iomode mode, Program program = NO_PATH)
        {
            start(1, mode, program);
        }

        void start(unsigned waitSeconds, 
            iomode mode, Program program = NO_PATH);

        virtual ~Process()
        {
            stop();
        }

        int stop();

        Process &operator+=(std::string const &text);   // add to the command
        int operator=(std::string const &cmd);          // set the command

        std::istream &cerr()
        {
            return d_childCerr;
        }

        unsigned available();

        void system()
        {
            start(USE_SHELL);
        }

        void system(iomode mode)
        {
            start(mode, USE_SHELL);
        }

        unsigned wait();
        unsigned wait(unsigned sec, unsigned msec = 0);

    private:
        struct ExecContext
        {
            bool ok;                // true: status is ok
            unsigned argc;          // must eventually be at least 1
            char const *message;    // only set if !ok
            char const **args;      // 0-terminated array of pointers to the 
                                    // arguments
        };

        static void execContext(String::SplitPair const &splitPair,
                                ExecContext &ec);
        ExecContext analyzeCommand();

        virtual void parentRedirections();
        virtual void parentProcess()
        {}

        virtual void childRedirections();
        virtual void childProcess();

        void setPipes(iomode mode);
        unsigned whichStream();

        void init(std::string const &command, iomode mode);

        Process(Process const &other);              // NI
        Process &operator=(Process const &other);   // NI
};

} 
// namespace FBB        

#endif










