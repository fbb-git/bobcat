#ifndef INCLUDED_BOBCAT_HASH_
#define INCLUDED_BOBCAT_HASH_

#include <string>
#include <cstring>
#include <unordered_map>

#include <bobcat/string>

namespace FBB
{

// Support structs
// ===============

struct CaseHash
{
    size_t operator()(std::string const &key) const;        // opfun1.i
};

struct CaseEqual
{
    bool operator()(char const *s1, char const *s2) const;  // opfun2.i
    bool operator()(std::string const &s1,                  // opfun3.i
                    std::string const &s2) const;           
};

struct CharPtrEqual
{
    bool operator()(char const *s1, char const *s2) const;  // opfun4.i
};

// HashCharPtr: case sensitive char const *keys
// ============================================

template<typename Value>
class HashCharPtr: public std::unordered_map<
                                char const *, Value, 
                                std::hash<std::string>,  CharPtrEqual
                             >
{
    typedef std::unordered_map<
                                char const *, Value, 
                                std::hash<std::string>,  CharPtrEqual
                             > BaseClass;
    public:
        typedef typename BaseClass::value_type value_type;

        HashCharPtr()                   = default;
        HashCharPtr(HashCharPtr &&tmp);                             // 1.i
        HashCharPtr(std::initializer_list<value_type> iniValues);   // 2.i

        template <typename InputIterator>
        HashCharPtr(InputIterator first, InputIterator beyond);     // 3.i

        HashCharPtr<Value> &operator=(HashCharPtr &&tmp);           // 4.i
};


// HashCharCasePtr: case insensitive char const *keys
// ==================================================

template<typename Value>
class HashCharCasePtr: public std::unordered_map<
                                char const *, Value, 
                                CaseHash,     CaseEqual
                             >
{
    typedef std::unordered_map<char const *, Value, CaseHash, CaseEqual> 
                                                                    BaseClass;
    public:
        typedef typename BaseClass::value_type value_type;

        HashCharCasePtr()                       = default;
        HashCharCasePtr(HashCharCasePtr &&tmp);                         // 1.i
        HashCharCasePtr(std::initializer_list<value_type> iniValues);   // 2.i

        template <typename InputIterator>
        HashCharCasePtr(InputIterator first, InputIterator beyond);     // 3.i

        HashCharCasePtr<Value> &operator=(HashCharCasePtr &&tmp);       // 4.i
};


// HashString: case sensitive std::string keys
// ===========================================

template<typename Value>
class HashString: public std::unordered_map<std::string, Value>
{
    typedef std::unordered_map<std::string, Value> BaseClass;

    public:
        typedef typename BaseClass::value_type value_type;

        HashString()                            = default;
        HashString(HashString &&tmp);                               // 1.i
        HashString(std::initializer_list<value_type> iniValues);    // 2.i

        template <typename InputIterator>
        HashString(InputIterator first, InputIterator beyond);      // 3.i

        HashString<Value> &operator=(HashString &&tmp);             // 4.i
};



// HashStringCase: case insensitive std::string keys
// =================================================

template<typename Value>
class HashStringCase: public std::unordered_map<
                                std::string, Value, CaseHash, CaseEqual
                             >
{
    typedef std::unordered_map<std::string, Value, CaseHash, CaseEqual> 
                                                            BaseClass;
    public:
        typedef typename BaseClass::value_type value_type;

        HashStringCase()                        = default;
        HashStringCase(HashStringCase &&tmp);                           // 1.i

        HashStringCase(std::initializer_list<value_type> iniValues);    // 2.i

        template <typename InputIterator>
        HashStringCase(InputIterator first, InputIterator beyond);      // 3.i

        HashStringCase<Value> &operator=(HashStringCase &&tmp);         // 4.i
};

#include "opfun1.if"
#include "opfun2.if"
#include "opfun3.if"
#include "opfun4.if"

#include "hashcharptr1.if"
#include "hashcharptr2.if"
#include "hashcharptr3.if"
#include "hashcharptr4.if"

#include "hashcharcaseptr1.if"
#include "hashcharcaseptr2.if"
#include "hashcharcaseptr3.if"
#include "hashcharcaseptr4.if"

#include "hashstring1.if"
#include "hashstring2.if"
#include "hashstring3.if"
#include "hashstring4.if"

#include "hashstringcase1.if"
#include "hashstringcase2.if"
#include "hashstringcase3.if"
#include "hashstringcase4.if"

} // FBB

#endif
