#ifndef INCLUDED_BOBCAT_ITERATOR_
#define INCLUDED_BOBCAT_ITERATOR_

#include <iterator>
#include <limits>

namespace FBB
{

template <typename Type>
class Iterator: public std::iterator<std::bidirectional_iterator_tag, Type>
{
    Type d_value;

    public:
        explicit Iterator(Type const &value);
    
        Iterator<Type> &operator++();
        Iterator<Type> operator++(int);
        Iterator<Type> &operator--();
        Iterator<Type> operator--(int);
    
        bool operator==(Iterator const &other) const;
        bool operator!=(Iterator const &other) const;

                                            // internal value is required
        Type const &operator*() const;
        Type &operator*();

        static Iterator<Type> min();
        static Iterator<Type> max();
};

template <typename Type>
struct ReverseIterator: public std::reverse_iterator<Iterator<Type>>
{
    explicit ReverseIterator(Type const &value);
    explicit ReverseIterator(Iterator<Type> const &vi);
};


#include "iterator1.f"
#include "max.f"
#include "min.f"
#include "operatordec.f"
#include "operatorequal.f"
#include "operatorinc.f"
#include "operatorpostdec.f"
#include "operatorpostinc.f"
#include "operatorstar.f"
#include "operatorstarconst.f"
#include "operatorunequal.f"
#include "reverseiterator1.f"
#include "reverseiterator2.f"

} // FBB

#endif






