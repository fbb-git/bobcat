#ifndef INCLUDED_BOBCAT_MSGBUF_
#define INCLUDED_BOBCAT_MSGBUF_

#include <streambuf>
#include <ostream>
#include <string>

namespace FBB
{

namespace BOBCAT
{

class Msgbuf: public std::streambuf
{
    std::ostream *d_ostr;       // this is the receiving ostream

    bool d_newMsg;
    bool d_showLineNrs;
    bool d_throw;
    size_t d_count;
    size_t d_lineNr;
    size_t d_maxCount;
    std::string d_tag;
    
    public:
        Msgbuf(std::ostream &ostr, size_t maxCount, 
                     std::string const &tag = "", bool throwing = false);

        virtual ~Msgbuf() = default;

        size_t maxCount() const;
        std::string const &tag() const;

    protected:
        void atNewline();
        void reset();

        void reset(std::ostream *ostr);

        bool throwing() const;
        void noThrow();
        std::ostream &ostr() const;

            // these members are publicly accessible fm MsgStream

        void setLineNr(size_t lineNr);
        void showLineNrs(bool ifTrue);
        void setTag(std::string const &tag);
        void setMaxCount(size_t maxCount);
        size_t count() const;
        bool newMsg() const;

    private:
        void showTag();
        
        virtual int overflow(int c);
        virtual std::streamsize xsputn(char const *buf, std::streamsize n);
        virtual int sync();
};

inline std::ostream &Msgbuf::ostr() const
{
    return *d_ostr;
}
        
inline size_t Msgbuf::maxCount() const
{
    return d_maxCount;
}
        
inline std::string const &Msgbuf::tag() const
{
    return d_tag;
}

inline bool Msgbuf::newMsg() const
{
    return d_newMsg;
}

inline void Msgbuf::noThrow()
{
    d_throw = false;
}

inline void Msgbuf::setLineNr(size_t lineNr)
{
    d_lineNr = lineNr;
}

inline void Msgbuf::showLineNrs(bool ifTrue)
{
    d_showLineNrs = ifTrue;
}

inline bool Msgbuf::throwing() const
{
    return d_throw;
}

// inline std::streambuf *Msgbuf::msgbuf() 
// {
//     std::cerr << (void *)d_ostr << '\n';
//     return 0;//d_ostr->rdbuf();
// }
// 
// inline void Msgbuf::msgbuf(std::streambuf *buf) 
// {
//     d_ostr->rdbuf(buf);
// }

inline void Msgbuf::setMaxCount(size_t maxCount)
{
    d_maxCount = maxCount;
}

inline size_t Msgbuf::count() const
{
    return d_count;
}

} // BOBCAT

} // FBB

#endif




