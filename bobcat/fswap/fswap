#ifndef INCLUDED_FSWAP_
#define INCLUDED_FSWAP_

#include <cstring>
#include <cstdint>

namespace FBB
{

class FSwap
{
    template <typename Tp, size_t size>
    struct Xch
    {
        static void fswap(Tp &lhs, Tp &rhs);            // 1.i
    };
    
    template <typename Tp>
    struct Xch<Tp, 1>
    {
        static void fswap(Tp &lhs, Tp &rhs);            // 2.i
    };

    template <typename Tp>
    struct Xch<Tp, 2>
    {
        static void fswap(Tp &lhs, Tp &rhs);            // 3.i
    };

    template <typename Tp>
    struct Xch<Tp, 4>
    {
        static void fswap(Tp &lhs, Tp &rhs);            // 4.i
    };

    template <typename Tp>
    struct Xch<Tp, 8>
    {
        static void fswap(Tp &lhs, Tp &rhs);            // 5.i
    };
    
    template <typename SwapType, typename Type>
    static void tswap(Type &lhs, Type &rhs);                // .i
};

#include "tswap.if"
#include "fswap1.if"
#include "fswap2.if"
#include "fswap3.if"
#include "fswap4.if"
#include "fswap5.if"

    // Free function
#include "fswap.if"              // fswap(Type &, Type &

} // FBB

#endif
