#ifndef INCLUDED_BOBCAT_PROCESS_
#define INCLUDED_BOBCAT_PROCESS_

#include <string>
#include <ostream>
#include <istream>

#include <bobcat/fork>
#include <bobcat/string>
#include <bobcat/pipe>
#include <bobcat/selector>
#include <bobcat/ifdstreambuf>
#include <bobcat/ofdstreambuf>
#include <bobcat/iostream>

#if defined(__FreeBSD_kernel__) || defined(__FreeBSD__)
    #ifndef BOBCAT_DIY_CLOEXEC_
    #define BOBCAT_DIY_CLOEXEC_
    #endif
#endif

namespace FBB
{

struct Process: private Fork, public IOStream
{
    friend Process &operator|(Process &lhs, Process &rhs);

    enum ProcessType
    {
        NO_PATH,
        USE_PATH,
        USE_SHELL
    };

    private:
        bool            d_active;
        size_t          d_mode;
        size_t          d_timeLimit;      // seconds allowed to child-process
        ProcessType     d_processType;

        size_t          d_setMode;          // these values are set by the 
        size_t          d_setTimeLimit;   // set members and used as 
        ProcessType     d_setProcessType;   // defaults unless overridden by
                                            // actual values
                                            // Constructors set these values 
                                            // too.
        std::string     d_command;

        Pipe d_oChildInPipe;    // cin read by the CHILD
        Pipe d_iChildOutPipe;   // cout written by the CHILD
        Pipe d_iChildErrPipe;   // cerr written by the CHILD    

        OFdStreambuf    d_oChildInbuf;      // Child extracts,  
        IFdStreambuf    d_iChildOutbuf;     // Child inserts,
        IFdStreambuf    d_iChildErrbuf;     // Child inserts
    
        std::ostream   d_oChildIn;          // Parent inserts to child's cin
        std::istream   d_iChildOut;         // Parent extracts child's cout
        std::istream   d_iChildErr;         // Parent extracts child's cerr
    
        Selector        d_selector;         // senses activities on Child's
                                            // out/err streams
        struct RetPid
        {
            int     ret;
            pid_t   pid;
    
            RetPid();                       //  1.i
        };
        RetPid d_child;
        RetPid d_monitor;

#ifdef BOBCAT_DIY_CLOEXEC_
        int d_closedByChild;    // DIY CLOSE_ON_EXEC
#endif

    public:
        enum IOMode
        {
            STD             = 0,

            CIN             = 1 << 0,
            COUT            = 1 << 1,
            CERR            = 1 << 2,

            IGNORE_COUT     = 1 << 3,
            IGNORE_CERR     = 1 << 4,

            MERGE_COUT_CERR = 1 << 5,

            DIRECT          = 1 << 8,

            // flags below are Internal Use Only and cannot be set by
            // users

            IN_PIPE         = 1 << 10,
            OUT_PIPE        = 1 << 11,

            CLOSE_ON_EXEC   = 1 << 12,
        };
        typedef size_t iomode;

        enum ChildOutput
        {
            NOTHING_AVAILABLE   = 0,
            CHILD_COUT          = 1 << 0,
            CHILD_CERR          = 1 << 1,
        };
            
        explicit Process(std::string const &command = "");              // 1
        explicit Process(iomode mode, std::string const &command = ""); // 2
        Process(iomode mode, ProcessType type,                          // 3
                                    std::string const &command = "");
        Process(iomode mode, ProcessType type, size_t timeLimit,      // 4
                                    std::string const &command = "");

        virtual ~Process();                 // stop()s any ongoing process

        iomode ioMode() const;              // returns default IOMode       .i
        ProcessType processType() const;    // returns default ProcessType  .i
        size_t timeLimit() const;           // returns default time limit   .i

        void setIOMode(iomode mode);            // change IOMode        .i

        void setProcessType(ProcessType type);                      //  .i

        void setTimeLimit(size_t timeLimit);                        //  .i
                                                // for the next cmd to start
                                                // 0 means: no time monitor

        void setCommand(std::string const &command);    // sets cmd,    .i
                                                        // eats backticks

        Process &operator+=(std::string const &text);   //       opaddis.i
                                                        // adds to the command
        
        void start();                                   // 1.i
        void start(iomode mode);                        // 2.i
        void start(iomode mode, ProcessType type);      // 3.i

        void start(iomode mode, ProcessType type, size_t timeLimit);

        void system();              // calls /bin/sh -c cmd;            1.i
                                    //      shell redirs OK
        void system(iomode mode);                                   //  2.i
        void system(iomode mode, size_t timeLimit);                 //  3.1


        int operator=(std::string const &cmd);  // sets and starts a command


        std::string const &str() const; // current command              .i    

        int stop();                     // terminate a running childprocess

        template <typename Type>
        Process &operator<<(Type const &value);                 // opinsert.i

        Process &operator<<(std::ostream &(*pf)(std::ostream &));

        template <typename Type>
        Process &operator>>(Type &value);                       // opextract.i

        bool active();

        Process &operator()(iomode mode);                       // opfun1.i
        Process &operator()(iomode mode, ProcessType type);     // opfun2.i
        Process &operator()(iomode mode, ProcessType type, size_t timeLimit);

        void close();                           // closes input to the child

        std::istream &cerr();                   // READ cerr from the child

        size_t available();                     // returns ChildOutput bit_or
                                                // (cf. manpage)

        void showMode(char const *lab) const;

        using Fork::waitForChild;
                                
    private:
        Process(Process const &other) = delete;
        Process &operator=(Process const &other) = delete;

        virtual void childProcess();
        virtual void childRedirections();
        virtual void parentProcess();                       // .i
        virtual void parentRedirections();

        void newPipe(Pipe &pipe);
        pid_t discontinue(RetPid &proc);
        size_t whichStream();
        void close(int fd);
        void closeWriteFd(Pipe &pipe);
        void closeReadFd(Pipe &pipe);

        void forking();
        void initialize(size_t timeLimit, iomode mode, 
                                                ProcessType processType);
        iomode sanitizeIOMode(iomode mode);
        void newPipes();
        void closeChildInputOnExec();


        typedef std::string::const_iterator ConstIter;
        struct ExecContext
        {
            size_t argc;            // must eventually be at least 1
            char const **argv;      // 0-terminated array of pointers to the 
                                    // arguments
        };
        ExecContext analyzeCommand();

//        std::vector<std::string> split(ConstIter begin, 
//                                       ConstIter const &end);
//        std::string dquotedString(ConstIter &begin, ConstIter const &end);
//        std::string quotedString(ConstIter &begin, ConstIter const &end);
//        int escapedString(ConstIter &begin, ConstIter const &end);

};

#include "iomode.i"
#include "opaddis.i"
#include "opextract.i"
#include "opfun1.i"
#include "opfun2.i"
#include "opinsert.i"
#include "processtype.i"
#include "setcommand.i"
#include "setiomode.i"
#include "setprocesstype.i"
#include "settimelimit.i"
#include "start1.i"
#include "start2.i"
#include "start3.i"
#include "str.i"
#include "system1.i"
#include "system2.i"
#include "system3.i"
#include "timelimit.i"


} // FBB        

#endif


