#ifndef INCLUDED_BOBCAT_BIGINT_
#define INCLUDED_BOBCAT_BIGINT_

#include <cstddef>

#include <iosfwd>
#include <openssl/bn.h>

namespace FBB
{
class PrimeBase;

class BigInt
{
     friend std::ostream &operator<<(std::ostream &out, BigInt const &bn);
 
     BIGNUM d_bn;
 
     public:
         enum Msb
         {
             MSB_UNKNOWN = -1,
             MSB_IS_ONE,
             TOP_TWO_BITS_ONE
         };
 
         enum Lsb
         {
             EVEN,
             ODD,
         };
 
         enum PrimeType
         {
             ANY = false,
             SAFE = true
         };

        BigInt();                               // 1
        explicit BigInt(BIGNUM const &bignum);  // 2 
        BigInt(BigInt const &other);    		// 3
                                        		
        template<typename Type>         		// 4 promotion OK
        BigInt(Type const &value);      		
                                        		
        explicit BigInt(BIGNUM const *bignum);  // 5
        explicit BigInt(BIGNUM *bignum);        // 6    won't change bignum

        ~BigInt();

        BigInt &operator=(BigInt const &other);

        BigInt &operator+=(BigInt const &rhs);
        BigInt const addMod(BigInt const &rhs, BigInt const &mod) const;

        BigInt &operator-=(BigInt const &rhs);
        BigInt const subMod(BigInt const &rhs, BigInt const &mod) const;

        BigInt &operator*=(BigInt const &rhs);
        BigInt const mulMod(BigInt const &rhs, BigInt const &mod) const;

        BigInt &operator%=(BigInt const &rhs);

        BigInt &operator/=(BigInt const &rhs);      // integer division,

                                                    // integer division, also
                                                    // returning remainder
        BigInt const div(BigInt *remainder, BigInt const &rhs) const;

        BigInt const gcd(BigInt const &rhs) const;

        BigInt const sqr() const;
        BigInt const sqrMod(BigInt const &mod) const;

        bool isZero() const;
        bool isOne() const;
        bool isOdd() const;

        unsigned long ulong() const;
        BIGNUM const &bignum() const;

        size_t size() const;
        size_t sizeInBits() const;

        int compare(BigInt const &other) const;
        int uCompare(BigInt const &other) const;

        BigInt const exp(BigInt const &exponent) const;
        BigInt const expMod(BigInt const &exponent, BigInt const &mod) const;

        BigInt const inverseMod(BigInt const &mod) const;

        static BigInt const rand(size_t bitsSize, 
                           Msb msb = MSB_IS_ONE, Lsb lsb = ODD);

        static BigInt const randRange(BigInt const &max);

        static BigInt const pseudoRand(size_t bitsSize, 
                           Msb msb = MSB_IS_ONE, Lsb lsb = ODD);
        static BigInt const pseudoRandRange(BigInt const &max);

        static BigInt const prime(size_t nBits, 
                            BigInt const *add = 0, BigInt const *rem = 0,
                            PrimeType primeType = ANY);

        bool clearBit(size_t index);
        bool hasBit(size_t index) const;
        bool maskBits(size_t lowerNBits);
        bool setBit(size_t index);

        bool lshift();
        bool lshift(size_t nBits);
        BigInt &operator<<=(size_t nBits);
        bool rshift();
        bool rshift(size_t nBits);
        BigInt &operator>>=(size_t nBits);

    private:
        std::ostream &insertInto(std::ostream &out) const;

        void copy(BigInt const &other);
        void copy(BIGNUM *lhs, BIGNUM const &rhs);

        void destroy();

        BigInt &checked1(
                int (*BN_op)(BIGNUM *, 
                             BIGNUM const *, BIGNUM const *), 
                BigInt const &rhs, char const *op);

        BigInt const checked2(int (*BN_op)(BIGNUM *, 
                                     BIGNUM const *, BIGNUM const *, 
                                     BIGNUM const *, 
                                     BN_CTX *),
                        BigInt const rhs, BigInt const &mod, 
                                                    char const *op) const;
        void checked3(BIGNUM *div, BIGNUM *rem, 
                                   BigInt const &rhs, char const *op) const;

        BigInt const checked4(int (*BN_op)(BIGNUM *, 
                                     BIGNUM const *, BIGNUM const *, 
                                     BN_CTX *), 
                        BigInt const &rhs, char const *op) const;


        BigInt const checked5(BIGNUM *(*BN_op)(BIGNUM *, 
                                     BIGNUM const *, BIGNUM const *, 
                                     BN_CTX *), 
                        BigInt const &rhs, char const *op) const;


        static void primeCallback(int reason, int primeNr, void *primeBase);
};

template<typename Type>
inline BigInt::BigInt(Type const &value)
{
    BN_init(&d_bn);
    BN_set_word(&d_bn, static_cast<unsigned long const &>(value));
}    

inline BigInt const operator+(BigInt const &lhs, BigInt const &rhs)
{
    return BigInt(lhs) += rhs;
}

inline BigInt &BigInt::operator+=(BigInt const &rhs)
{
    return checked1(BN_add, rhs, "+");
}

inline BigInt const BigInt::addMod(BigInt const &rhs, BigInt const &mod) const
{
    return checked2(BN_mod_add, rhs, mod, "addMod");
}


inline BigInt const operator-(BigInt const &lhs, BigInt const &rhs)
{
    return BigInt(lhs) -= rhs;
}

inline BigInt &BigInt::operator-=(BigInt const &rhs)
{
    return checked1(BN_sub, rhs, "-");
}

inline BigInt const BigInt::subMod(BigInt const &rhs, BigInt const &mod) const
{
    return checked2(BN_mod_sub, rhs, mod, "subMod");
}

inline BigInt const operator*(BigInt const &lhs, BigInt const &rhs)
{
    return BigInt(lhs) *= rhs;
}

inline BigInt const BigInt::mulMod(BigInt const &rhs, BigInt const &mod) const
{
    return checked2(BN_mod_mul, rhs, mod, "mulMod");
}

inline BigInt const operator%(BigInt const &lhs, BigInt const &rhs)
{
    return BigInt(lhs) %= rhs;
}

inline BigInt &BigInt::operator%=(BigInt const &rhs)
{
    checked3(0, &d_bn, rhs, "%=");
    return *this;
}

inline BigInt const operator/(BigInt const &lhs, BigInt const &rhs)
{
    return BigInt(lhs) /= rhs;
}

inline BigInt &BigInt::operator/=(BigInt const &rhs)
{
    checked3(&d_bn, 0, rhs, "/=");
    return *this;
}

inline BigInt const BigInt::inverseMod(BigInt const &mod) const
{
    return checked5(BN_mod_inverse, mod, "inverseMod");
}

inline BigInt const BigInt::gcd(BigInt const &rhs) const
{
    return checked4(BN_gcd, rhs, "gcd");
}

inline BigInt const BigInt::sqrMod(BigInt const &mod) const
{
    return checked4(BN_mod_sqr, mod, "sqrMod");
}

inline size_t BigInt::size() const
{
    return BN_num_bytes(&d_bn);
}

inline size_t BigInt::sizeInBits() const
{
    return BN_num_bits(&d_bn);
}

inline int BigInt::uCompare(BigInt const &other) const
{
    return BN_ucmp(&d_bn, &other.d_bn);
}

inline int BigInt::compare(BigInt const &other) const
{
    return BN_cmp(&d_bn, &other.d_bn);
}

inline bool operator==(BigInt const &lhs, BigInt const &rhs) 
{
    return lhs.compare(rhs) == 0;
}

inline bool operator!=(BigInt const &lhs, BigInt const &rhs)
{
    return lhs.compare(rhs) != 0;
}

inline bool operator<(BigInt const &lhs, BigInt const &rhs) 
{
    return lhs.compare(rhs) < 0;
}

inline bool operator<=(BigInt const &lhs, BigInt const &rhs)
{
    return lhs.compare(rhs) <= 0;
}

inline bool operator>(BigInt const &lhs, BigInt const &rhs) 
{
    return lhs.compare(rhs) > 0;
}

inline bool operator>=(BigInt const &lhs, BigInt const &rhs)
{
    return lhs.compare(rhs) >= 0;
}


inline bool BigInt::isZero() const
{
    return BN_is_zero(&d_bn);
}

inline bool BigInt::isOne() const
{
    return BN_is_one(&d_bn);
}

inline bool BigInt::isOdd() const
{
    return BN_is_odd(&d_bn);
}

inline unsigned long BigInt::ulong() const
{
    return BN_get_word(&d_bn);
}

inline BIGNUM const &BigInt::bignum() const
{
    return d_bn;
}

inline std::ostream &operator<<(std::ostream &out, BigInt const &bn)
{
    return bn.insertInto(out);
}

inline bool BigInt::setBit(size_t index)
{
    return BN_set_bit(&this->d_bn, index);
}

inline bool BigInt::clearBit(size_t index)
{
    return BN_clear_bit(&this->d_bn, index);
}

inline bool BigInt::hasBit(size_t index) const
{
    return BN_is_bit_set(&this->d_bn, index);
}

inline bool BigInt::maskBits(size_t lowerNBits)
{
    return BN_mask_bits(&this->d_bn, lowerNBits);
}

inline bool BigInt::lshift()
{
    return BN_lshift1(&this->d_bn, &this->d_bn);
}

inline bool BigInt::lshift(size_t nBits)
{
    return BN_lshift(&this->d_bn, &this->d_bn, nBits);
}

inline bool BigInt::rshift()
{
    return BN_rshift1(&this->d_bn, &this->d_bn);
}

inline bool BigInt::rshift(size_t nBits)
{
    return BN_rshift(&this->d_bn, &this->d_bn, nBits);
}

inline BigInt const operator<<(BigInt const &lhs, size_t nBits)
{
    return BigInt(lhs) <<= nBits;
}

inline BigInt const operator>>(BigInt const &lhs, size_t nBits)
{
    return BigInt(lhs) >>= nBits;
}


}   // namespace FBB


#endif




