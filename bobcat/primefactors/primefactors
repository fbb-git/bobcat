#ifndef INCLUDED_BOBCAT_PRIMEFACTORS_
#define INCLUDED_BOBCAT_PRIMEFACTORS_

#include <iostream>
#include <vector>
#include <fstream>
#include <memory>

#include <bobcat/bigint>

namespace FBB
{

struct PrimeFactors
{
    struct PrimePower
    {
        BigInt prime;
        size_t power;
    };

    typedef std::vector<PrimePower> Factors;

    private:
        typedef std::vector<BigInt> BigIntVector;
        typedef BigIntVector::const_iterator ConstIterator;
    
        class iterator
        {
            BigIntVector *d_primes;

            protected:
                ConstIterator d_iterator;
                BigInt d_lastPrime;
                BigIntVector d_sentinel;
                bool   d_atSentinel;
                    
            public:
                virtual ~iterator();
                iterator() = default;
                iterator(BigIntVector &primes);     // 2

                iterator &operator++();
                BigInt const &operator*() const;
                bool atSentinel() const;
                void setSentinel(BigInt const &sentinel);
                BigInt const &lastPrime() const;
                void nextPrime();
                iterator *clone() const;

            protected:
                void sentinel();
                bool isComposite();
    
            private:
                virtual iterator &operatorPreInc();
                virtual void next();
                virtual iterator *duplicate() const;
        };

        class iteratorStream: public iterator
        {
                std::string d_name;
                std::fstream d_stream;
                size_t d_blockSize;
                BigIntVector d_primes;
                BigIntVector d_newPrimes;

            public:
                iteratorStream(std::string name, size_t blockSize);
                ~iteratorStream();

            private:
                iterator &operatorPreInc() override;
                virtual void next() override;
                virtual iterator *duplicate() const override;

                void iniRead();
                bool nextLoad();
                bool newPrimes();
                void writeNewPrimes();
        };

        BigInt d_value;
        BigInt d_last;

        std::shared_ptr<iterator> d_iterator;
    
        Factors d_factors;

    public:
        PrimeFactors(BigIntVector &primes);
        PrimeFactors(std::string const &name = "", size_t blockSize = 1000);
        PrimeFactors(PrimeFactors const &other) = delete;

        Factors const &factorize(BigInt const &value);

    private:
        void reduce(BigInt const &prime);
        void availablePrimes();
        void addPrimes();
};

} // FBB        
#endif









