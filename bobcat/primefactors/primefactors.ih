#include "primefactors"

#include "../exception/exception"
//#include <bobcat/exception>

using namespace std;
using namespace FBB;

inline PrimeFactors::iterator &PrimeFactors::iterator::operator++()
{
    return operatorPreInc();
}

inline BigInt const &PrimeFactors::iterator::operator*() const
{
    return *d_iterator;
}

inline BigInt const &PrimeFactors::iterator::lastPrime() const
{
    return d_lastPrime;
}

inline void PrimeFactors::iterator::nextPrime()
{
    next();
}

inline bool PrimeFactors::iterator::atSentinel() const
{
    return d_atSentinel;
}

inline void PrimeFactors::iterator::setSentinel(BigInt const &value)
{
    cerr << "size = " << d_sentinel.size() << ", value = " << value << '\n';
    d_sentinel[0] = value;
}

inline PrimeFactors::iterator *PrimeFactors::iterator::clone() const
{
    return duplicate();
}

inline PrimeFactors::iterator *PrimeFactors::iterator::duplicate() const
{
    return new iterator(*d_primes);
}


