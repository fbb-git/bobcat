#ifndef _INCLUDED_BOBCAT_HOSTENT_
#define _INCLUDED_BOBCAT_HOSTENT_

#include <netdb.h>
#include <string>

class Hostent: private hostent
{
    union PTR
    {
        char const * const *p2;
        char const *p1;
    };

    unsigned d_nAliases;
    unsigned d_nAddresses;
            
    public:
        Hostent();
        Hostent(Hostent const &other)
        {
            copy(&other, other.d_nAliases, other.d_nAddresses);
        }
        Hostent(hostent const *other);

        ~Hostent()
        {
            destroy();
        }

        Hostent &operator=(Hostent const &other);

        char const *alias(unsigned nr) const
        {
            return nr >= d_nAliases ? 0 : h_aliases[nr];
        }
        char const *binaryAddress(unsigned nr) const    // length bytes!
        {
            return nr >= nAddresses() ? 0 : h_addr_list[nr];
        }
        char const * const *beginAlias() const
        {
            return h_aliases;
        }

        std::string dottedDecimalAddress(unsigned nr) const;

        char const * const *endAlias() const
        {
            return h_aliases + nAliases();
        }
        char const *hostname() const
        {
            return h_name;
        }
        unsigned nAliases() const
        {
            return d_nAliases - 1;
        }
        unsigned nAddresses() const
        {
            return d_nAddresses - 1;
        }
        unsigned addressLength() const
        {
            return h_length;
        }
        unsigned addressType() const
        {
            return h_addrtype;
        }
    private:
        static char *xstrdup(char const *src);

        void copy(hostent const *other, unsigned n_aliases, 
                                         unsigned n_addresses);
        void destroy();
                                            // the count functions also count
                                            // the final 0-values.
        unsigned countAliases(char const * const *alias) const;
        unsigned countAddresses(char const * const *addresses, 
                                            unsigned length) const;
};

        
#endif
