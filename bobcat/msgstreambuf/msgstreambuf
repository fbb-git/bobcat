#ifndef INCLUDED_BOBCAT_MSGSTREAMBUF_
#define INCLUDED_BOBCAT_MSGSTREAMBUF_

#include <streambuf>
#include <ostream>
#include <string>

namespace FBB
{

namespace BOBCAT
{

class MsgStreambuf: public std::streambuf
{
    std::ostream *d_ostr;
    bool d_throwing;
    size_t d_lineNr;
    bool d_showLineNrs;
    std::string d_tag;
    size_t d_count;
    size_t d_maxCount;
    bool d_newMsg;
    
    public:
        MsgStreambuf(std::ostream *ostr, size_t maxCount, 
                     std::string const &tag = "", bool throwing = false);

        virtual ~MsgStreambuf() = default;

        void preamble();
        void reset(std::ostream *ostr, bool throwing = false);
        bool throwing() const;
        std::streambuf *rdbuf();
        void rdbuf(std::streambuf *buf);
        void setLineNr(size_t lineNr);
        void showLineNrs(bool ifTrue);
        void setTag(std::string const &tag);
        void setMaxCount(size_t maxCount);
        size_t count() const;
        void msgContinues();
        bool newMsg() const;

    private:
        virtual int overflow(int c);
        virtual std::streamsize xsputn(char const *buf, std::streamsize n);
        virtual int sync();
};

inline bool MsgStreambuf::newMsg() const
{
    return d_newMsg;
}

inline void MsgStreambuf::msgContinues()
{
    d_newMsg = false;
}

inline void MsgStreambuf::setLineNr(size_t lineNr)
{
    d_lineNr = lineNr;
}

inline void MsgStreambuf::showLineNrs(bool ifTrue)
{
    d_showLineNrs = ifTrue;
}

inline bool MsgStreambuf::throwing() const
{
    return d_throwing;
}

inline std::streambuf *MsgStreambuf::rdbuf() 
{
    return this;
}

inline void MsgStreambuf::rdbuf(std::streambuf *buf) 
{
    d_ostr->rdbuf(buf);
}

inline void MsgStreambuf::setMaxCount(size_t maxCount)
{
    d_maxCount = maxCount;
}

inline size_t MsgStreambuf::count() const
{
    return d_count;
}

} // BOBCAT

} // FBB

#endif




