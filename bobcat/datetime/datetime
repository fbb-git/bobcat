#ifndef _INCLUDED_BOBCAT_DATETIME_
#define _INCLUDED_BOBCAT_DATETIME_

#include <time.h>
#include <iosfwd>

namespace FBB
{
    class DateTime;
}

namespace std
{
    ostream &operator<<(ostream &str, FBB::DateTime const &dt);
}

namespace FBB
{

class DateTime
{

    friend  std::ostream &std::operator<<(std::ostream &str, 
                                          DateTime const &dt);
    public:
        enum TimeType
        {
            LOCALTIME,
            UTC
        };
        enum Month
        {
            JANUARY,
            FEBRUARY,
            MARCH,
            APRIL,
            MAY,
            JUNE,
            JULY,
            AUGUST,
            SEPTEMBER,
            OCTOBER,
            NOVEMBER,
            DECEMBER,
        };
        enum WeekDay
        {
            SUNDAY,
            MONDAY,
            TUESDAY,
            WEDNESDAY,
            THIRSDAY,
            FRIDAY,
            SATURDAY,
        };
        enum TriVal
        {
            UNKNOWN,
            NO,
            YES
        };

    private:
        TimeType    d_type; // current type of info in d_tm member
        time_t      d_time; // 
        struct tm   d_tm;   // 
        bool        d_ok;
        unsigned    d_errno;

    public:
        DateTime(TimeType type = LOCALTIME);
        DateTime(time_t time, TimeType type = LOCALTIME);
        DateTime(tm *t, TimeType type = LOCALTIME);

        operator bool() const
        {
            return d_ok;
        }

        bool breakDown(TimeType type);

        unsigned error() const
        {
            return d_errno;
        }

        unsigned hours() const
        {
            return d_tm.tm_hour;
        }

        unsigned minutes() const
        {
            return d_tm.tm_min;
        }

        Month month() const
        {
            return static_cast<Month>(d_tm.tm_mon);
        }

        unsigned monthDayNr() const
        {
            return d_tm.tm_mday;
        }

        DateTime &operator+=(DateTime const &other);    // UTC
        DateTime &operator+=(time_t seconds);           // d_type
        DateTime &operator+=(tm const &tm);             // d_type

        DateTime &operator-=(DateTime const &other);    // UTC
        DateTime &operator-=(time_t seconds);           // d_type
        DateTime &operator-=(tm const &tm);             // d_type

        unsigned seconds() const
        {
            return d_tm.tm_sec;
        }

        time_t time() const
        {
            return d_time;
        }

        WeekDay weekday() const
        {
            return static_cast<WeekDay>(d_tm.tm_wday);
        }

        unsigned year() const
        {
            return d_tm.tm_year + 1900;
        }

        unsigned yearDay() const
        {
            return d_tm.tm_yday;
        }

        unsigned yearDayNr() const
        {
            return d_tm.tm_yday + 1;
        }

        TriVal dst() const
        {
            return static_cast<TriVal>(d_tm.tm_isdst);  
        }
    private:
        
};

}

inline FBB::DateTime operator-(FBB::DateTime const &left,   // UTC
                               FBB::DateTime const &right)
{
    return FBB::DateTime(left) -= right;
}   

inline FBB::DateTime operator-(FBB::DateTime const &left,   // d_type
                               time_t right)
{
    return FBB::DateTime(left) -= right;
}   

inline FBB::DateTime operator-(FBB::DateTime const &left,   // d_type
                               tm const &right)
{
    return FBB::DateTime(left) -= right;
}   

inline FBB::DateTime operator+(FBB::DateTime const &left, 
                               FBB::DateTime const &right)
{
    return FBB::DateTime(left) += right;
}   

inline FBB::DateTime operator+(FBB::DateTime const &left,   // d_type
                               time_t right)
{
    return FBB::DateTime(left) += right;
}   

inline FBB::DateTime operator+(FBB::DateTime const &left,   // d_type
                               tm const &right)
{
    return FBB::DateTime(left) += right;
}   


#endif
