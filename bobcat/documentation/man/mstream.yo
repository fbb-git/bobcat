includefile(header.inc)

COMMENT(manpage, section, releasedate, archive, short name)
manpage(FBB::Mstream)(3bobcat)(_CurYrs_)(libbobcat1-dev__CurVers_-x.tar.gz)
                    (Message handler)

manpagename(FBB::Mstream)(Generic message handling stream)

manpagesynopsis()
    bf(#include <bobcat/mstream>)nl()
    Linking option: tt(-lbobcat) 

manpagedescription()
    Objects of this class may be used to handle messages in a standardized
way. Messages may be prefixed with order numbers and labels and/or line
numbers. Messages generated by bf(FBB::Mstream) objects may optionally end in
an exception, allowing simple implementation of, e.g., fatal error messages.

    Four message streams are provided by the tt(BOBCAT) library and may be
used after including the tt(mstream) header file. They are all defined in the
tt(FBB) namespace:
    itemization(
    itt(FBB::emsg) for generating standard (labeled and numbered) error
        messages, e.g.
        verb(
[Error 1] this is an error message
        )
    itt(FBB::fmsg) for generating (labeled) fatal error messages, ending in an
        exception, e.g.,
        verb(
[Fatal] this fatal message is followed by an exception
        )
    itt(FBB::imsg) for generating plain informational messages, e.g.,
        verb(
this is a plain message
        )
    itt(FBB::wmsg) for generating (labeled) warning messages;
        verb(
[Warning] this is a warning
        )
    )
    By default all messages are inserted into the standard output stream, but
other destinations (standard error, a named file, etc.) can easily be
configured. 

    bf(FBB::Mstream) objects themselves are tt(std::ostream) objects, so they
can be used as objects passed to functions expecting tt(ostream)
arguments. Messages inserted into bf(FBB::Mstream) objects are buffered until
the buffer is flushed by their tt(std::ostream) parts or when either the
tt(FBB::endl) or tt(FBB::flush) is inserted into the message stream. Since
these manipulators act like tt(std::endl) and tt(std::flush) when inserted
into other types of tt(std::ostream) objects, tt(using FBB::endl) and tt(using
FBB::flush) might be worth considering. Also, when tt(using namespace std)
em(and) tt(using namespace FBB) is specified the tt(FBB::endl) and
tt(FBB::flush) manipulator will automatically be used with bf(FBB::Mstream)
objects. 

    Messages inserted into bf(FBB::Mstream) objects are considered completed
at the insertion of the tt(FBB::endl) or tt(FBB::flush) manipulators. Message
labels, line number labels and line numbers will only be shown for the next
line after these manipulators have been inserted and exceptions are, if
needed, thrown from these manipulators.

manpagesection(NAMESPACE)
    bf(FBB)nl()
    All elements mentioned in this man-page, are defined in the namespace
bf(FBB).

manpagesection(INHERITS FROM)
    bf(std::ostream)

manpagesection(CONSTRUCTORS)
    itemization(
    itb(Mstream())
        The default constructor generates messages using the
tt(std::streambuf) used by tt(std::cout). There is no limit to the number of
messages that may be inserted. No message or line numbers are shown, no
exception are thrown when inserting messages.
    itb(explicit Mstream(std::ostream &ostr, size_t maxCount = UINT_MAX, 
                std::string const &tag = "", bool throwing = false))
        This constructor uses the tt(std::streambuf) that is also used by the
tt(ostream ostr). By default (using the default argument values) there is no
limit to the number of messages that may be inserted. No message or line
numbers are shown, no exception are thrown when inserting messages. Specifying
any other value than tt(UINT_MAX) will set the maximum number of messages that
can be inserted to that value. The tt(tag) defines the text of the message
label (e.g., tt(Error)). When tt(throwing) is specified as tt(true) an
bf(FBB::Errno) exception is thrown after completing a message. The generated
exception holds the id (see below for the member tt(id)) of the
bf(FBB::Mstream) object from which the exception was thrown as well as the
text tt(FBB::Mstream).
    itb(explicit Mstream(std::streambuf &buf, size_t maxCount = UINT_MAX, 
                std::string const &tag = "", bool throwing = false))
        This constructor uses tt(buf) to insert messages into. The remaining
parameters are identical to those of the previous constructor.
    itb(explicit Mstream(std::string const &name, size_t maxCount = UINT_MAX, 
                std::string const &tag = "", bool throwing = false))
        This constructor creates a tt(std::ofstream) from the provided
tt(name) parameter. It throws an tt(FBB::Errno) exception if the stream cannot
be opened for writing. If a file by that name already exists it is rewritten.
The remaining parameters are identical to those of the previous two
constructors. 
    )
    As bf(FBB::Mstream) inherits from tt(std::ostream) the copy constructor is
not available. Neither is the move constructor.

manpagesection(MEMBER FUNCTIONS)

    itemization(
    itb(size_t count() const)
        returns the number of inserted messages (if tt(setCount) has been
called: the value set by the last tt(setCount) call plus the number of
inserted messages since that call).
    itb(bool  isActive() const)
        returns tt(true) if messages can  actually be inserted into the
bf(FBB::MStream) object, and tt(false) if inserted messages are ignored. When
ignoring messages the message count is not updated.
    itb(size_t maxCount() const)
        returns the maximum number of messages that can be inserted. If the
returned value equals tt(UINT_MAX) then there is no limit to the number of
messages that can be inserted.
    itb(void setCount(size_t count))
        Assigns the value tt(count) to the object's message counter.
    itb(void setLineNr(size_t lineNr))
        Specifies the value tt(lineNr) as the message's line number when line
numbers are requested (see below at tt(showLineNrs). This value is em(not)
changed by the bf(FBB::Mstream) object. To display another line number the
member will have to be called again. 
    itb(void setLineTag(std::string const &tag))
        Specifies the tag prefixing line numbers. By default the line tag
equals `tt(Line)'.
    itb(void setMaxCount(size_t maxCount))
        Defines tt(maxCount) as the maximum number of messages that can be
inserted into the bf(FBB::Mstream) object.
    itb(void setTag(std::string const &tag))
        Specifies the tag prefixing messages. By default the tag is empty. If
not empty the tag is enclosed by square brackets. E.g., specifying the tag
`tt(Error)' will prefix messages with tt([Error]).
    itb(void showLineNrs(bool ifTrue))
        When specifying tt(true) line numbers will be displayed using the last
used tt(lineNr) value specified with tt(setLineNr). Assuming tt(Line) as the
line tag, the line number message will be, e.g., like this: `tt(Line 12: )'.




    


    itb(static void setLine(size_t linenr))
        Set the value of the line-counter used by the bf(FBB::lineMstream)
function (see below).

    itb(static void setMaxCount(size_t maxCount))
        Define the maximum number of error messages (using the bf(err)
manipulator, see below), before a fatal em(maximum number of error messsages
reached) message is generated. The default value is the maximum size_t
value; not reached in any practical situation.

    itb(static void setOstream(std::string const &name))
        DEPRECATED.  Use tt(setDisplay(name)) instead.

    itb(static void setWarning(char const *pre = "[Warning] "))
        Define the text printed ahead of warning messages. The default value
is shown as this member function's default argument value.

    itb(static size_t warnings())
        Returns the number of warning messages generated so far.
    )

manpagesection(FREE FUNCTIONS)
    Note that the following two functions are not members of the class
bf(Mstream), but em(are) defined in the namespace bf(FBB).
    itemization(
    itb(std::ostringstream &lineMstream())
        Information inserted into this function is used to compose a
message. Messages must be completed, using an appropriate manipulator, before
another message can be constructed. The final message is prefixed by
the text `tt(Line <nr>: )', where tt(<nr>) is the value last set by the member
function bf(setLine()). Note the blank trailing the colon.
    itb(std::ostringstream &mstream())
        Information inserted into this function is used to compose a
message. Messages must be completed, using an appropriate manipulator, before
another message can be constructed. 
    itb(std::ostringstream &mstreamstream())
        Contrary to the function bf(mstream), which will first clear the current
contents of the message buffer, bf(mstreamstream) returns the current stream `as
is'. This allows the use of certain Template Library algorithms, like
tt(copy). E.g., assuming that tt(std::vector<std::string> d_words) has been
defined, and using directives were specificied for the tt(std) and tt(FBB)
namespaces, then
        verb(
    copy(d_words.begin(), d_words.end(), ostream_iterator<string>(mstream, " "));
    mstreamstream() << info;
        )
    can be used to insert the contents of tt(d_words), separated by a blank
space, into the tt(Mstream) stream.
    )

manpagesection(MANIPULATORS)
    The manipulators presented in this section are em(not) part of the
bf(FBB::Mstream), class. However, they em(are) defined in the bf(FBB) namespace.
These manipulators should be used to end a message, routing it to its intended
message type. By default all messages are inserted into the standard output
stream (tt(cout)).
    itemization(
    itb(FBB::err)
        An error message is generated. Error messages are prefixed by the text
`tt([Error <count>] )', where tt(<count>) counts the number of error messages
generated so far. If the maximum error count is exceeded (see
bf(setMaxCount) above) a fatal message is generated as well. A newline is
added to the message by the manipulator.
    itb(FBB::fatal) 
        A fatal message is generated. Fatal messages are prefixed by the text
`tt([Fatal] )'. Following a fatal message an bf(Errno(1)) exception is
thrown.  A newline is added to the message by the manipulator.
    itb(FBB::info) 
        This manipulator generates an informational message. Informational
messages have no further characteristics.  A newline is added to the message
by the manipulator.
    itb(FBB::spool) 
        This manipulator generates a (partial) informational message. 
bf(spool) does not add a newline message, but merrely flushes the stream's
buffer.
    itb(FBB::warning) 
        This manipulator generates a warning message. By default the text
`tt([Warning] )' is prefixed to the message, but this message is configurable.
A newline is added to the message by the manipulator.
    )

manpagesection(OVERLOADED OPERATOR)
    The following insertion operator is also defined in the namespace
bf(FBB). It is provided to allow insertion of the manipulators into
an bf(ostream):
    itemization(
    itb(void FBB::operator<<(std::ostream &ostr, 
                            void (*FBB::manip)(std::ostream &)))
        The second argument should be one of the abovementioned manipulators.
        Note that this insertion operator returns tt(void) as inserting one of
        the above manipulators automatically completes the inserted message.
    )

manpagesection(EXAMPLE)
    verbinclude(../../mstream/driver/driver.cc)

manpagefiles()
    em(bobcat/mstream) - defines the class interface

manpageseealso()
    bf(bobcat)(7), bf(errno)(3bobcat), bf(indent)(3bobcat)

manpagebugs()
    None Reported.

includefile(trailer.inc)
