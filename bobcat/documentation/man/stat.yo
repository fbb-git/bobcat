includefile(header.inc)

COMMENT(manpage, section, releasedate, archive, short name)
manpage(FBB::Stat)(3bobcat)(_CurYrs_)(libbobcat1-dev__CurVers_-x.tar.gz)
                    (File Characteristics)

manpagename(FBB::Stat)(Determines File Characteristics)

manpagesynopsis()
    bf(#include <bobcat/stat>)nl()
    Linking option: tt(-lbobcat) 

manpagedescription()
    bf(FBB::Stat) is a wrapper around the bf(stat)(2) system function. In
particular, it offers features to test directly for file
characteristics offered by bf(stat)(2).

includefile(namespace.inc)

manpagesection(INHERITS FROM)
    -

manpagesection(ENUMARATIONS)

    bf(FBB::Stat::Combine): nl() 
        This enumeration has the following values:
        itemization(
        it() bf(ALL): require all of the specified bf(Mode) or 
                bf(SpecialMode) values to match;
        it() bf(ANY): require any match of the specified bf(Mode) or 
                bf(SpecialMode) values (one match suffices);
        )
 
    bf(FBB::Stat::Mode): nl() 
        This enumeration has the following values:
        itemization(
        it() bf(UR): the owner of the file has read permissions
        it() bf(UW): the owner of the file has write permissions
        it() bf(UX): the owner of the file has execute permissions
        it() bf(GR): the group to which the file belongs has read permissions
        it() bf(GW): the group to which the file belongs has write permissions
        it() bf(GX): the group to which the file belongs has execute
                     permissions 
        it() bf(OR): others have read permissions
        it() bf(OW): others have write permissions
        it() bf(OX): others have execute permissions
        it() bf(RWX): all of the above.
        )
 
    bf(FBB::Stat::SpecialMode): nl() 
        This enumeration has the following values:
        itemization(
        it() bf(SUID): set UID bit is up
        it() bf(SGID): set GID bit is up
        it() bf(SB): sticky bit is up
        )
 
    bf(FBB::Stat::Type): nl() 
        This enumeration has the following values:
        itemization(
        it() bf(BLOCK_DEVICE): the object represents a block device
        it() bf(CHARACTER_DEVICE): the object represents a character device
        it() bf(DIRECTORY): the object represents a directory
        it() bf(FIFO): the object represents a named pipe (a queue)
        it() bf(REGULAR_FILE): the object represents a regular file
        it() bf(SOCKET): the object represents a socket
        it() bf(SYMBOLIC_LINK): the object represents a symbolic link
        )

manpagesection(CONSTRUCTORS)
    itemization(
    itb(Stat())
        The default constructor, creating an empty bf(FBB::Stat) object.
    itb(Stat(std::string const &fname))
        Initializes a bf(FBB::Stat) with a given file name.
    itb(Stat(std::string const &fname, std::string const &searchPath))
        Initializes a bf(FBB::Stat) with a given file name, where the file is
searched in the tt(searchPath) directories, which is a colon-separated string
of directory names. The filenames are constructed by appending tt(fname) to
each of the elements of tt(searchPath) until an existing file is found. This
file is then used. If tt(fname) is an absolute path, tt(searchPath) is
ignored.
    itb(Stat(Stat const &other))
        The copy constructor is available.
    )

manpagesection(MEMBER FUNCTIONS)
     All members of itb(std::ostringstream) and itb(  std::exception) are
available, as itb(FBB::Stat) inherits from these classes.
    itemization(
    itb(unsigned blockSize() const)
        Returns the blocksize for filesystem I/O
    itb(unsigned device() const)
        Returns the device number.
    itb(unsigned deviceType() const)
        Returns the device type number, but only if the file type is
bf(DEVICE).
    itb(unsigned errno() const)
        Returns the error number associated with an error, in cases where
bf(operator bool()) returns bf(false).
    itb(unsigned inode() const)
        Returns the inode number.
    itb(unsigned gid() const)
        Returns the group ID of the file's owner.
    itb(FBB::DateTime lastAccess() const)
        Returns a bf(FBB::DateTime) object holding information about the
        file's time of last access.
    itb(FBB::DateTime lastChange() const)
        Returns a bf(FBB::DateTime) object holding information about the
        file's time of last status change.
    itb(FBB::DateTime lastModification() const)
        Returns a bf(FBB::DateTime) object holding information about the
        file's last modification time.
    itb(unsigned mode() const)
        Returns the file's raw, uninterpreted mode 
    itb(bool mode(Mode mode, Combine combine = ALL))
        Returns true if the file has the indicated mode. Multiple modes may be
set, which can be combined by the logical bf(bitor) operator. By default, if
multiple modes are specified, the resulting pattern must exactly represent the
file's mode for the member function to return bf(true). An optional argument
tt(ANY) may be specified if the function should return true if at least one
specified mode matches the file's actual mode.
    itb(std::string const &name() const)
        Returns the file's name as specified in the constructor or bf(set())
        member function.
    itb(unsigned nBlocks() const)
        Returns the file's number of allocated blocks.
    itb(unsigned nLinks() const)
        Returns the file's number of hard links.
    itb(std::string path() const)
        Returns the file's full pathname. If the full pathname could not be
        determined, an empty string is returned.
    itb(bool set(std::string const &name))
        Redefine the bf(@CLASS) object to represent the information about the
        indicated filename.
    itb(bool set(std::string const &name, std::string const &pathlist))
        Redefine the bf(@CLASS) object to represent the information about the
        indicated filename, where the file is searched in the tt(pathlist)
        directories, which is a colon-separated string of directory names. The
        filenames are constructed by appending tt(fname) to each of the
        elements of tt(searchPath) until an existing file is found. This file
        is then used. If tt(fname) is an absolute path, tt(searchPath) is
        ignored.
    itb(off_t size() const)
        Returns the file's size in number of bytes.
    itb(bool specialMode(SpecialMode special, Combine combine = ALL))
        Returns true if the file has the indicated special modes.  Multiple
special modes may be specified, which can be combined by the logical bf(bitor)
operator. By default, if multiple modes are specified, the resulting pattern
must exactly represent the file's mode for the member function to return
bf(true). An optional argument tt(ANY) may be specified if the function should
return true if at least one specified mode matches the file's actual mode.
    itb(Stat::stat const &statStruct() const)
        Returns a reference to the object's bf(stat struct).
    itb(unsigned uid() const)
        Returns the user ID of the file's owner.
    )

manpagesection(EXAMPLE)
    To do

manpagefiles()
    em(bobcat/stat) - defines the class interface

manpageseealso()
    bf(bobcat)(7), bf(stat)(3)

manpagebugs()
    None Reported.

includefile(trailer.inc)
