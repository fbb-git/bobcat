includefile(include/header)

COMMENT(manpage, section, releasedate, archive, short name)
manpage(FBB::Redirector)(3bobcat)(_CurYrs_)(libbobcat-dev__CurVers_-x.tar.gz)
                    (System Level File Redirection)

manpagename(FBB::Redirector)(Redirects a file descriptor to another descriptor)

manpagesynopsis()
    bf(#include <bobcat/redirector>)nl()
    Linking option: tt(-lbobcat) 

manpagedescription()
    Objects of the class bf(FBB::Redirector) set up a system level file
redirection, using file descriptors rather than streams. tt(Redirector)
objects are effectively em(wrappers) around the bf(dup2)(2) system
call. System level redirection allows the programmer to send output to, e.g.,
the standard output stream, which actually appears at another stream (e.g.,
the standard error). 


    tt(Redirector) objects are used to redirect the output sent to a stream
having file descriptor tt(x) to another stream having file descriptor tt(y),
much like the shell's tt(>) operator redirects the standard output to some
file. 

    tt(Redirector) objects can also be used to extract the information from a
stream having file descriptor tt(x) in fact from another stream having file
descriptor tt(y), much like the shell's tt(<) operator is used to read the
information in some file from the standard input.

Redirection using tt(Redirector) objects represents a stronger form of
redirection than redirection offered by bf(C++) itself, which uses
tt(std::streambuf) redirection, and which is, because of that, bound to the
program's scope. System level redirection, on the other hand, is applied at
the system level, allowing the programmer to redirect standard streams when
starting a program. For example, the standard error is commonly written to the
standard output using an invocation like tt(program 2>&1).

    When constructing tt(Redirector) objects a file descriptor is
required. The file descriptor specified at the constructor is the file
descriptor that is used by the program to read information from or to write
information to.  Another file descriptor is required to set up the
redirection: the file descriptor used here is the file descriptor of the
stream that actually holds the information which is extracted from the file
descriptor that was passed to the tt(Redirector)'s constructor; or it is the
file descriptor of the stream receiving the information which is written to
the stream having the file descriptor that was passed to the tt(Redirector)'s
constructor. 

    Formally, file descriptors are not defined in bf(C++), but they are
available in many types of operating systems. In those systems each `file' has
an associated `file descriptor'. A file descriptor is an bf(int), which is an
index into the program's file allocation table, maintained by the
system. Another type of well-known entities which are file descriptors are
em(sockets).

    Well-known filedescriptors (defined in, e.g., tt(unistd.h)) 
having fixed values are
    itemization(
    tt() 0 (tt(STDIN_FILENO)), representing the standard input stream
(tt(std::cin));
    tt() 1, (tt(STDOUT_FILENO)), representing the standard output stream
(tt(std::cout));
    tt() 2, (tt(STDERR_FILENO)), representing the standard error stream
(tt(cerr));
    )
    Notes:
    itemization(
    it() System-level redirections are kept during system calls of the
bf(exec)(3) family.
    it() Destroying a tt(Redirector) object does em(not) undo the
redirection set up by that object.
    )

includefile(include/namespace)

manpagesection(INHERITS FROM)
    -

manpagesection(ENUM)
    The enumeration bf(StandardFileno) holds the following values:
    itemization(
    itt(STDIN) (0)
    itt(STDOUT) (1)
    itt(STDERR) (2)
    )
    These values may be used to set up a redirection instead of the plain
numbers. 

manpagesection(CONSTRUCTORS)
    itemization(
    itb(Redirector(int fd))
        This constructor expects the file descriptor of the file that will be
used by the program to access (read, write) another file. The file descriptor
that is passed to the constructor is used by the program, and will often be
tt(STDIN, STDOUT), or tt(STDERR), allowing the program to use tt(cin, cout),
or tt(cerr) to extract information from, or insert information into other
streams using its standard input and output streams.
    )
        The copy constructor is available.

manpagesection(MEMBER FUNCTIONS)
    itemization(
    itb(void swallow(int otherFd) const)
        This member function expects the file descriptor of the file that will
be redirected. With tt(swallow) the file having file descriptor tt(otherFd) is
`swallowed' by the file descriptor passed to the tt(Redirector's)
constructor: information written to tt(otherFd) will be received at the
tt(Redirector's) file descriptor. The tt(otherFd) file descriptor often is
tt(STDOUT) or tt(STDERR).

    If the redirection fails an bf(FBB::Exception) object is thrown, whose
tt(which()) member shows the system's tt(errno) value set by the failing
bf(dup2)(2) function.

    itb(void through(int otherFd) const)
        This member function also redirects tt(otherFd) to the file descriptor
provided to the constructor, but will also close the constructor's file
descriptor. After calling tt(through) the file referred to by the
constructor's file descriptor can only be accessed from tt(otherFd). The file
originally referred to by tt(otherFd) is not accessible anymore from the
current process.
    )

manpagesection(EXAMPLE)
    verb(
    #include <iostream>
    #include <bobcat/redirector>
    
    using namespace std;
    using namespace FBB;
    
    int main()
    {
        Redirector redirector(Redirector::STDOUT);
        redirector.swallow(Redirector::STDERR);
    
        cerr << "This appears at the standard output stream\n"
                "use `a.out > /dev/null' to suppress this message" << endl;
    }
        )

manpagefiles()
    em(bobcat/redirector) - defines the class interface

manpageseealso()
    bf(bobcat)(7), bf(errno)(3bobcat), bf(dup2)(2), bf(execl)(3)

manpagebugs()
    None Reported.

includefile(include/trailer)
