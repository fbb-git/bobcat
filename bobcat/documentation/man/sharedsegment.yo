includefile(include/header)

COMMENT(replace 'sharedsegment' by the name of the new class)

COMMENT(manpage, section, releasedate, archive, short name)
manpage(FBB::SharedSegment)(3bobcat)(_CurYrs_)(libbobcat-dev__CurVers_-x.tar.gz)
                    (Shared Memory Data)

manpagename(FBB::SharedSegment)(Shared Memory data structure)

manpagesynopsis()
    bf(#include <bobcat/sharedsegment>)nl()
    Linking option: tt(-lbobcat ) 

manpagedescription()

    The class bf(FBB::SharedSegment) implements the shared memory data
structure which is used by Bobcat's shared memory classes. Bobcat's
tt(SharedMemory) class accesses or defines a shared memory segment which is
interpreted as an tt(FBB::SharedSegment) object. The total amount of requested
shared memory is always a lower bound to the actual amount of shared memory
that eventually may become available. As a non-realistic example: assume 10 kB
of memory is requested, then 1 kB may be used by the bf(FBB::SharedSegment)
object, maintaining a table of 10 entries, each controlling the access to a
shared memory block of 1 kB. These 1 kB blocks aren't immediately available,
but become available when a program reads or writes from addresses located in
these data segments.

Objects of the bf(FBB::SharedSegment) class therefore act as molds,
controlling access to and structuring the shared memory data segment. The
mentioned table consists of tt(nBlocks SharedBlock values, containing mutexes
and IDs of shared data segments. As always, the mutexes control which process
has access to a particular block of shared data memory, and the IDs are either
-1, meaning that their shared memory data segments has as yet not been
defined, or they contain the IDs of defined shared memory data segments.

    The class bf(FBB::SharedSegment)'s only responsibility is to offer the
mold as described. When used by a tt(FBB::SharedMemory) object different
processes may gain access to different parts of the shared memory data without
interfering each other read and write actions.

includefile(include/namespace)

manpagesection(INHERITS FROM)
    -

manpagesection(CONSTRUCTORS)

    No publicly accessible constructors have been defined for
bf(FBB::SharedSegment). A static member function tt(create) (see below) is
available, returning a pointer to a shared memory segment, in which a
bf(FBB::SharedSegment) has been defined.

manpagesection(OVERLOADED OPERATORS)
    itemization(
    itb(std::ostream &operator<<(std::ostream &out, 
                                    SharedSegment const &sharedData))
       The overloaded insertion operator inserts basic statistics of the
        shared memory data into the tt(ostream) object. Information about the
        IDs of the shared segments, their sizes, the maximum number of shared
        data segments and the number of bytes that can be read from the shared
        memory are displayed.

    itb(FBB::SharedBlock &operator[](size_t idx))
       Table element tt(idx) of the table of tt(FBB::SharedBlock)
        block IDs is returned. The behavior of the program is undefined if
        tt(idx) is or exceeds tt(nBlocks()).

    )
    Overloaded move and copy assignment operators are not available.

manpagesection(MEMBER FUNCTIONS)
    itemization(
    itb(size_t access() const)
       The access rights of the shared memory segment are returned as a number
        which is usually interpreted as an octal value, using the well-known
        (bf(chmod)(1)) way to define the access rights for the owner, the
        group and others.
    
    itb(size_t nBlocks() const)
       The number of shared memory data blocks that can be used by the
        bf(FBB::SharedSegment) object is returned.

    itb(std::streamsize nReadable() const)
       The number of characters (bytes) that can be read from the beginning of
        the shared memory is returned.
    
    itb(void nReadableLock() const)
       When returning from this member function a lock has been obtained of
        bf(FBB::SharedSegment)'s mutex controlling access the the object's
        data member storing the number of characters that can be read from the
        shared memory controlled by the bf(FBB::SharedSegment) object.

    itb(void nReadableUnlock() const)
       This member function releases the lock previously acquired by
        tt(nReadableLock).

    itb(void release() const)
       If the current process has locked the shared memory, the lock
        count is reset to zero, and the shared memory segment is unlocked.

    itb(size_t segmentSize() const)
        The size (in bytes) of the shared memory data blocks is returned. The
        bf(FBB::SharedSegment) object can accomodate at most tt(segmentSize() *
        nBlocks()) bytes.

    itb(bool try_lock() const)
       When returning tt(true) the current process has obtained the lock, and
        the object's lock count is set to 1. Otherwise, tt(false) is returned
        (which includes the case where the process already has obtained the
        lock).

    itb(void unlock() const)
       If the object's lock count is zero, the function immediately
        returns. Otherwise, the object's lock count is decremented. Once the
        lock count has decremented to zero the lock of the shared memory
        segment is released.

    itb(void updateNreadable(std::streamsize offset))
       The number of bytes that can be retrieved from the shared memory is
        updated to tt(max(nReadable(), offset)). This is a bf(FBB::SharedSegment)
        member, rather than a tt(FBB::SharedPos) member because it is a
        characteristic of the shared memory itself. Different processes may
        write bytes to different offsets, and each process must be able 
        to update the number of readable bytes, requiring this number to be
        stored in the the shared memory itself.
    )

manpagesection(STATIC MEMBER FUNCTIONS)

    itb(SharedSegment *create(size_t access, size_t nBlocks, size_t segmentSize))
       This constructor initializes an bf(FBB::SharedSegment) object, setting
        its access rights (tt(access), using the well-known (bf(chmod)(1)) way
        to define the access rights for the owner, the group and others), the
        number of data blocks (tt(nBlocks)) and the size of these data blocks
        (tt(segmentSize)).

       All elements in the table of shared memory data block IDs are
        initialized to the value -1.

       This constructor is normally used to initialize a tt(SharedSegment) object
        inside a shared memory segment using placement new. 
    )

manpagesection(EXAMPLE)
    See the bf(sharedstream)(3bobcat) man page.


manpagefiles()
    em(bobcat/sharedsegment) - defines the class interface

manpageseealso()
    bf(bobcat)(7), bf(chmod)(1),
        bf(isharedstream)(3bobcat),
        bf(osharedstream)(3bobcat),
        bf(sharedmemory)(3bobcat),
        bf(sharedmutex)(3bobcat), 
        bf(sharedpos)(3bobcat), 
        bf(sharedstream)(3bobcat), 
        bf(sharedstreambuf)(3bobcat)

manpagebugs()
    None Reported.

includefile(include/trailer)


