includefile(header.inc)

COMMENT(manpage, section, releasedate, archive, short name)
manpage(FBB::Msg)(3bobcat)(_CurYrs_)(libbobcat1-dev__CurVers_-x.tar.gz)
                    (Message handler)

manpagename(FBB::Msg)(Generic message handler)

manpagesynopsis()
    bf(#include <bobcat/msg>)nl()
    Linking option: tt(-lbobcat) 

manpagedescription()
    This class may be used to handle messages and to perform verfied stream
opening. The class bf(Msg) only has static members.

    The following types of messages are distinguished:
    itemization(
    it() informational messages (tt(INFO)),
    it() warning messages       (tt(WARNING)),
    it() error messages         (tt(ERROR)),
    it() fatal messages         (tt(FATAL))
    )
    Each type of message can be written to its own file (given the file's
name), stream (given the stream object) or tt(std::streambuf). By default, all
messages are inserted into the standard output stream (tt(std::cout)).

    All messages are inserted into the free functions tt(FBB::msg,
FBB::msgstream), or tt(FBB::linemsg()) (see below).  Following the message
insertion one of the manipulators tt(FBB::info, FBB::spool, FBB::warning,
FBB::error) or tt(FBB::fatal) must be inserted into the free function to route
the message to its proper destination (also see below for additional
information about these manipulators).

    If the tt(FATAL) message category is active, then a message ending at the
tt(fatal) manipulator will be written to the currently active fatal-message
stream, after which an tt(FBB::Errno(1)) exception will be thrown. This
exception could of course be caught. However, the intended purpose of such a
message is to end the running program.

manpagesection(NAMESPACE)
    bf(FBB)nl()
    All elements mentioned in this man-page, are defined in the namespace
bf(FBB).

manpagesection(INHERITS FROM)
    -

manpagesection(ENUMERATION)
    The values of the tt(enum Type) are used to specify display modes or
streams for message categories. The following values are supported:
    itemization(
    itt(INFO), for informational messages;
    itt(WARNING), for warning messages;
    itt(ERROR), for error messages;
    it(FATAL), for fatal messages.
    )

manpagesection(CONSTRUCTORS)
    There are no constructors. All members are static.

manpagesection(STATIC MEMBER FUNCTIONS)
    The member functions listed below are primarily used to control the output
streams and to fine-tune the inner workings of the class' data members.

The free functions tt(FBB::msg), tt(FBB::msgstream) and tt(FBB::lineMsg) (see
below) and associated manipulators (see below) are used to create messages.

    itemization(
    itb(static bool display(Type type))
        Returns tt(true) if messages of category tt(Type) will actually be
inserted into a message stream.

    itb(static size_t errors())
        Returns the number of error messages generated so far. Synonym of
bf(count).

    itb(static std::streambuf *infoToWarning())
        DEPRECATED. Use tt(setDisplay(Msg::INFO, streambuf(Msg::WARNING)))

    itb(static void open(std::ifstream &in, std::string const &name,
                                    std::ios::openmode mode = std::ios::in))
        Convenience function opening the object tt(ifstream in) refers to for
reading. If opening the stream fails, an tt(FBB::Errno) exception is thrown.

    itb(static void open(std::ofstream &out, std::string const &name,
                                    std::ios::openmode mode = std::ios::out))
        Convenience function opening (creating) the object tt(ofstream out)
refers to. If opening the stream fails, an tt(FBB::Errno) exception is thrown.

    itb(static void open(std::ofstream &out, std::string const &name, 
                                        size_t protection,
                                    std::ios::openmode mode = std::ios::out))
        Convenience function opening (creating) the object tt(ofstream out)
refers to. The protection value is normally specified as an octal value. From
the bf(chmod)(1) manpage:

       The  mode is from one to  four  octal  digits  (0-7),  derived  by
       adding up the bits with values 4, 2, and 1.  Omitted digits are assumed
       to be leading zeros.  The first digit selects the set user ID  (4)  and
       set group ID (2) and restricted deletion or sticky (1) attributes.  The
       second digit selects permissions for the user who owns the  file:  read
       (4),  write  (2),  and  execute  (1); the third selects permissions for
       other users in the file's group, with the same values; and  the  fourth
       for other users not in the file's group, with the same values.

If opening the stream fails, an tt(FBB::Errno) exception is thrown, holding
the system's tt(errno) value and its textual interpretation.

    itb(static void open(std::fstream &out, std::string const &name, 
                                        std::ios::openmode mode)) 
        Convenience function opening (creating) the object tt(fstream out)
refers to using a specified tt(ios::openmode). If opening the stream fails, an
tt(FBB::Errno) exception is thrown.

    itb(static std::streambuf *sbuf(Type type))
        A pointer to the tt(std::streambuf) to which messages of tt(Type type)
are written is returned. 0 is returned if these messages are suppressed.

    itb(static bool setDisplay(bool mode))
        Suppresses (argument tt(false)) or activates (argument tt(true))
messages of all types. Returns the value returned by tt(display()) when
tt(setDisplay) is called. By default all messages are active.

    itb(static void setDisplay(Type type, bool mode))
        Suppresses (argument tt(false)) or activates (argument tt(true))
tt(Type type) messages. 

    itb(static void setDisplay(Type type, std::string const &name))
        tt(Type type) messages will be written to the tt(ofstream) having name
tt(name). The stream is created by this function. An tt(FBB::Errno) exception
is thrown if the stream could not be opened.

    itb(static void setDisplay(Type type, std::streambuf *buffer))
        tt(Type type) messages will be sent to the tt(std::streambuf buffer).

    itb(static void setDisplay(Type type, std::ostream &out))
        tt(Type type) messages will be inserted into tt(std::ostream
        out).

    itb(static void setDisplay(Device &device))
        This member is defined as a function template. The tt(Device) template
type parameter may be deduced as a tt(std::string const &), indicating the
name of an tt(ofstream) (which will be (re)created empty); or as a
tt(std::streambuf *) or as a tt(std::ostream &). All message types will be
sent to the device that is specified for this function.


    itb(static std::streambuf *setInfoBuf(std::streambuf *newBuffer,
                                          bool display = true))
        DEPRECATED.  Use tt(setDisplay(Msg::INFO, newBuffer)) instead.

    itb(static void setLine(size_t linenr))
        Set the value of the line-counter used by the bf(FBB::lineMsg)
function (see below).

    itb(static void setMaxCount(size_t maxCount))
        Define the maximum number of error messages (using the bf(err)
manipulator, see below), before a fatal em(maximum number of error messsages
reached) message is generated. The default value is the maximum size_t
value; not reached in any practical situation.

    itb(static void setOstream(std::string const &name))
        DEPRECATED.  Use tt(setDisplay(name)) instead.

    itb(static void setWarning(char const *pre = "[Warning] "))
        Define the text printed ahead of warning messages. The default value
is shown as this member function's default argument value.

    itb(static size_t warnings())
        Returns the number of warning messages generated so far.
    )

manpagesection(FREE FUNCTIONS)
    Note that the following two functions are not members of the class
bf(Msg), but em(are) defined in the namespace bf(FBB).
    itemization(
    itb(std::ostringstream &lineMsg())
        Information inserted into this function is used to compose a
message. Messages must be completed, using an appropriate manipulator, before
another message can be constructed. The final message is prefixed by
the text `tt(Line <nr>: )', where tt(<nr>) is the value last set by the member
function bf(setLine()). Note the blank trailing the colon.
    itb(std::ostringstream &msg())
        Information inserted into this function is used to compose a
message. Messages must be completed, using an appropriate manipulator, before
another message can be constructed. 
    itb(std::ostringstream &msgstream())
        Contrary to the function bf(msg), which will first clear the current
contents of the message buffer, bf(msgstream) returns the current stream `as
is'. This allows the use of certain Template Library algorithms, like
tt(copy). E.g., assuming that tt(std::vector<std::string> d_words) has been
defined, and using directives were specificied for the tt(std) and tt(FBB)
namespaces, then
        verb(
    copy(d_words.begin(), d_words.end(), ostream_iterator<string>(msg, " "));
    msgstream() << info;
        )
    can be used to insert the contents of tt(d_words), separated by a blank
space, into the tt(Msg) stream.
    )

manpagesection(MANIPULATORS)
    The manipulators presented in this section are em(not) part of the
bf(FBB::Msg), class. However, they em(are) defined in the bf(FBB) namespace.
These manipulators should be used to end a message, routing it to its intended
message type. By default all messages are inserted into the standard output
stream (tt(cout)).
    itemization(
    itb(FBB::err)
        An error message is generated. Error messages are prefixed by the text
`tt([Error <count>] )', where tt(<count>) counts the number of error messages
generated so far. If the maximum error count is exceeded (see
bf(setMaxCount) above) a fatal message is generated as well. A newline is
added to the message by the manipulator.
    itb(FBB::fatal) 
        A fatal message is generated. Fatal messages are prefixed by the text
`tt([Fatal] )'. Following a fatal message an bf(Errno(1)) exception is
thrown.  A newline is added to the message by the manipulator.
    itb(FBB::info) 
        This manipulator generates an informational message. Informational
messages have no further characteristics.  A newline is added to the message
by the manipulator.
    itb(FBB::spool) 
        This manipulator generates a (partial) informational message. 
bf(spool) does not add a newline message, but merrely flushes the stream's
buffer.
    itb(FBB::warning) 
        This manipulator generates a warning message. By default the text
`tt([Warning] )' is prefixed to the message, but this message is configurable.
A newline is added to the message by the manipulator.
    )

manpagesection(OVERLOADED OPERATOR)
    The following insertion operator is also defined in the namespace
bf(FBB). It is provided to allow insertion of the manipulators into
an bf(ostream):
    itemization(
    itb(void FBB::operator<<(std::ostream &ostr, 
                            void (*FBB::manip)(std::ostream &)))
        The second argument should be one of the abovementioned manipulators.
        Note that this insertion operator returns tt(void) as inserting one of
        the above manipulators automatically completes the inserted message.
    )

manpagesection(EXAMPLE)
    verbinclude(../../msg/driver/driver.cc)

manpagefiles()
    em(bobcat/msg) - defines the class interface

manpageseealso()
    bf(bobcat)(7), bf(errno)(3bobcat), bf(indent)(3bobcat)

manpagebugs()
    None Reported.

includefile(trailer.inc)
