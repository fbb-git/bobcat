includefile(header.inc)

COMMENT(manpage, section, releasedate, archive, short name)
manpage(FBB::Msg)(3bobcat)(_CurYrs_)(bobcat-dev__CurVers_-x.tar.gz)
                    (Message handler)

manpagename(FBB::Msg)(Generic message handler)

manpagesynopsis()
    bf(#include <bobcat/msg>)nl()
    Linking option: tt(-lbobcat) 

manpagedescription()

manpagesection(NAMESPACE)
    bf(FBB)nl()
    All constructors, members, operators and manipulators, mentioned in this
man-page, are defined in the namespace bf(FBB).

manpagesection(INHERITS FROM)
    -

manpagesection(CONSTRUCTORS)
    The class bf(Msg) only has static members. There are no constructors.


manpagesection(MEMBER FUNCTIONS)
    The class bf(Msg) only has static members. The member functions listed
below are not frequently used. They exist primarily to control the output
streams and to fine-tune the inner workings of the class' data members.
Instead, the class-less members bf(msg()) and bf(lineMsg()) (see below) and
the manipulators (see below) are used to create messages.

    itemization(
    itb(static unsigned count())
        Returns the number of error messages generated so far.
    itb(static bool display())
        Returns tt(true) if the currently accumulated message will be
inserted into the message stream. This is the default case.
    itb(static unsigned errors())
        Returns the number of error messages generated so far. Synonym of
bf(count()). 
    itb(static std::streambuf *infoToWarning())
        Following this call all `info'-messages will be written to the same
stream as warning messages. The function returns the bf(streambuf) used so
far. 
    itb(static void open(std::ifstream &in, std::string const &name))
        Convenience function opening the object tt(ifstream in) refers to. If
opening the stream fails, a message is displayed and a fatal error message is
generated. 
    itb(static void open(std::ofstream &in, std::string const &name))
        Convenience function opening the object tt(ofstream in) refers to. If
opening the stream fails, a message is displayed and a fatal error message is
generated. 
    itb(static bool setDisplay(bool mode))
        Changes the setting of the `display' variable. At bf(true) (Note that
the default is bf(false)) accumulated messages will be inserted into the
message stream.
    itb(static std::streambuf *setInfoBuf(std::streambuf *newBuffer,
                                          bool display = true))
        Define a new bf(streambuf) into which info-messages will be
inserted. The passed bf(streambuf) must remain in existence after the call. If
bf(newBuffer) is 0, the currently used bf(streambuf) is not altered.
The function returns the bf(streambuf) used so far.
    itb(static void setLine(unsigned linenr))
        Set the value of the line-counter used with the bf(lineMsg)
manipulator (see below).
    itb(static void setMaxCount(unsigned maxCount))
        Define the maximum number of error messages (using the bf(err)
manipulator, see below), before a fatal em(maximum number of error messsages
reached) message is generated. The default value is the maximum unsigned
value; not reached in any practical situation.
    itb(static void setOstream(std::string const &name))
        Define the name of the stream to which messages will be written.
    itb(static void setWarning(char const *pre = "[Warning] "))
        Define the text printed ahead of warning messages. The default value
is equal to this member function's default argument value.
    itb(static unsigned warnings())
        Returns the number of warning messages generated so far.
    )

manpagesection(FREE FUNCTIONS)
    Note that the following two functions are not members of the class
bf(Msg), but em(are) defined in the namespace bf(FBB).
    itemization(
    itb(std::ostringstream &msg())
        Information inserted into this function is used to compose a
message. Messages must be completed, using an appropriate manipulator, before
another message can be constructed. 
    itb(std::ostringstream &linMsg())
        Same functionality as bf(msg()), but the final message is prefixed by
the text `tt(Line <nr>: )', where tt(<nr>) is the value last set by the member
function bf(setLine()). Note the blank trailing the colon.
    )

manpagesection(MANIPULATORS)
    The following manipulators (which are em(not) part of the bf(FBB::Msg),
class, but em(are) defined in the bf(FBB) namespace) can be inserted into the
bf(FBB::Msg) object. All messages are by default inserted into the standard
output stream (tt(cout)).
    itemization(
    itb(err)
        An error message is generated. Error messages are prefixed by the text
`tt([Error <count>] )', where tt(<count>) counts the number of error messages
generated so far. If the maximum error count is exceeded (see
bf(setMaxCount()) above) a fatal message is generated as well. A newline is
added to the message by the manipulator.
    itb(fatal) 
        A fatal message is generated. Fatal messages are prefixed by the text
`tt([Fatal] )'. Following a fatal message an bf(Errno(1)) exception is
thrown.  A newline is added to the message by the manipulator.
    itb(info) 
        This manipulator generates an informational message. Information
messages may be controlled by the bf(setDisplay()) member (see above), and
have no further characteristics.  A newline is added to the message by the
manipulator.
    itb(spool) 
        This manipulator generates a (partial) informational message. 
bf(spool) does not add a newline message, but merrely flushes the stream's
buffer.
    itb(warning) 
        This manipulator generates a warning message. Warning
messages may be controlled by the bf(setDisplay()) member (see above). By
default the text `tt([Warning] )' is prefixed to the message, but the prefixed
message is configurable.  A newline is added to the message by the
manipulator.
    )

manpagesection(OVERLOADED OPERATOR)
    The following insertion operator is em(not) defined in the namespace
bf(FBB). It is part of the distribution to allow the manipulators to be
inserted into a bf(ostrstream):
    itemization(
    itb(void operator<<(std::ostream &ostrstream, void (*)(std::ostream &)))
        The second argument normally is one of the manipulators defined above.
    )

manpagesection(EXAMPLE)
        verb(
    #include <bobcat/msg>

    using namespace FBB;

    int main(int argc)
    try
    {
        if (argc == 1)
            msg() << "Need some arguments" << fatal;
        else
        {
            Msg::setDisplay(true);
            msg() << "Thanks for providing " << argc << 
                                    " arguments " << info;
        }
    }            
    catch(...)
    {
        msg() << "Got an Errno object, but ignoring it" << err;
    }
        )

manpagefiles()
    em(bobcat/msg) - defines the class interface

manpageseealso()
    bf(bobcat)(7), bf(errno)(3bobcat)

manpagebugs()
    None Reported.

includefile(trailer.inc)
