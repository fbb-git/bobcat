includefile(header.inc)

COMMENT(manpage, section, releasedate, archive, short name)
manpage(FBB::Pipe)(3bobcat)(_CurYrs_)(bobcat-dev__CurVers_-x.tar.gz)
                    (Error handler)

manpagename(FBB::Pipe)(Defines a system level pipe)

manpagesynopsis()
    bf(#include <bobcat/pipe>)nl()
    Linking option: tt(-lbobcat) 

manpagedescription()
    bf(FBB::Pipe) objects may be used to construct a em(pipe). bf(FBB::Pipe)
objects offer a simple interface to the reading and writing ends of
pipes. bf(FBB::Pipe) objects are object-wrappers around the bf(pipe)(2) system
call.

includefile(namespace.inc)

manpagesection(INHERITS FROM)
    -

manpagesection(CONSTRUCTORS)
    itemization(
    itb(Pipe())
        The default bf(Pipe()) constructor constructs a basic pipe, calling
bf(pipe)(2). If the construction fails, an bf(FBB::Errno) object is thrown,
whose tt(which()) member shows the system's tt(errno) value set by the failing
bf(pipe)(2) function.
    itb(Pipe(int const *fd))
        This constructor expects two file descriptors, which already define a
pipe.
    itb(Pipe(Pipe const &other) throw()) 
        The standard copy constructor is available.
    )

manpagesection(MEMBER FUNCTIONS)
    itemization(
    itb(int getReadFd() const)
        Returns the pipe's file descriptor that is used for reading
    itb(int getWriteFd() const)
        Returns the pipe's file descriptor that is used for writing
    itb(void readFrom(int filedescriptor))
        Sets up redirection from the internal em(read) filedescriptor to the
given filedescriptor: information can be read from the bf(FBB::Pipe) object by
reading from the provided filedescriptor.
    itb(void readFrom(int const *filedescriptors, unsigned n))
        Sets up redirection from the internal em(read) filedescriptor to the
given filedescriptors: information can be read from the bf(FBB::Pipe) object by
reading from each of the bf(n) provided filedescriptors (experimental).
    itb(int readOnly())
        Closes the writing end of the pipe, returns the reading end's file
descriptor. 
    itb(void writtenBy(int filedescriptor))
        Sets up redirection from the internal em(write) filedescriptor to the
given filedescriptor: information can be written to the bf(FBB::Pipe) object by
writing to the provided filedescriptor.
    itb(void writtenBy(int const *filedescriptors, unsigned n))
        Sets up redirection from the internal em(write) filedescriptor to the
given filedescriptors: information can be written to the bf(FBB::Pipe) object
by writing to each of the bf(n) provided filedescriptors.
    itb(int writeOnly())
        Closes the writing end of the pipe, returns the writing end's file
descriptor. 
    )

manpagesection(PROTECTED ENUMERATION)
    The bf(RW) protected enumeration has the following elements:
    itemization(
    itb(READ)
        The index in bf(d_fd[]) (see below) of the element holding the pipe's
reading file descriptor;
    itb(WRITE)
        The index in bf(d_fd[]) (see below) of the element holding the pipe's
writing file descriptor
    )

manpagesection(PROTECTED DATA)
    itemization(
    itb(int d_fd[2]) 
        The array holding the pipe's file descriptors. The bf(READ) element
contains the pipe's reading file descriptor, the bf(WRITE) element
contains the pipe's writing file descriptor,
    )

manpagesection(EXAMPLE)
        verb(
    #include <bobcat/pipe>
    #include <sys/types.h>
    #include <sys/wait.h>
    #include <unistd.h>
    #include <iostream>
    #include <string>
    
    using namespace std;
    using namespace FBB;
    
    int main()
    {
        Pipe p;                         // construct a pipe
    
        cout << "Read file descriptor: " << p.getReadFd() << endl;
        cout << "Write file descriptor: " << p.getWriteFd() << endl;
    
        int pid = fork();
    
        if (pid == -1)
            return 1;
    
        if (!pid)                       //child
        {
            p.readFrom(STDIN_FILENO);   // read what goes into the pipe
    
            string s;

            getline(cin, s);
            cout << "CHILD: Got `" << s << "'" << endl;    
    
            getline(cin, s);
            cout << "CHILD: Got `" << s << "'" << endl;    
    
            return 0;
        }
    
        p.writtenBy(STDOUT_FILENO);      // write to the pipe via cout
    
        cout << "first line" << endl;
        cout << "second line" << endl;
    
        waitpid(pid, 0, 0);
    
        return 0;
    }
        )

manpagefiles()
    em(bobcat/pipe) - defines the class interface

manpageseealso()
    bf(bobcat)(7), bf(pipe)(2), bf(ipipe)(3bobcat), bf(opipe)(3bobcat))

manpagebugs()
    None Reported.

includefile(trailer.inc)
