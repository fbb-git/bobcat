includefile(header.inc)

COMMENT(manpage, section, releasedate, archive, short name)
manpage(FBB::Wrap1c)(3bobcat)(_CurYrs_)(libbobcat1-dev__CurVers_-x.tar.gz)
                    (Configurable Unary Wrapper)

manpagename(FBB::Wrap1c)(Configurabale unary argument wrapper template class)

manpagesynopsis()
    bf(#include <bobcat/wrap1c>)nl()

manpagedescription()
    The bf(FBB::Wrap1c) class is a configurable unary argument wrapper
template class. Its primary use is in combination with the generic algorithms
from the standard template libray. The called function expects a em(local
context struct) which is used to pass arguments to the function called by the
generic algorithm which are available in the local context of the called
generic algorithm. The local context struct can be either a tt(const) or
non-tt(const) struct.

    The called function itself may be specified as one of the constructor's
arguments. It must be a (static member) function. Using a (static member)
function has various advantages, especially with the bf(Wrap?c) classes to
which a em(local context) can be passed:
    itemization(
    it() There is no introduced uncertainty about the bf(const)-ness of the
callled function, as static member functions do not support 
a bf(const) modifier;
    it() The passed function can also be a free (global) function to which a
local context is passed;
    it() The passed function can be a static member function of the class
using the generic algorithm to which the bf(FBB::Wrap1c) object is passed. By
passing the calling object in the function's local context, the function may
directly access the calling object's members.
    it() The passed function can be a static member function of the class
whose objects are passed to the function via the generic template function s
iterator parameters. In that case the function may directly access the passed
object's members.
    it() Since no object is involved in calling the static function, no
ambiguity can arise as to whether an object reference or an object pointer
should be used in calling the function: static (member) functions may be
called without using objects.
    )

    The bf(FBB::Wrap1c) template class has the following template parameters:
    itemization(
    itt(Type): the type of the object passed to bf(FBB::Wrap1c)'s
bf(operator()()) function. Specify a bf(plain) type, do not specify a pointer
or reference type: if pointers or references are used, it will become obvious
later on, as the template will be able to handle (const) references and
(const) pointers. Note that plain values are handled as const-references, and
that called functions should therefore not use value parameter types but
tt(const &) types instead.
    itt(Context): the type of the bf(local context struct). This bf(struct) is
a local bf(struct), that should be defined immediatey before applying the
generic algorithm, specifying values, references or pointers to entities that
are available in the local context where the generic algorithm is called. If
no generic algorithm would have been used, but a local implementation of the
generic algorithm would have been used instead, then the called function would
have received certain arguments. The local context struct is a replacement of
such a function's parameter list, mimicking the function's parameter list in
the bf(struct) definition. The function will now receive a `standardized'
parameter list, defined by the local context struct. The typename of the
defined bf(struct) should be passed to the template as its second parameter. A
concrete local context bf(struct) may be passed as either a tt(const) or
non-tt(const) reference or pointer to bf(FBB::Wrap1c)'s constructor. When
using a em(non-const) reference or pointer, the function may modify the
bf(struct)'s value fields identically to the situation in which the field's
values would have been passed to the function as reference parameters.
    itt(ReturnType): the bf(ReturnType) is tt(void) by default. By specifying
another type, the bf(FBB::Wrap1c) object's bf(operator()()) function will pass
the called function's return value as a value of the specified type. E.g, by
specifying a tt(bool) bf(ReturnType), the bf(FBB::Wrap1c) object may be
interpreted as a em(Unary Predicate)
    )

includefile(namespace.inc)

manpagesection(INHERITS FROM)
    -

manpagesection(CONSTRUCTORS)
    itemization(
    itb(Wrap1c<Type, Context [, ReturnType = void]>
            (ReturnType (*fun)(Type &, Context &), Context &context)) nl()
        This is an example of the form in which the class's constructurs may
be called. Each constructor expects two arguments: the address of a function to
call from within its bf(operator()()) member, and a local
context bf(struct) which is passed to the called function as its second
argument. 

    Both arguments that are passed to the function pointed to by tt(fun)
and the context struct itself may be passed as: nl()
    reference, nl()
    pointer,nl()
    const reference, or nl()
    const pointer. nl()
    (albeit that the restriction applies that the types of the
tt(context) constructor parameter and the function's tt(context) parameter
must be identical (e.g., both pointers or both const references)).

    Therefore, the class supports  16 different types of constructors. E.g.:

    itb(Wrap1c<Type, Context [, ReturnType = void]>
            (ReturnType (*fun)(Type &, Context const &), 
                                Context const &context)) nl()
    or
    itb(Wrap1c<Type, Context [, ReturnType = void]>
            (ReturnType (*fun)(Type *, Context &), Context &context)) nl()
    )

    When the function pointed to by tt(fun) is called from
bf(FBB::Wrap1c)bf(::operator()()), it receives the latter function's argument
as its first argument. The template parameter tt(Type) is the data type to
which iterators (as specified in, e.g., bf(std::for_each())) eventually point.

    Hint: In situations where no context other than the class tt(Class) to
which the class' (static) member function belongs must be used
`tt(Class &obj)' (or (const) pointer) can be specified 
as the context parameter (and tt(Class) itself as the context template
parameter), passing, e.g., tt(*this) as the context. The static member
function may then call any of its class member functions tt(member(Type
[const] [&,*])) as tt(obj.member(argument)).


manpagesection(OVERLOADED OPERATORS)

    In normal situations the following member functions will call the function
that's passed to bf(FBB::Wrap1c)'s constructor. See the example below.

    itemization(
    itb(ReturnType operator()(Type &param) const)
        This function is called by generic algorithms, receiving the
dereferenced iterator that is managed  by the generic algorithm as its
argument (so, the iterator points to modifiable tt(Type) objects). This
operator is used when the first parameter of the specified function pointer is
a reference parameter.
    itb(ReturnType operator()(Type const &param) const)
        This function is called by generic algorithms, receiving the
dereferenced iterator that is managed  by the generic algorithm as its
argument (so, the iterator points to immutable tt(Type) objects). This
operator is used when the first parameter of the specified function pointer is
a const reference parameter.
    itb(ReturnType operator()(Type *param) const)
        This function is called by generic algorithms, receiving the
dereferenced iterator that is managed by the generic algorithm as its argument
(so, the iterator points to pointers to modifiable tt(Type) objects). This
operator is used when the first parameter of the specified function pointer is
a pointer parameter.
    itb(ReturnType operator()(Type const *param) const)
        This function is called by generic algorithms, receiving the
dereferenced iterator that is managed by the generic algorithm as its argument
(so, the iterator points to pointers to immutable tt(Type) objects). This
operator is used when the first parameter of the specified function pointer is
a const pointer parameter.
    )

manpagesection(TYPEDEFS)

    The class defines two types, which are used by generic algorithms:
    itemization(
    itb(argument_type), a synonym for bf(Type);
    itb(result_type), a synonym for bf(ReturnType).
    )

manpagesection(EXAMPLES)
        verb(
    // inserting strings to a configurable stream, together with a 
    // order-number, until the first empty string is encountered,
    // using find_if():

    #include <iostream>
    #include <vector>
    #include <string>
    #include <algorithm>
    #include <bobcat/wrap1c>

    using namespace std;
    using namespace FBB;

    class Strings
    {
        vector<string> d_vs;

        public:
            Strings()
            {
                d_vs.push_back("one");
                d_vs.push_back("two");
                d_vs.push_back("");
                d_vs.push_back("three");
            }
                
            void display(ostream &out) const
            {
                SContext c = {1, out};
                find_if(d_vs.begin(), d_vs.end(),
                    Wrap1c<string, SContext, bool>
                         (&Strings::untilEmpty, c));
            }
    
        private:
            struct SContext
            {
                size_t nr;
                ostream &out;
            };

            static bool untilEmpty(string const &str, SContext &c)
            {
                if (str.empty())
                    return true;        // stop

                c.out << c.nr++ << " " << str << endl;
                return false;           // don't stop
            }
    };

    int main()
    {
        Strings s;
    
        s.display(cout);
    }
        )

manpagefiles()
    em(bobcat/wrap1c) - defines the class interface

manpageseealso()
    bf(bobcat)(7), bf(wrap1)(3bobcat), bf(wrap2)(3bobcat), 
    bf(wrap2c)(3bobcat)

manpagebugs()
    None Reported.

includefile(trailer.inc)
