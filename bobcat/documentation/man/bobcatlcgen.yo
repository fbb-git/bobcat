includefile(header.inc)

COMMENT(manpage, section, releasedate, archive, short name)
manpage(bobcatlcgen)(1)(_CurYrs_)(libbobcat1-dev__CurVers_-x.tar.gz)
                    (FBB::LC template class generator)

manpagename(bobcatlcgen)(Generator for the FBB::LC template class)

manpagesynopsis()
    bf(bobcatlcgen) nTypes [class-file]

manpagedescription()
    In the Bobcat header file tt(<bobcat/lc>) a template class is defined 
that can be used to define and declare a local context struct to be used with
the unary and binary argument context wrappers tt(FBB::FnWrap1c) and
tt(FBB::FnWrap2c). The tt(<bobcat/lc>) header file provides for local context
structs up to 10 template type parameters. 

    bf(bobcatlcgen) can be used locally to enlarge this default number
(reducing the maximum is also possible but in practice probably pointless). It
expects the maximum number of template type parameters for the tt(FBB::LC)
template class as defined in the newly generated header file.

The header file generated by bf(bobcatlcgen) can be used em(in lieu of) the
header file provided by the bobcat archive or (-dev) distribution.

manpagesection(EXAMPLE)
    Assume the following command was specified:
        verb(
    bobcatlcgen 5 local-lc
        )
    This generates the file `local-lc' in the current directory defining
tt(FBB::LC) for at most 5 template type parameters. The following file (e.g.,
main.cc) in the current directory will use tt(local-lc) rather than
tt(<bobcat/lc>): 
        verb(
    #include <iostream>
    #include <vector>
    #include <string>
    #include <algorithm>
    
    #include <bobcat/fnwrap1c>
    #include "local-lc"
    
    using namespace std;
    using namespace FBB;
    
    class Strings
    {
        typedef LC<size_t, ostream &> lc;
        vector<string> d_vs;
    
        public:
            Strings()
            {
                d_vs.push_back("one");
                d_vs.push_back("two");
                d_vs.push_back("");
                d_vs.push_back("three");
            }
    
            void display(ostream &out) const
            {
                lc c(1, out);
    
                find_if(d_vs.begin(), d_vs.end(),
                    FnWrap1c<string const &, lc &, bool>
                         (&Strings::untilEmpty, c));
            }
    
        private:
            static bool untilEmpty(string const &str, lc &c)
            {
                if (str.empty())
                    return true;        // stop
    
                c.f2 << c.f1++ << " " << str << endl;
    
                return false;           // don't stop
            }
    };
    
    int main()
    {
        Strings s;
    
        s.display(cout);
    }
            )
    When comparing the above example to the example provided in the
bf(lc)(3bobcat) man page note that the only difference is that here the header
file tt(local-lc) rather than tt(<bobcat/lc>) is included.

manpageseealso()
    bf(bobcat)(7), bf(fnwrap1c)(3bobcat), bf(fnwrap2c)(3bobcat), 
bf(lc)(3bobcat)

manpagebugs()
    None Reported.

includefile(trailer.inc)
