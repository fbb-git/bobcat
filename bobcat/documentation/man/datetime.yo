includefile(header.inc)

COMMENT(manpage, section, releasedate, archive, short name)
manpage(FBB::DateTime)(3bobcat)(_CurYrs_)(bobcat-dev__CurVers_-x.tar.gz)
                    (Date and Time)

manpagename(FBB::User)(Performs Date and Time Computations)

manpagesynopsis()
    bf(#include <bobcat/user>)nl()
REMOVE for plain template classes:
    Linking option: tt(-lbobcat) 


manpagedescription()
    This class allows the programmer to manipulate date and time
values. bf(FBB::DateTime) objects can be added to each other or subtracted from
each other, converting their sums to tt(UTC) values. It is also possible to
add or subtract seconds or bf(tm) structures to or from bf(FBB::DateTime)
objects. This operation keeps the current time zone (tt(UTC) or local).

includefile(namespace.inc)

manpagesection(INHERITS FROM)    
    -

manpagesection(ENUMS defined in DateTime)
    itemization(
    itb(DateTime::Combine)
        This enumeration has the following values:
        itemization(
        it() bf(ALL): require all of the specified bf(Mode) or 
                bf(SpecialMode) values to match;
        it() bf(ANY): require any match of the specified bf(Mode) or 
                bf(SpecialMode) values (one match suffices);
        )
     itb(DateTime::Month)
        This enumeration has the following values:
        itemization(
        it() bf(JANUARY),
        it() bf(FEBRUARY),
        it() bf(MARCH),
        it() bf(APRIL),
        it() bf(MAY),
        it() bf(JUNE),
        it() bf(JULY),
        it() bf(AUGUST),
        it() bf(SEPTEMBER),
        it() bf(OCTOBER),
        it() bf(NOVEMBER),
        it() bf(DECEMBER).
        )
    itb(DateTime::WeekDay)
        This enumeration has the following values:
        itemization(
        it() bf(SUNDAY),
        it() bf(MONDAY),
        it() bf(TUESDAY),
        it() bf(WEDNESDAY),
        it() bf(THIRSDAY),
        it() bf(FRIDAY),
        it() bf(SATURDAY).
        )
    itb(DateTime::TimeType)
        This enumeration has the following values:
        itemization(
        it() bf(LOCALTIME): the time is broken down  as the local time,
        it() bf(UTC): the time is broken down as Universal Time Coordinated.
        )
    itb(DateTime::TriVal)
        This enumeration has the following values, returned by the bf(dst())
member (see below): 
        itemization(
        it() bf(UNKNOWN), returned when no information about the Daylight
Saving Time is available,
        it() bf(NO), returned when Daylight Saving Time is active,
        it() bf(YES), returned when Daylight Saving Time is not active.
        )
    )

manpagesection(CONSTRUCTORS)
    itemization(
    itb(DateTime(TimeType type = LOCALTIME))
        The default constructor, initialized to the current date and time. The
default argument specifies that the conversion is performed to the machine's 
local time representation. Alternatively, tt(UTC) may be specified to
represent the time as a Universal Time Coordinated time. 
    itb(DateTime(time_t time, TimeType type = LOCALTIME))
        Initializes a bf(FBB::DateTime) object with information stored in the
provided tt(time_t) value. The second argument specifies that the conversion
is performed to the machine's local time representation. Alternatively,
tt(UTC) may be specified to represent the time as a Universal Time Coordinated
time.
    itb(DateTime(tm *tm, TimeType type = LOCALTIME))
        Initializes a bf(FBB::DateTime) object with information stored in the
provided tt(struct tm) value. The second argument specifies that the conversion
is performed to the machine's local time representation. Alternatively,
tt(UTC) may be specified to represent the time as a Universal Time Coordinated
time. The tt(struct tm) is defined as follows:
        verb(
    struct tm 
    {
        int tm_sec;     // seconds
        int tm_min;     // minutes
        int tm_hour;    // hours
        int tm_mday;    // day of the month
        int tm_mon;     // month
        int tm_year;    // year
        int tm_wday;    // day of the week
        int tm_yday;    // day in the year
        int tm_isdst;   // daylight saving time
    };
        )
    itb(DateTime(DateTime const &other))
        The standard copy constructor is available by default.
    )

manpagesection(OVERLOADED OPERATORS)
    itemization(
    itb(operator bool() const)
        Returns bf(true) if the time decomposition could be performed without
error. bf(FBB::DateTime) object use bf(localtime_r)(3) or bf(gmtime_r)(3)
functions to break down the tt(time_t) values into elements.  If the time
could not be broken down, the bf(error()) member returns the error number
(tt(errno)) associated with the error.
    itb(ostream &operator<<(ostream &str, FBB::DateTime) const &dt)
        Inserts a standard textual representation (without the trailing
newline), of the time represented in the bf(FBB::DateTime) object into the
indicated tt(ostream). If the time value was broken down as tt(LOCALTIME) it
is represented as local time, otherwise it's inserted as the Universal Time
Coordinated time.
    itb(DateTime operator-(DateTime const &left, DateTime const &right))
        Subtracts two bf(FBB::DateTime) objects, and returns their difference
in tt(UTC) format.
    itb(DateTime operator-(DateTime const &left, time_t seconds))
       Subtracts the number of seconds from the bf(FBB::DateTime) object,
keeping the current time format (tt(UTC) or localtime).
    itb(DateTime operator-(DateTime const &left, tm const &fields))
       Subtracts the fields stored in the bf(tm) struct from the
bf(FBB::DateTime) object, keeping the current time format (tt(UTC) or
localtime).
    itb(DateTime &operator-=(DateTime const &right))
       Subtracts the argument's time values from the current bf(FBB::DateTime)
object's time values, returning the difference in tt(UTC) format.
    itb(DateTime operator-=(time_t seconds))
       Subtracts the number of seconds from the bf(FBB::DateTime) object,
keeping the current time format (tt(UTC) or localtime).
    itb(DateTime operator+(tm const &fields))
       Adds the fields stored in the bf(tm) struct to the bf(FBB::DateTime)
object, keeping the current time format (tt(UTC) or localtime).
    itb(DateTime operator+(DateTime const &left, DateTime const &right))
        Adds two bf(FBB::DateTime) objects, and returns their difference in
tt(UTC) format.

    itb(DateTime operator+(DateTime const &left, time_t seconds))
       Adds the number of seconds to the bf(FBB::DateTime) object, keeping the
current time format (tt(UTC) or localtime).
    itb(DateTime operator+(DateTime const &left, tm const &fields))
       Adds the fields stored in the bf(tm) struct to the bf(FBB::DateTime)
object, keeping the current time format (tt(UTC) or localtime).
    itb(DateTime &operator+=(DateTime const &right))
       Adds the argument's time values to the current bf(FBB::DateTime)
object's time values, returning the difference in tt(UTC) format.
    itb(DateTime operator+=(time_t seconds))
       Adds the number of seconds to the bf(FBB::DateTime) object, keeping the
current time format (tt(UTC) or localtime).
    itb(DateTime operator+(tm const &fields))
       Adds the fields stored in the bf(tm) struct to the bf(FBB::DateTime)
object, keeping the current time format (tt(UTC) or localtime).
    )

manpagesection(MEMBER FUNCTIONS)
    itemization(
    itb(bool breakDown(TimeType type))
        Breaks up the tt(time_t) value stored in the bf(FBB::DateTime) object 
according to the specified time type. It returns tt(true) if the time could be
broken down, tt(false) otherwise. The member bf(error()) returns the
associated tt(errno) value.

    Except for following function bf(error()), the members will not return
meaningfull values if bf(operator bool()) returns tt(false). All members
returning a time-element do so according to the latest time-representation
(i.e., tt(LOCALTIME) or tt(UTC)). All members returning numerical values
use 0 as their lowest return values, except for the bf(...Nr()) members, which
start at 1.
    itb(unsigned error() const)
        Returns the tt(errno) value after the bf(FBB::DateTime) object
construction.  It can be interpreted by, e.g., bf(FBB::Errno).
    itb(unsigned hours() const)
        Returns the number of hours of the time stored in a bf(FBB::DateTime)
object (0-23).
    itb(unsigned minutes() const)
        Returns the number of minutes of the time stored in a bf(FBB::DateTime)
object (0-59).
    itb(Month month() const)
        Returns the tt(Month) value of the time stored in a bf(FBB::DateTime)
object.
    itb(unsigned monthDayNr() const)
        Returns the number of the day in the month of the time stored in a
bf(FBB::DateTime) object (1-31).
    itb(unsigned seconds() const)
        Returns the number of seconds of the time stored in a bf(FBB::DateTime)
object (0-59, but 60 and 61 may occur due to possible leap seconds).
    itb(time_t time() const)
        Returns the tt(time_t) values stored in the bf(FBB::DateTime) object
itself.
    itb(WeekDay weekday() const)
        Returns the tt(WeekDay) value of the time stored in a
bf(FBB::DateTime) object.
    itb(unsigned year() const)
        Returns the year element of the time stored in a bf(FBB::DateTime)
object.
    itb(unsigned yearDay() const)
        Returns the day within the year of the time stored in a
bf(FBB::DateTime) object. January 1 is returned as 0.
    itb(unsigned yearDayNr() const)
        Returns the day within the year of the time stored in a
bf(FBB::DateTime) object. January 1 is returned as 1.
    itb(FBB:DayTime::TriVal dst() const)
        Returns an indication of an active Daylight Saving Time (DST) state
for the (local) time represented in the bf(FBB::DateTime) object. When DST is
active, the local time is one hour later as compared to the situation where
DST is not active.
    )

manpagefiles()
    em(bobcat/datetime) defines the class interface.

manpageseealso()
        bf(bobcat)(7), bf(Errno)(3bobcat), bf(asctime_r)(3), 
        bf(gmtime_r)(3), bf(localtime_r)(3), bf(time)(2),
        bf(mktime)(3),

manpagebugs()
    No Reported Bugs.

includefile(trailer.inc)
