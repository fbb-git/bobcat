includefile(header.inc)

COMMENT(manpage, section, releasedate, archive, short name)
manpage(FBB::Table)(3bobcat)(_CurYrs_)(libbobcat1-dev__CurVers_-x.tar.gz)
                    (Construct text tables)

manpagename(FBB::Table)(Generates row- or column-wise filled tables from
information inserted into a std::ostream)

manpagesynopsis()
    bf(#include <bobcat/tablebuf>)nl()
    Linking option: tt(-lbobcat) 

manpagedescription()

    bf(FBB::Tablebuf) objects are bf(std::streambuf) objects that can be used
to create tables. The tables are filled either column-wise or row-wise. Many
of the table's characteristics may be fine-tuned by a separate
bf(FBB::TableSupport) object, described in a separate man-page
(bf(TableSupport)(3bobcat)). When no bf(FBB::TableSupport) object is used, a
plain row-wise or column-wise table is constructed which can be inserted into
a bf(std::ostream). Displaying a table (e.g., at the standard output stream)
involves the following steps:
    itemization(
    it() Optionally, a  tt(TableSupport) object is created;
    it() A tt(Tablebuf) object is created (maybe passing it a tt(TableSupport)
object); 
    it() The tt(Tablebuf) object is used to initialize a tt(std::ostream)
    it() The elements of the table are filled by inserting information into
that tt(std::ostream)
    it() The tt(Tablebuf) itself contains the formatted table and may itself
be inserted into a tt(std::ostream) like tt(std::cout).
    )

includefile(namespace.inc)

manpagesection(INHERITS FROM)
    bf(std::streambuf)

manpagesection(ENUMERATIONS)
    The following enumerations are defined in the class bf(FBB::Tablebuf).

    bf(enum FillDirection)nl()
    This enumeration has two values:
    itemization(
    itb(ROWWISE)
        When this value is specified at construction time, elements are added
row-wise to the table. I.e., the second element inserted into the bf(Table)
will be found in the second column of the first row.
    itb(COLUMNWISE)
        When this value is specified at construction time, elements are added
column-wise to the table. I.e., the second element will be found in the second
row of the first column.
    )

    bf(enum WidthType)nl()
    This enumeration holds two values:
    itemization(
    itb(COLUMNWIDTH)
        This value may be specified when the columns should be allowed
variable widths. In this case each column will be as wide as its widest
element. This is the default bf(WidthType) used by bf(Table) objects. 
    itb(EQUALWIDTH)
        This value may be specified when all the table's columns should have
equal width (i.e., equal to the width of the widest table element), 
    )

manpagesection(CONSTRUCTORS)
    itemization(
    itb(Tablebuf(size_t nColumns, Table::FillDirection direction,
            Table::WidthType widthType = Table::COLUMNWIDTH))
        This constructor expects the table's number of columns.  The number of
rows result from the combination of this parameter and the number of
elements that are inserted into the bf(TableBuf) object.  The bf(direction)
parameter specifies the way new elements will be added to the bf(TableBuf)
object: row-wise or column-wise. The tt(widthType) parameter is used
to specify the way the width of the table's columns is determined: each column
may either have its own width or all columns have equal widths.
    itb(Table(TableSupport &tableSupport, Table::FillDirection direction,
            Table::WidthType widthType = Table::COLUMNWIDTH))
        This constructor operates identically to the previous constructor, but
expects an additional reference to a bf(TableSupport) object. A
bf(TableSupport) object offers additional formatting features used by the
table to define elements like horizontal lines between rows, additional
separators between elements etc. Note that the bf(TableSupport) object is
passed as a non-const reference as the bf(TableBuf) object must be able to
manipulate its data.
    )
    The copy constructor is not available.

manpagesection(OVERLOADED OPERATORS)

    itemization(
    itb(std::ostream &operator<<(std::ostream &str, TableBuf &tablebuf))
        This operator inserts a bf(Table) into a tt(std::ostream) object. Note
that the tt(TableBuf) object inserted into tt(str) is a non-const object, as
the table may have to be completed by adding empty elements for missing ones.
    )
    The overloaded assignment operator is not available.

manpagesection(MEMBER FUNCTIONS)
    itemization(
    itb(void clear())
        This member clears the table. All existing elements are removed, and
the table is empty after this call.
    itb(size_t nRows())
        This member returns the currently available number of rows in the
table. Its value is only defined after calling bf(CHAR(d)ef()).
    itb(Table &setAlign(Align const &align))
        This member is used to specify the alignment of either a column or an
element of the bf(Table) object. The standard alignments tt(std::left,
std::right) and tt(std::internal) may be specified, but in addition the
alignment tt(FBB::center) may be used if elements should be centered into
their column. A construction like
        verb(tab.setAlign(Align(2, FBB::center)))
    requests centering of all elements in table column having index value 2
(i.e., the table's 3rd column), whereas a construction like
        verb(tab.setAlign(Align(2, 3, FBB::center)))
    requests centering of element [2][3]. It is the responsibility of the
programmer to ensure that such elements exist. By default, all elements are
right-aligned.
    itb(Table &CHAR(d)ef())
        This member may be used to `complete' a bf(Table) object to a full
rectangular object, for which all column widths and alignments have been
determined. It is implied by tt(operator<<(ostream, Table)). In
other situations it may be called explicitly to force the insertion of another
row in a table using tt(ROWWISE) insertions. With tt(COLUMNWISE) insertions
its working is complex, since new elements added to a tt(COLUMNWISE) filled
table will reshuffle its elements over the table's columns. 
    itb(setFieldSeparator(char fs))
        The default field separator is the `backspace' (tt(\b))
character. After inserting a field separator the next table element will be
defined. Inserting two field separators inserts an table empty element and
starts the definition of the next element. This field separator character can
be redefined by this function. The tt(setfs) manipulator (see below) can be
used to redefine the field separator character while inserting elements into
the tt(ostream) initialized with the tt(TableBuf). Calling
tt(setFieldSeparator) without argument disables the use of a field separator
character, and only leaves the use of the tt(fs) manipulator to switch to the
next field.
    itb(setRowSeparator(char rs))
        The default row separator is the newline character (tt(\n)).  After
inserting a row separator the next element to enter into the table will be the
leftmost element of the next row.  Inserting two row separators adds an empty
row to the table. The tt(setrs) manipulator (see below) can be used to
redefine the row separator character while inserting elements into the
tt(ostream) initialized with the tt(TableBuf).  Calling tt(setRowSeparator)
without argument disables the use of a row separator character, and only
leaves the use of the tt(rs) manipulator to switch to the next field.
    )

manpagesection(MANPULATORS)
    itemization(
    itb(Table &CHAR(d)ef(Table &table))
        This manipulator can be inserted into a a tt(TableBuf)'s wrapping
tt(ostream) to call the table's bf(CHAR(d)ef()) member.
    itb(FBB::fs)
        This manipulator can be inserted into a tt(TableBuf)'s wrapping 
tt(ostream) to switch to the next field of the table. It is an alternative to
using the field separator character.
    itb(FBB::rs)
        This manipulator can be inserted into a tt(TableBuf)'s wrapping 
tt(ostream) to switch to the next row of the table. It is an alternative to
using the row separator character.
    itb(FBB::setfs)
        This manipulator can be inserted into a tt(TableBuf)'s wrapping
tt(ostream) to disable the use of the field separator character. The tt(fs)
manipulator remains active. This manipulator does itself not perform a field
switch.
    itb(FBB::setfs(char ch))
        This manipulator can be inserted into a tt(TableBuf)'s wrapping
tt(ostream) to redefine the field separator character to tt(ch). This
manipulator does itself not perform a field switch.
    itb(FBB::setrs)
        This manipulator can be inserted into a tt(TableBuf)'s wrapping
tt(ostream) to disable the use of the row separator character. The tt(fs)
manipulator remains active. This manipulator does itself not perform a row
switch.
    itb(FBB::setrs(char ch))
        This manipulator can be inserted into a tt(TableBuf)'s wrapping
tt(ostream) to redefine the row separator character to tt(ch). This
manipulator does itself not perform a row switch.
    )

manpagesection(EXAMPLE)

    verbinclude(../../tablebuf/driver/driver.cc)

manpagefiles()
    em(bobcat/table) - defines the class interface;nl()

manpageseealso()
    bf(bobcat)(7), bf(align)(3bobcat), bf(manipulator)(3bobcat),
    bf(tablesupport)(3bobcat), bf(table)(3bobcat)
    
manpagebugs()
    Note that tt(CHAR(d)ef()) will reshuffle elements over the table's
columns when new elements are added to the table subsequent to calling
tt(CHAR(d)ef())

includefile(trailer.inc)

