includefile(header.inc)

COMMENT(manpage, section, releasedate, archive, short name)
manpage(FBB::Process)(3bobcat)(_CurYrs_)(libbobcat1-dev__CurVers_-x.tar.gz)
                    (Running Child Processes)

manpagename(FBB::Process)(Runs external programs)

manpagesynopsis()
    bf(#include <bobcat/process>)nl()
    Linking option: tt(-lbobcat) 

manpagedescription()
    The bf(FBB::Process) class offers an elaborate interface to external
programs and/or scripts from a bf(C++) program (so-called
em(child-processes)). The class offers a standard, stream-based interface to
the child process's standard input, standard output and standard error
streams.

    Objects of the bf(FBB::Process) class use the standard process-executing
functions, like bf(sh)(1) and members of the bf(execl)(1) family to
execute the child process, and allow em(shell-scripts) to be executed as
well. 

The standard input, output and error streams of executed child processes may
be accessed via their tt(Process) parent objects. Input expected by the child
process may be inserted into the tt(Process) object, output generated by the
child process may be extracted from the tt(Process) object. tt(Process)
objects will not be able to access these streams when child processes
themselves redirect their standard streams.

When using (output) redirection with the tt(USE_SHELL) path specification (see
below for the path and IOMode specifications) the tt(IGNORE_COUT IOMode) (and
possibly tt(IGNORE_CERR)) will normally be specified as well.

The same tt(Process) object may be used repeatedly to execute the same or
different child processes in sequence. If a previously started child process
is still active it will first be terminated. It is also possible (using the
tt(stop()) member) to end a child process explicitly.

Child programs may be defined by tt(Process)'s constructors. They are not
started by the constructor. To start a child process the tt(start()) or
assignment operators may be used.

Some child processes continue until their standard input streams are
exhausted. The tt(stop()) member is provided to close such streams.

The class tt(Process) is not intended for em(daemon) construction. To create a
daemon process the bf(FBB::Fork) class may be used.

Command line arguments passed to child processes may be surrounded by double
or single quotes. Arguments surrounded by double quotes will have their double
quotes removed, interpreting any escape-sequences that may have been used
within. Arguments surrounded by single quotes will have their single quotes
removed, accepting their contents unmodified.

Child processes may be allowed a certain amount of time (in seconds) to
complete. Alternatively, no time limit may be imposed upon child processes. On
the other hand: a child process will forcefully be terminated when its parent
tt(Process) object goes out of scope. Since tt(Process) inherits from
tt(FBB::Fork) it may use the latter class's member tt(waitForChild()) to
prevent premature termination of a child process.

includefile(namespace.inc)

manpagesection(INHERITS FROM)
    bf(FBB::Fork)(3bobcat) (private), nl()
    bf(FBB:IOStream)(3bobcat)

manpagesection(ENUMERATIONS)

    bf(enum Program):nl()
       This enumeration has the following values:
        itemization(
        itb(NO_PATH)
            This value indicates that the external program should be called as
        specified, without searching the elements in the tt(PATH) environment
        variable. 
        itb(USE_PATH)
            This value indicates that the tt(PATH) environment variable should
        be used to locate the external program to be executed.
        itb(USE_SHELL)
            This value indicates that the external program should be called as
        a command (using its tt(-c) option) to bf(/bin/sh). When
        (output) redirection is used with the specified command the
        tt(IGNORE_COUT IOMode) (and possibly the tt(IGNORE_CERR IOMode) as
        well) should be specified.
        )


    bf(enum IOMode):nl()
       The tt(IOMode) specification is used to define which of the standard
streams used by child processes are accessed through the tt(Process)
object. Sensible combinations may be formed using the tt(bit_or) operator.
This enumeration defines the following values:
        itemization(
        itb(CIN)
            This value indicates that information inserted into the
tt(Process) object should be forwared to its child process. If this is not
required then the tt(CIN) specification can be omitted.
        itb(CERR)
            This value indicates that information written by the child process
to its standard error stream should be accessible through the
tt(FBB::Process::cerr()) member. If this is not required then the tt(CERR)
specification can be omitted.
        itb(COUT)
            This value indicates that information extracted from the
tt(Process) object should be the information written by the child process to
its standard output stream.  If this is not required then the tt(COUT)
specification can be omitted.
        itb(IGNORE_ALL)
            This value indicates that the tt(Process) object will not extract
information from or insert information into the standard streams of its child
process. It is ignored if any other specification is provided as well.
        itb(IGNORE_CERR)
            This value indicates that information written by the child process
to its standard error stream should be sent to tt(/dev/null). This
specification is ignored when either bf(CERR) or bf(MERGE_COUT_CERR) is
specified.
        itb(IGNORE_COUT)
            This value indicates that information written by the child process
to its standard output stream should be sent to tt(/dev/null). This
specification is ignored when either bf(COUT) or bf(MERGE_COUT_CERR) is
specified.
        itb(MERGE_COUT_CERR)
            This value indicates that information extracted from the
tt(Process) object should be the information written by the child process to
its standard output or error streams. 
            )

manpagesection(TYPE)
    itemization(
    itb(IOMode)
        Combinations of values of the bf(enum IOMode) may be used as value of a
variable of this type. In functions expecting an bf(IOMode) argument the empty
set should not normally be specified. To specify multiple tt(IOMode) values
the tt(bit_or) operator should be used.
    )

manpagesection(CONSTRUCTORS)
    itemization(
    itb(Process(std::string const &cmd = "", IOMode mode = CIN | COUT | CERR))
       This constructor can also be used as default constructor. By default it
defines a tt(Process) object without setting a command and by default the
command's standard streams are accessible by the tt(Process) object.  The
string that is provided as its first argument may be the (initial part of the)
external program to run. If the command starts and ends with a em(back-tick)
(tt(`)) then the back-ticks are removed, and the resulting contents are
interpreted as the command that should be executed by the tt(start(Program))
member, using that member's default argument (see below). When a viable child
process is specified and started by the default tt(start()) member then there
is no time limit imposed on the child process. However, a child process can
always be terminated using the tt(stop()) member (see below).nl()
    bf(Note:) a child process is em(not) started automatically following the
object construction. To start the specified child process, a tt(start())
member must be called.
    itb(Process(size_t waitSeconds, std::string const &cmd = "", 
            IOMode mode = CIN | COUT | CERR))
       By default this constructor defines a tt(Process) object without
setting a command, while the command's standard streams are accessible via the
tt(Process) object.  The string that is provided as its second argument may be
the (initial part of the) external program to run. If the command starts and
ends with a em(back-tick) (tt(`)) then the back-ticks are removed, and the
resulting contents are interpreted as the command that should be executed by
the tt(start(Program)) member, using that member's default argument (see
below). The child process will be terminated automatically after running for
tt(waitSeconds) time-seconds. It can also be terminated using the tt(stop())
member (see below).nl()
    bf(Note:) a child process is em(not) started automatically following the
object construction. To start the specified child process, a tt(start())
member must be called.
    )
    The bf(FBB::Process) class does not offer a copy constructor.

manpagesection(OVERLOADED OPERATORS)

    itemization(
    itb(Process &operator<<(Type))
        This operator may be used to insert information into the child
process's standard input stream if tt(IOMode CIN) was specified. If tt(IOMode
CIN) was not specified the insertion is silently ignored. Note that
information em(inserted) into tt(Process) objects is em(extracted) by their
child processes. This operator accepts all types that can also be inserted
into an tt(std::ostream) object. It will fail if the child process has
terminated. It will produce unexpected results if called before starting or
after stopping a child process and if tt(IOMode CIN) was not specified.

    itb(Process &operator>>(Type))
        This operator may be used to extract information from the child
process's standard output stream or from both the standard output and standard
error streams. Information from both streams is extracted if tt(IOMode
MERGE_COUT_CERR) was specified. If tt(IOMode COUT) was specified the
information written by the child process to its standard output stream is
extracted. Note that information em(extracted) from tt(Process) objects is
em(inserted) into the child process's standard streams. This operator accepts
all types that can also be extracted from an tt(std::istream) object. It will
fail if the child process has terminated. It will produce unexpected results
if called before starting or after stopping a child process and if tt(IOMode
COUT) or tt(MERGE_COUT_CERR) was not specified.

    itb(Process &operator+=(std::string const &))
       This operator adds the provided tt(std::string) object to the command
already stored in a tt(Process) object.  This member does not add a separating
blank space between its argument and information that may already have been
inserted; it merely adds its right-hand side string to the command stored so
far. It has no effect on a started child process and should be used before
calling tt(start()) or tt(operator=()) or after calling tt(stop()) (see
below). 

    itb(Process &operator()(iomode mode))
        This operator changes the currently used tt(IOMode). It returns the 
tt(Process) object allowing constructions like 
        verb(
    process(CIN | COUT) = "/bin/cat"; 
        )
    to start a new child process with the specified tt(IOMode). 

    itb(Process &operator()(size_t waitSeconds, iomode mode))
        This operator changes the maximum time to run and tt(IOMode) of the
next child process. No maximum time is imposed when tt(waitSeconds) is set to
0. 

    itb(int operator=(std::string const &))
       The tt(operator=()) member (re)defines the command currently stored in
an tt(Process) object.  If the command starts and ends with a em(back-tick)
(tt(`)) then the back-ticks are removed, and the resulting contents are
interpreted as a command to execute.nl()
    This operator first calls tt(stop()) (see below). Then the new command is
started by the tt(start()) member. It returns tt(stop())'s return value.
       )

    The default overloaded assignment operator is not available.

manpagesection(MEMBERS)

    itemization(
    itb(int available())
        This member returns immediately. Its return value indicates whether
any information can be obtained from the child process. 0 is returned if no
information is ready for extraction. 1 is returned if information from the
child process's standard output stream is available; 2 is returned if
information from the child process's standard error stream is available; 3 is
returned if information from both the standard output stream and the standard
error stream is available.

    itb(std::istream &cerr())
        This member may be used to extract the information written by the
child process to its standard error stream. It can only be used when
bf(IOMode) tt(CERR) was specified.

    itb(void close())
        This member may be called from the parent process to close the child's
input stream. In situations where the child continuously reads information
from its standard input stream this member must be used to inform the child
process that input has terminated.

    itb(void setCommand(std::string const &cmd))
       The tt(setCommand()) member (re)defines the command currently stored in
an tt(Process) object.  If the command starts and ends with a em(back-tick)
(tt(`)) then the back-ticks are removed, and the resulting contents are
interpreted as a command to be executed next by the tt(start(Program))
member. This member will em(not) start the specified command and
tt(operator+=()) may be used following tt(setCommand()). It can be used to set
another command using the currently set tt(IOMode) and tt(Program) settings
using the following scheme:
            verb(
    Process process("some command", iomode-setting);
    process.start();

    process.setCommand("another command");
        // using the previously set IOMode and Program 
        // settings

    process.start();    // stops `some command' as well
       )

    itb(void setWait(size_t waitSeconds = 0))
        Redefine the maximum execution time of a program. This command can be
used when a command is redefined by, e.g., tt(setCommand()) to reduce or
extend its maximum allowed execution time. It should be used before calling
tt(operator=(), start()) or tt(system()) (note that one of the overloaded
versions of tt(start()) also allows the respecification of the maximum
execution time). No time limit is imposed on the next process if
tt(waitSeconds) is specified as 0 (the default argument value).

    itb(int start(Program program = NO_PATH))
        The currently specified command is executed using bf(system)(3) or a
member of the bf(execl)(3) family. Before starting the child process, all
redirections are set according to the current bf(IOMode) specification. The
tt(IOMode) may be set or modified by the constructor, by tt(start())'s
overloaded version (see below), by the function call operator or by the
tt(system()) member (see below).  By default the tt(PATH) environment variable
is em(not) used to find the program to execute. If it is considered safe to
use the tt(PATH) environment variable, tt(USE_PATH) may be specified. The
first white-space delimited element of the defined command is used as the name
of the program to execute. If the program should be called as a command to be
executed by bf(sh)(1), specify tt(USE_SHELL). If tt(USE_SHELL) is specified,
the defined command is passed as argument to the bf(system)(3) member (see
below).nl()
        When the tt(Process) object goes out of scope, when its tt(start()) or
tt(stop()) members are called or when its assignment operator is used the
child process is terminated.

    itb(int start(IOMode mode, Program program = NO_PATH))
        Before transferring control to the above tt(start()) member, the
bf(IOMode) is set to tt(mode). Having set bf(IOMode), the child process is
started according to the procedure described with the former tt(start())
member.
    itb(int start(size_t waitSeconds, IOMode mode, 
                  Program program = NO_PATH))
        Before transferring control to the first tt(start()) member, the
bf(IOMode) is set to tt(mode). Having set bf(IOMode), the child process is
started according to the procedure described with the former tt(start())
member. However, when the tt(Process) object goes out of scope or when
its tt(stop()) member is called, the child is given tt(waitSeconds) seconds to
terminate. If the child didn't terminate within one second, it is twice sent a
tt(SIG_TERM) signal, followed by a tt(SIG_KILL) signal.
    itb(int stop())
       This member closes the connections to the child's input, output and
error streams (if any) and erases the contents of a tt(Process) object's
command buffer. Next it will wait for at most one second or for the number of
seconds specified at the tt(Process) object's construction (or as
specified when its tt(start()) member was called) allowing the child to
complete. If the child didn't terminate within one second, it is twice sent a
tt(SIG_TERM) signal, followed by a tt(SIG_KILL) signal.  This member's return
value is the exit-value of the child process that was stopped. It is
underfined if it was called without a running child process. nl()
    Following tt(stop()) a new command may be called using the overloaded
assignment operator (see earlier). The member tt(stop()) is also called when
the tt(Process) object goes out of scope.
    itb(std::string const &str() const)
        This member returns the text of the command currently stored in the
tt(Process) object. It shows the command as it will be executed by tt(start())
or tt(system()).
    itb(void system())
        This member executes the stored command using the bf(system)(3) system
call (therefore executing the command as a shell command).  When using
bf(system) redirections can be included in the command itself (although this
might undo the previously set bf(IOMode)). Calling tt(system()) implies
calling tt(start()).
    itb(void system(IOMode mode))
        This member sets a new bf(IOMode) set, and then executes the stored
command using the bf(system)(3) system call (therefore executing the command
as a shell command).  When using bf(system) redirections can be included in
the command itself (although this might undo the just set bf(IOMode)).
    itb(int wait())
        This member waits for information written by the child process to its
standard output or error streams.  1 is returned if information from the child
process' standard output stream is available; 2 is returned if information
from the child process' standard error stream is available (unless
tt(MERGE_CIN_COUT) was specified, in which case both the standard output and
the standard error streams are merged to the standard output stream); 3 is
returned if information from both the standard output stream and the standard
error stream is available.
    itb(int wait(size_t sec, size_t msec = 0))
        This member waits at most tt(sec) seconds plus tt(msec) milliseconds
for information written by the child process to its standard output or error
streams. 0 is returned if, following the delay, no information is ready for
extraction.  1 is returned if information from the child process' standard
output stream is available; 2 is returned if information from the child
process' standard error stream is available (unless tt(MERGE_CIN_COUT) was
specified, in which case both the standard output and the standard error
streams are merged to the standard output stream); 3 is returned if
information from both the standard output stream and the standard error stream
is available.
    )

manpagesection(EXAMPLE)
        verb(
#include <iostream>
#include <string>
#include <bobcat/process>

using namespace std;
using namespace FBB;

int main()
{
    string line;
                                        // setup a command
    Process process("/usr/bin/sha1sum -", Process::CIN |
                                Process::COUT |
                                Process::IGNORE_CERR);

    process.start();                    // start it

    process << "hello world" << endl;   // insert this text
    process.close();

    getline(process, line);             // read its `cat' output
    cout << line << endl;               // show it

    process = "`/bin/ls`";              // stop the existing command,
                                        // start another command
                                        // (assignment implies
                                        // `stop()')

    while (getline(process, line))      // read all its output
        cout << line << endl;

    cout << process.stop() << endl;     // show the process' exit
                                        // value

    process = "/bin/ls -Fla /usr/bin > out";
    process.system();
    process.wait();

    return 0;
}
        )

manpagefiles()
    em(bobcat/process) - defines the class interface

manpageseealso()
    bf(bobcat)(7), bf(execle)(3), bf(fork)(3bobcat), bf(iostream)(3fork),
    bf(system)(3), bf(sh)(1)

manpagebugs()
    With the release of Bobcat 1.21.1 the tt(Process) class was greatly
modified. The new implementation, however, should not affect existing programs
other than that by default tt(Process) uses an indefinite time-to-live for
child processes. The interface was enlarged, but this should not affect
existing programs. The internal organization of the tt(Process) class em(has)
changed, requiring recompilation of sources defining tt(Process) class type
objects. 

includefile(trailer.inc)
