includefile(header.inc)

COMMENT(manpage, section, releasedate, archive, short name)
manpage(FBB::Process)(3bobcat)(_CurYrs_)(libbobcat1-dev__CurVers_-x.tar.gz)
                    (Running Child Processes)

manpagename(FBB::Process)(Runs external programs)

manpagesynopsis()
    bf(#include <bobcat/process>)nl()
    Linking option: tt(-lbobcat) 

manpagedescription()
    The bf(FBB::Process) class offers an elaborate interface to external
programs and/or scripts from a bf(C++) program (so-called
em(child-processes)). The class offers an easy to use, stream-based interface
to the child process's standard input, standard output and standard error
streams.

    Objects of the bf(FBB::Process) class use standard process-executing
functions, like bf(sh)(1) and members of the bf(execl)(1) family to execute
the child process, and allow em(shell-scripts) to be executed as well.

The standard input, output and error streams of executed child processes may
be accessed via their tt(Process) parent objects. Input expected by the child
process may be inserted into the tt(Process) object, output generated by the
child process may be extracted from the tt(Process) object. tt(Process)
objects will not be able to access these streams when child processes
themselves redirect their standard streams.

When using (output) redirection with the tt(USE_SHELL) path specification (see
below for the path and IOMode specifications) the tt(IGNORE_COUT IOMode) (and
possibly tt(IGNORE_CERR)) will normally be specified as well.

The same tt(Process) object may be used repeatedly to execute the same or
different child processes in sequence. If a previously started child process
is still active it will first be terminated. It is also possible (using the
tt(stop()) member) to end a child process explicitly.

Programs to call as child processes may be specified using tt(Process)'s
constructors. They are not started by the constructor. To start a child
process the tt(start()) members or the assignment operator may be used.

Some child processes continue until their standard input streams are
exhausted. The tt(close()) member is provided to close such streams.

The class tt(Process) should not be used to construct em(daemon)s. To create 
daemon processes the bf(FBB::Fork) class can be used.

Command line arguments passed to child processes may be surrounded by double
or single quotes. Arguments surrounded by double quotes will have their double
quotes removed, interpreting any escape-sequences that may have been used
within. Arguments surrounded by single quotes will have their single quotes
removed, accepting their contents unmodified.

Child processes may be allowed a limited amount of time (in seconds) to
complete. Alternatively, child processes may have no time limit imposed upon
then. A child process will forcefully be terminated when its parent
tt(Process) object goes out of scope. Since tt(Process) inherits from
tt(FBB::Fork) it may use the latter class's member tt(waitForChild()) to
prevent premature termination of a child process.

includefile(namespace.inc)

manpagesection(INHERITS FROM)
    bf(FBB::Fork)(3bobcat) (private), nl()
    bf(FBB:IOStream)(3bobcat)

manpagesection(ENUMERATIONS)

    bf(enum ProcessType):nl()
       This enumeration has the following values:
        itemization(
        itb(NO_PATH)
            This value indicates that the external program should be called as
        specified, without searching the elements in the tt(PATH) environment
        variable. 
        itb(USE_PATH)
            This value indicates that the tt(PATH) environment variable should
        be used to locate the external program to be executed.
        itb(USE_SHELL)
            This value indicates that the external program should be called as
        a command (using its tt(-c) option) to bf(/bin/sh). When
        (output) redirection is used with the specified command the
        tt(IGNORE_COUT IOMode) (and possibly the tt(IGNORE_CERR IOMode) as
        well) should be specified.
        )


    bf(enum IOMode):nl()
       The tt(IOMode) specification is used to define which of the standard
streams used by child processes are accessed through the tt(Process)
object. Sensible combinations may be formed using the tt(bit_or) operator.
This enumeration defines the following values:
        itemization(
        itb(CIN)
            This value indicates that information inserted into the
tt(Process) object should be forwared to its child process. If this is not
required then the tt(CIN) specification can be omitted.
        itb(CERR)
            This value indicates that information written by the child process
to its standard error stream should be accessible through the
tt(FBB::Process::cerr()) member. If this is not required then the tt(CERR)
specification can be omitted.
        itb(COUT)
            This value indicates that information extracted from the
tt(Process) object should be the information written by the child process to
its standard output stream.  If this is not required then the tt(COUT)
specification can be omitted.
        itb(IGNORE_ALL)
            This value indicates that the tt(Process) object will not extract
information from or insert information into the standard streams of its child
process. It is ignored if any other specification is provided as well.
        itb(IGNORE_CERR)
            This value indicates that information written by the child process
to its standard error stream should be sent to tt(/dev/null). This
specification is ignored when either bf(CERR) or bf(MERGE_COUT_CERR) is
specified.
        itb(IGNORE_COUT)
            This value indicates that information written by the child process
to its standard output stream should be sent to tt(/dev/null). This
specification is ignored when either bf(COUT) or bf(MERGE_COUT_CERR) is
specified.
        itb(MERGE_COUT_CERR)
            This value indicates that information extracted from the
tt(Process) object should be the information written by the child process to
its standard output or error streams. 
            )

    bf(enum ChildOutput):nl()
       The tt(ChildOutput) enumeration defines values returned by the
tt(available()) member (see below) indicating to which standard stream the
child process has written information.  This enumeration defines the following
values:
        itemization(
        itb(NOTHING_AVAILABLE)
    This value indicates that the child process did not (yet) write any
information to its standard streams;
        itb(CHILD_OUTPUT)
    This value indicates that the child process did write 
information to its standard output stream;
        itb(CHILD_ERROR)
    This value indicates that the child process did write 
information to its standard error stream;
        )
    The latter two values may be combined using the tt(bit_or) operator
indicating that information on both standard streams is available. 

manpagesection(TYPE)
    itemization(
    itb(IOMode)
        Combinations of values of the bf(enum IOMode) may be used as value of a
variable of this type. In functions expecting an bf(IOMode) argument the empty
set should not normally be specified. To specify multiple tt(IOMode) values
the tt(bit_or) operator should be used.
    )

manpagesection(PROCESS PARAMETERS)
    
When running a child process three process parameters may be specified: the
child streams to access from the tt(Process) object (as an bf(IOMode) value);
the way to locate or start the child program (as a bf(ProcessType) value); and
the maximum time (in seconds) the child program is allowed to run. Unless
specified otherwise, all the child's standard streams (standard input, output
and error) will be accessible from the tt(Parent) process; the tt(PATH)
environment variable will em(not) be used to locate the child program to be
executed (often resulting in the requirement to provide an absolute path to
the intended program) and the child processes will be allowed unlimited time
to run. Following the construction of a tt(Process) object all default
parameter values may be modified. Parameters may be altered by modifying the
general defaults or by modifying the values on a temporary basis (i.e., for a
single child process).

manpagesection(CONSTRUCTORS)
    The command that may be provided to the following constructors may be the
(initial part of the) specification of an external program to run. When the
program is eventually started it may start and ends with a em(back-tick)
(tt(`)). The back-ticks will be removed just before the specified program is
executed.

    A child process is em(not) started automatically following the object
construction. A tt(start()) member or the assignment operator (see below) can
be used to start the specified child process.

    itemization(
    itb(Process(std::string const &cmd = ""))
       This constructor can also be used as default constructor. It can be
used to specify the (initial part of a) command to execute from a
tt(Process) object. Standard default values are used for the process
parameters (see section bf(PROCESS PARAMETERS)).

    itb(Process(IOMode mode, std::string const &cmd = ""))
        This constructor requires the specification of the object's initial
default bf(IOMode) setting and it can be used to specify the (initial part of
a) command to execute from a tt(Process) object. Standard default values
are used for the remaining two process parameters ((tt(NO_PATH)) and no time
limit imposed on the child process).

    itb(Process(IOMode mode, ProcessType type, std::string const &cmd = ""))
        This constructor requires the specification of the object's initial
default bf(IOMode) setting and tt(ProcessType) and it can be used to specify
the (initial part of a) command to execute from a tt(Process) object. By
default no time limit will be imposed upon the child process.

    itb(Process(IOMode mode, ProcessType type, size_t timeLimit, 
std::string const &cmd = ""))
        This constructor requires the specification of the object's initial
default bf(IOMode) setting, tt(ProcessType) and time limit imposed upon child
processes it can be used to specify the (initial part of a) command to execute
from a tt(Process) object. To prevent a time limit from being imposed upon the
child process specify a time limit of 0 (zero).

    )
    The class bf(Process) does not offer a copy constructor.

manpagesection(OVERLOADED OPERATORS)

TO DO BELOW

    itemization(
    itb(Process &operator<<(Type))
        This operator may be used to insert information into the child
process's standard input stream if tt(IOMode CIN) was specified. If tt(IOMode
CIN) was not specified the insertion is silently ignored. Note that
information em(inserted) into tt(Process) objects is em(extracted) by their
child processes. This operator accepts all types that can also be inserted
into an tt(std::ostream) object. It will fail if the child process has
terminated. It will produce unexpected results if called before starting or
after stopping a child process and if tt(IOMode CIN) was not specified.

    itb(Process &operator>>(Type))
        This operator may be used to extract information from the child
process's standard output stream or from both the standard output and standard
error streams. Information from both streams is extracted if tt(IOMode
MERGE_COUT_CERR) was specified. If tt(IOMode COUT) was specified the
information written by the child process to its standard output stream is
extracted. Note that information em(extracted) from tt(Process) objects is
em(inserted) into the child process's standard streams. This operator accepts
all types that can also be extracted from an tt(std::istream) object. It will
fail if the child process has terminated. It will produce unexpected results
if called before starting or after stopping a child process and if tt(IOMode
COUT) or tt(MERGE_COUT_CERR) was not specified.


TO DO ABOVE


    itb(Process &operator+=(std::string const &))
       This operator adds the provided tt(std::string) object to the command
specification currenly stored in a tt(Process) object. The currently stored
command specification may be redefined using the member tt(setCommand()) (see
below).  The member tt(operator+=()) does not add a separating blank space
between the currently stored command specification and the text to append.  It
merely adds its right-hand side string to the command stored so far. It does
not affect a currently running  child process.

TO DO BELOW

    itb(Process &operator()(iomode mode))
        This operator changes the currently used tt(IOMode). It returns the 
tt(Process) object allowing constructions like 
        verb(
    process(CIN | COUT) = "/bin/cat"; 
        )
    to start a new child process with the specified tt(IOMode). 

    itb(Process &operator()(size_t timeLimit, iomode mode))
        This operator changes the maximum time to run and tt(IOMode) of the
next child process. No maximum time is imposed when tt(timeLimit) is set to
0. 

    itb(int operator=(std::string const &))
       The tt(operator=()) member (re)defines the command currently stored in
an tt(Process) object.  If the command starts and ends with a em(back-tick)
(tt(`)) then the back-ticks are removed, and the resulting contents are
interpreted as a command to execute.nl()
    This operator first calls tt(stop()) (see below). Then the new command is
started by the tt(start()) member. It returns tt(stop())'s return value.

TO DO ABOVE

       )

    The default overloaded assignment operator is not available.

manpagesection(MEMBERS)

    itemization(
    itb(int available())
        This member returns immediately. Its return value indicates whether
any information can be obtained from the child process. 0 is returned if no
information is ready for extraction. 1 is returned if information from the
child process's standard output stream is available; 2 is returned if
information from the child process's standard error stream is available; 3 is
returned if information from both the standard output stream and the standard
error stream is available.

    itb(std::istream &cerr())
        This member may be used to extract the information written by the
child process to its standard error stream. It can only be used when
bf(IOMode) tt(CERR) was specified.

    itb(void close())
        This member may be called from the parent process to close the child's
input stream. In situations where the child continuously reads information
from its standard input stream this member must be used to inform the child
process that input has terminated.

    itb(void setCommand(std::string const &cmd))
       The tt(setCommand()) member (re)defines the (initial part of a) command
specification currently stored in an tt(Process) object. When the program is
eventually started it may start and ends with a em(back-tick) (tt(`)). The
back-ticks will be removed just before the specified program is executed.

    The tt(setCommand()) member will em(not) start the specified command and
tt(operator+=()) may be used to append the command specification before the
command is eventually executed. Also, this member does not affect a currently
running child process.

    itb(int start())
        The currently specified command is executed using the currently active
process parameters. These process parameters may be modified (either as new
defaults or for the next process only) using overloaded tt(start()) members,
the tt(system()) members, function call operator or various tt(set-)members.

    Having specified a command to execute, the first white-space delimited
element of the specified command is used as the name of the program to
execute. If the program should be called as a command to be executed by
bf(sh)(1), the  tt(USE_SHELL ProcessType) or a tt(system()) member 
should be used. 

    If a child process does not terminate by itself (within its allotted
amount of time) it is terminated when it has run for its alloted time; when
the tt(Process) object's tt(start()) or tt(stop()) members are called; when
the object's assignment operator is used; or when the object goes out of
scope;

    itb(int start(IOMode mode))
       The currently specified command is executed using the specified
tt(IOMode) rather than the currently specified default but otherwise using the
currently specified default process parameters. The specified tt(IOMode) will
only be used for the process executed by this tt(start()) member.

    itb(int start(IOMode mode, Program program))
       The currently specified command is executed using the specified
tt(IOMode) and tt(ProcessType) as well as the currently specified child
process time limit. The specified arguments will only be used for the process
executed by this tt(start()) member.

    itb(int start(IOMode mode, Program program, size_t timeLimit))
       The currently specified command is executed using the specified
arguments for the process parameters. The specified arguments will only be
used for the process executed by this tt(start()) member.

TO DO BELOW

    itb(int stop())
       This member closes the connections to the child's input, output and
error streams (if any) and erases the contents of a tt(Process) object's
command buffer. Next it will wait for at most one second or for the number of
seconds specified at the tt(Process) object's construction (or as
specified when its tt(start()) member was called) allowing the child to
complete. If the child didn't terminate within one second, it is twice sent a
tt(SIG_TERM) signal, followed by a tt(SIG_KILL) signal.  This member's return
value is the exit-value of the child process that was stopped. It is
underfined if it was called without a running child process. nl()
    Following tt(stop()) a new command may be called using the overloaded
assignment operator (see earlier). The member tt(stop()) is also called when
the tt(Process) object goes out of scope.
    itb(std::string const &str() const)
        This member returns the text of the command currently stored in the
tt(Process) object. It shows the command as it will be executed by tt(start())
or tt(system()).
    itb(void system())
        This member executes the stored command using the bf(system)(3) system
call (therefore executing the command as a shell command).  When using
bf(system) redirections can be included in the command itself (although this
might undo the previously set bf(IOMode)). Calling tt(system()) implies
calling tt(start()).
    itb(void system(IOMode mode))
        This member sets a new bf(IOMode) set, and then executes the stored
command using the bf(system)(3) system call (therefore executing the command
as a shell command).  When using bf(system) redirections can be included in
the command itself (although this might undo the just set bf(IOMode)).

TO DO ABOVE
    )

manpagesection(EXAMPLE)
        verb(
        )

manpagefiles()
    em(bobcat/process) - defines the class interface

manpageseealso()
    bf(bobcat)(7), bf(execle)(3), bf(fork)(3bobcat), bf(iostream)(3fork),
    bf(system)(3), bf(sh)(1)

manpagebugs()
    With the release of Bobcat 1.21.1 the tt(Process) class was completely
rewritten and thoroughly altered. The new implementation, however, should not
affect existing programs other than that by default tt(Process) does not
impose a limited time-to-live upon child processes. The interface was
enlarged, but this should not affect existing programs. The internal
organization of the tt(Process) class em(has) changed, requiring recompilation
of sources defining tt(Process) class type objects.

    The enumeration tt(enum Program) defined in earlier releases is now 
replaced by tt(ProcessType). Both enumerations can be used interchangedly, but
the tt(enum Program) will be removed in a future Bobcat release and should be
considered obsolete.

    The constructors tt(Process(std::string const &cmd, IOMode mode)) and
tt(Process(size_t timeLimit, std::string const &cmd, IOMode mode)) are now
deprecated and will be removed in a future release.

    The members tt(wait()) and tt(void setWait(size_t timeLimit)) are now
deprecated (and actually defunct). They will be removed in a future release.

    The members tt(int start(Program program)) and tt(int start(size_t
timeLimit, IOMode mode, Program program)) were withdrawn from tt(Process)'s
interface. Their functionality is now provided by other overloaded tt(start())
members.

includefile(trailer.inc)


