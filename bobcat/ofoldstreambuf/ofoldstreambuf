#ifndef INCLUDED_BOBCAT_OFOLDSTREAMBUF_
#define INCLUDED_BOBCAT_OFOLDSTREAMBUF_

#include <iostream>
#include <string>

#include "../ofilterstreambuf/ofilterstreambuf"

namespace FBB
{

class lm
{
    size_t d_value;
    
    public:
        lm(size_t value);
        std::ostream &modify(std::ostream &out) const;
};

class mlm
{
    int d_value;
    
    public:
        mlm(int value);
        std::ostream &modify(std::ostream &out) const;
};

struct OFoldStreambufBlanks
{
    enum TrailingBlanks
    {
        IGNORE_TRAILING_BLANKS,
        HANDLE_TRAILING_BLANKS
    };
};
    
    // 'virtual public OFoldStreambufBlanks is used to avoid 'base class not
    // accessible' warnings when classes inherit from OFoldStreambuf like
    // OFoldStream. 
class OFoldStreambuf: virtual public OFoldStreambufBlanks, 
                      public OFilterStreambuf
{
    friend std::ostream &lm::modify(std::ostream &) const;
    friend std::ostream &mlm::modify(std::ostream &) const;

    enum Mode
    {
        INDENT,
        WS,
        NON_WS
    };

    std::string d_nonWs;
    std::string d_ws;

    size_t d_rightMargin;
    size_t d_indent;
    bool d_reqIndent;

    size_t d_wsLength;
    size_t d_next;

    Mode d_mode;

    bool d_handleTrailingBlanks;

    public:
        OFoldStreambuf(
                   size_t leftIndent = 0, size_t rightMargin = 80,
                   TrailingBlanks tb = IGNORE_TRAILING_BLANKS);

        OFoldStreambuf(char const *fname,
                   size_t leftIndent = 0, size_t rightMargin = 80,
                   TrailingBlanks tb = IGNORE_TRAILING_BLANKS);

        OFoldStreambuf(std::ostream &stream,
                   size_t leftIndent = 0, size_t rightMargin = 80,
                   TrailingBlanks tb = IGNORE_TRAILING_BLANKS);

        ~OFoldStreambuf();

        void setMargins(size_t leftMargin, size_t rightMargin);
        void setTrailingBlanks(TrailingBlanks tb);

    protected:
        virtual int sync();
        virtual int overflow(int c);

    private:
        void indent(int c);
        void ws(int c);
        void nonWs(int c);

        size_t length() const;

        void newline();
        void addNonWs(int c);
        void addWs(int c);
        void indent();
        void flush();
        void clearWs();

        void modifyIndent(int delta);
        void setIndent(size_t value);

        void writeWs() const;
        void writeNonWs() const;
        void put(int ch) const;
};

inline void OFoldStreambuf::setIndent(size_t value)
{
    d_indent = value;
}

inline void OFoldStreambuf::setTrailingBlanks(TrailingBlanks tb)
{
    d_handleTrailingBlanks =  tb ==  HANDLE_TRAILING_BLANKS;
}

inline void OFoldStreambuf::writeWs() const
{
    out().write(d_ws.data(), d_ws.length());
}

inline void OFoldStreambuf::put(int ch) const
{
    out().put(ch);
}

inline void OFoldStreambuf::writeNonWs() const
{
    out().write(d_nonWs.data(), d_nonWs.length());
}

inline void OFoldStreambuf::addNonWs(int c)
{
    d_nonWs += c;
}

inline lm::lm(size_t value)
:
    d_value(value)
{}

inline std::ostream &lm::modify(std::ostream &out) const
{
    dynamic_cast<OFoldStreambuf &>(*out.rdbuf()).setIndent(d_value);
    return out;
}        

inline mlm::mlm(int value)
:
    d_value(value)
{}

inline std::ostream &mlm::modify(std::ostream &out) const
{
    dynamic_cast<OFoldStreambuf &>(*out.rdbuf()).modifyIndent(d_value);
    return out;
}        

} // FBB

namespace std
{
    inline ostream &operator<<(ostream &out, FBB::lm const &idt)
    {
        return idt.modify(out);
    }
    inline ostream &operator<<(ostream &out, FBB::mlm const &idt)
    {
        return idt.modify(out);
    }
}
        
#endif

