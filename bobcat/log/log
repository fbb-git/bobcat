#ifndef _INCLUDED_BOBCAT_LOG_
#define _INCLUDED_BOBCAT_LOG_

#include <iosfwd>
#include <ostream>
#include <fstream>
#include <climits>
#include <bobcat/logbuffer>

namespace FBB
{
    enum StaticType
    {
        NONSTATIC,
        STATIC
    };

    enum LogManipulator
    {
        FATAL,
        nl,
    };

    class Log: private LogBuffer, public std::ostream
    {
        private:
            static Log *s_stream;

            std::ofstream d_stream;
            unsigned d_level;
            unsigned d_activeLevel;

        public:
            static Log &getInstance();

            Log(StaticType type = NONSTATIC, char const *delim = " ");
            Log(std::ostream &out,  StaticType type = NONSTATIC, 
                char const *delim = " ");
            Log::Log(std::string const &filename, 
                    StaticType type = NONSTATIC,
                    std::ios::openmode = std::ios::out | std::ios::app, 
                    char const *delim = " ");
            ~Log();

            std::ostream &level(unsigned useLevel);
            void  setLevel(unsigned newLevel);
            void  setTimestamp(TimeStamps timeStamp, char const *delim = " ");
            void  off()
            {
                setActive(false);
            }

        private:
            void init(StaticType type);
    };

}

std::ostream &operator<<(std::ostream &str, FBB::LogManipulator);
        
#endif
