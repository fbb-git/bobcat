#ifndef INCLUDED_BOBCAT_FOLDSTREAM_
#define INCLUDED_BOBCAT_FOLDSTREAM_

#include <ostream>
#include <fstream>

#include <bobcat/foldstreambuf>

namespace FBB
{

class FoldStream: public std::ostream, private FoldStreambuf
{
    public:
        FoldStream();
        FoldStream(char const *fname, 
                    size_t leftIndent = 0, size_t rightMargin = 80,
                    TrailingBlanks tb = IGNORE_TRAILING_BLANKS);

        FoldStream(std::ostream &dest, 
                    size_t leftIndent = 0, size_t rightMargin = 80,
                    TrailingBlanks tb = IGNORE_TRAILING_BLANKS);

        void open(char const *fname,
                  size_t leftIndent = 0, size_t rightMargin = 80,
                  TrailingBlanks tb = IGNORE_TRAILING_BLANKS);

        void open(std::ostream &out,
                  size_t leftIndent = 0, size_t rightMargin = 80,
                  TrailingBlanks tb = IGNORE_TRAILING_BLANKS);

        void close();

        void setMargins(size_t leftMargin, size_t rightMargin);
        void setTrailingBlanks(TrailingBlanks tb);
};

inline FoldStream::FoldStream()
{}

inline FoldStream::FoldStream(char const *fname, 
                    size_t leftIndent, size_t rightMargin, TrailingBlanks tb)
:
    FoldStreambuf(fname, leftIndent, rightMargin, tb)
{
    rdbuf(this);
}

inline FoldStream::FoldStream(std::ostream &out, 
                    size_t leftIndent, size_t rightMargin, TrailingBlanks tb)
:
    FoldStreambuf(out, leftIndent, rightMargin, tb)
{
    rdbuf(this);
}

inline void FoldStream::close()
{
    FoldStreambuf::close();
}
    
inline void FoldStream::setMargins(size_t lm, size_t rm)
{
    FoldStreambuf::setMargins(lm, rm);
}
    
inline void FoldStream::setTrailingBlanks(TrailingBlanks tb)
{
    FoldStreambuf::setTrailingBlanks(tb);
}


} // FBB

#endif




