#ifndef _INCLUDED_BOBCAT_CONFIGFILE_
#define _INCLUDED_BOBCAT_CONFIGFILE_

/*
    Lines are stored with initial WS removed.
    If a line ends in \, then the next line (initial WS removed)
    is appended to the current line.
    Information at and beyond the first # on individual lines is removed
    if the rmComment flag is set to true
    Then, lines containing only blanks and tabs are not stored

    The get(param) member returns the line containing `param' as the
    first word that is not immediately followed by alphanumeric chars.
    (in 'param hello' `par' is not found, but `param' is).

*/

#include <fstream>
#include <vector>
#include <string>
#include <bobcat/errno>

namespace FBB
{
    class ConfigFile: public std::vector<std::string>
    {
        bool d_rmComment;
        bool d_caseSensitive;
        
        public:
            enum Comment
            {
                KeepComment,
                RemoveComment
            };
            enum SearchCasing
            {
                SearchCaseSensitive,
                SearchCaseInsensitive
            };

            ConfigFile(Comment cType = KeepComment, 
                       SearchCasing sType = SearchCaseSensitive);

            ConfigFile(std::string const &fname,// Name of the config file
                        Comment cType = KeepComment, 
                        SearchCasing sType = SearchCaseSensitive);

            void setCommentHandling(Comment type)
            {
                d_rmComment = type == RemoveComment;
            }

            void setSearchCasing(SearchCasing type)
            {
                d_caseSensitive = type == SearchCaseSensitive;
            }

            void open(std::string const &fname) throw (Errno);
            
            std::vector<std::string>::const_iterator 
                                    find(std::string const &target) const;
            std::vector<std::string>::const_iterator 
                                    findRE(std::string const &re) const;

        private:
            void append_next(std::istream &istr, std::string &line);
            bool hasContent(std::string const &line);
            bool nextLine(std::istream &istr, std::string &line);
            void removeComment(std::string &line);
            void removeTrailingBlanks(std::string &line);
    };

}

#endif
