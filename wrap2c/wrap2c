#ifndef _INCLUDED_BOBCAT_WRAP2C_H_
#define _INCLUDED_BOBCAT_WRAP2C_H_

namespace FBB
{
    template <typename Type1, typename Type2,
              typename Context, typename ReturnType = void>
    class Wrap2c
    {
        union
        {
            Context *d_context;
            Context const *d_contextconst;
        };
        union
        {
            ReturnType (*d_ref)(Type1 &, Type2 &, Context &);
            ReturnType (*d_refconst)(Type1 &, Type2 &, Context const &);

            ReturnType (*d_constref)(Type1 const &, Type2 const &, Context &);
            ReturnType (*d_constrefconst)(Type1 const &, Type2 const &
                                                        Context const &);

            ReturnType (*d_ptr)(Type1 *, Type2 *, Context &);
            ReturnType (*d_ptrconst)(Type1 *, Type2 *, Context const &);

            ReturnType (*d_constptr)(Type1 const *, Type2 const *, Context &);
            ReturnType (*d_constptrconst)(Type1 const *, Type2 const *,
                                                        Context const &);
        };

        public:
            typedef Type1       first_argument_type;
            typedef Type2       second_argument_type;
            typedef ReturnType  result_type;

                                                // references
            Wrap1c(ReturnType (*fun)(Type1 &, Type2 &, Context &), 
                   Context &context)
            :
                d_context(&context),
                d_ref(fun)
            {}
                                                // references const
            Wrap1c(ReturnType (*fun)(Type1 &, Type2 &, Context const &), 
                   Context const &context)
            :
                d_contextconst(&context),
                d_refconst(fun)
            {}
            ReturnType operator()(Type1 &param1, Type2 &param2) const
            {
                return (*d_ref)(param1, param2, *d_context);
            }

                                                // const references
            Wrap1c(ReturnType (*fun)(Type1 const &, Type2 const &, Context &), 
                   Context &context)
            :
                d_context(&context),
                d_constref(fun)
            {}
                                                // const reference const
            Wrap1c(ReturnType (*fun)(Type1 const &, Type2 const &, 
                                                    Context const &), 
                   Context const &context)
            :
                d_contextconst(&context),
                d_constrefconst(fun)
            {}
            ReturnType operator()(Type1 const &param1, 
                                  Type2 const &param2) const
            {
                return (*d_constref)(param1, param2, *d_context);
            }

                                                // pointers
            Wrap1c(ReturnType (*fun)(Type1 *, Type2 *, Context &), 
                   Context &context)
            :
                d_context(&context),
                d_ptr(fun)
            {}
                                                // pointers const
            Wrap1c(ReturnType (*fun)(Type1 *, Type2 *, Context const &), 
                   Context const &context)
            :
                d_context(&context),
                d_ptrconst(fun)
            {}
            ReturnType operator()(Type1 *param1, Type2 *param2) const
            {
                return (*d_ptrs)(param1, param2, *d_context);
            }

                                                // const pointers
            Wrap1c(ReturnType (*fun)(Type1 const *, Type2 const *, Context &), 
                   Context &context)
            :
                d_context(&context),
                d_constptr(fun)
            {}
                                                // const pointers const
            Wrap1c(ReturnType (*fun)(Type1 const *, Type2 const *, 
                                                    Context const &), 
                   Context const &context)
            :
                d_context(&context),
                d_constptrconst(fun)
            {}
            ReturnType operator()(Type1 const *param1, 
                                  Type2 const *param2) const
            {
                return (*d_constptrs)(param1, param2, *d_context);
            }
    };
}

#endif

