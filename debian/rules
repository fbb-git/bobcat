#!/usr/bin/make -f
# -*- makefile -*-
# Sample debian/rules that uses debhelper.
# This file was originally written by Joey Hess and Craig Small.
# As a special exception, when this file is copied by dh-make into a
# dh-make output file, you may use that output file without restriction.
# This special exception was added by Craig Small in version 0.37 of dh-make.

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

include /usr/share/dpatch/dpatch.make


CFLAGS = -Wall -g

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
		CFLAGS += -O0
else
		CFLAGS += -O2
endif

# shared library versions, option 1
version=2.0.5
major=2
# option 2, assuming the library is created as src/.libs/libfoo.so.2.0.5 or so
#version=`ls src/.libs/lib*.so.* | \
# awk '{if (match($$0,/[0-9]+\.[0-9]+\.[0-9]+$$/)) print substr($$0,RSTART)}'`
#major=`ls src/.libs/lib*.so.* | \
# awk '{if (match($$0,/\.so\.[0-9]+$$/)) print substr($$0,RSTART+4)}'`

configure: configure-stamp
configure-stamp:
		dh_testdir
		# Add here commands to configure the package.

		touch configure-stamp


build: patch build-stamp
build-stamp: configure-stamp
		dh_testdir

		# Add here commands to compile the package.
		./make/library all
		./make/man

		touch build-stamp

# FIXME: rename realclean to clean, when make/clean gets fixed	upstream,
# but for now we need it as early fixed as possible in the build process
realclean:
		dh_testdir
		dh_testroot
		rm -f build-stamp configure-stamp

		# Add here commands to clean up after the build process.
		./make/clean

		dh_clean

clean: patch realclean unpatch

install: build
		dh_testdir
		dh_testroot
		dh_clean -k
		dh_installdirs

		# Add here commands to install the package into debian/tmp
		./make/install debian/libbobcat1 debian/libbobcat1-dev


# Build architecture-independent files here.
binary-indep: build install
# We have nothing to do by default.

# Build architecture-dependent files here.
binary-arch: build install
		dh_testdir
		dh_testroot
		dh_installchangelogs
		dh_installdocs
		dh_installexamples
		dh_installman
		dh_link
		dh_strip
		dh_compress
		dh_fixperms
		dh_makeshlibs
		dh_installdeb
		dh_shlibdeps
		dh_gencontrol
		dh_md5sums
		dh_builddeb

# The following is for internal development usage only
# Update that sum when new releases occur, this
# catches silent file content forges at the server side

MD5TRUSTED := 9c22c5eac1dbb7a5bab3f007c51e8367

DEBVERSION:=$(shell head -n 1 debian/changelog | sed -e 's/^[^(]*(\([^)]*\)).*/\1/')
UPVERSION:=$(shell echo $(DEBVERSION) | sed -e 's/^.*://' -e 's/-[0-9.]*$$//' -e 's/.dfsg$$//')
UPNAME := bobcat
UPFILE := $(UPNAME)_$(UPVERSION).orig.tar.gz
DEFILE := $(UPNAME)_$(UPVERSION).orig.tar.gz
URL    := http://heanet.dl.sourceforge.net/sourceforge/bobcat
MD5CURRENT := `md5sum ../tarballs/$(DEFILE) | original-awk '{print $$1}'`


get-orig-source:
	@@dh_testdir
	@@[ -d ../tarballs/. ]||mkdir -p ../tarballs

	-@if [ ! -f ../tarballs/$(DEFILE) ] ; then \
		echo "Downloading $(URL)/$(UPFILE) from $(URL)/$(UPFILE) ..." ; \
		wget -N -nv -T10 -t3 -O ../tarballs/$(DEFILE) $(URL)/$(UPFILE) ; \
	else \
		echo "Upstream source tarball have been already downloaded" ; \
	fi

	-@if [ "$(MD5CURRENT)" != "$(MD5TRUSTED)" ] ; then \
		echo "Expecting upstream filename md5sum $(MD5TRUSTED), but $(MD5CURRENT) found" ; \
		echo "Upstream filename md5sum is NOT trusted! Possible upstream filename forge!" ; \
		false ; \
	else \
		echo "Upstream filename md5sum is trusted!" ; \
	fi

print-version:
	@@echo "Debian version:          $(DEBVERSION)"
	@@echo "Upstream version:        $(UPVERSION)"




binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install configure
