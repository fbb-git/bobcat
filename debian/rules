#!/usr/bin/make -f

# Uncomment this to turn on verbose mode.
# export DH_VERBOSE=1

export DEB_BUILD_HARDENING=1
export LDFLAGS = $(shell dpkg-buildflags --get LDFLAGS)
export CPPFLAGS = $(shell dpkg-buildflags --get CPPFLAGS)
export CXXFLAGS = $(shell dpkg-buildflags --get CXXFLAGS)

CXXFLAGS += --std=c++0x -Wall

build: build-indep build-arch
build-indep:
build-arch: build-stamp
build-stamp:
	dh_testdir
	# Add here commands to compile the package.
	./build libraries all
	./build man
	touch build-stamp

clean:
	dh_testdir
	dh_testroot
	rm -f build-stamp
	./build clean
	dh_clean

install: build-arch
	dh_testdir
	dh_testroot
	dh_clean
	dh_installdirs
	./build install debian/libbobcat3 debian/libbobcat-dev

binary-indep:

binary-arch: build-arch install
	dh_testdir
	dh_testroot
	dh_installchangelogs -A changelog
	dh_installdocs
#	dh_installexamples
#	dh_installman
	dh_link
	dh_strip
	dh_compress
	dh_fixperms
	dh_makeshlibs -V -- -c0
	dh_installdeb
	dh_shlibdeps
	dh_gencontrol
	dh_md5sums
	dh_builddeb

# The following is for internal development usage only
# Update that sum when new _upstream_ releases occur, this
# catches silent file content forges at the upstream server side

# archive downloaded from https://www.icce.rug.nl/debian/bobcat
# (bobcat_x.y.z..tar.gz)

MD5TRUSTED := 050c18bf9478ffba7119bb809f4d5dc8

DEBVERSION:=$(shell head -n 1 debian/changelog | sed -e 's/^[^(]*(\([^)]*\)).*/\1/')
UPVERSION:=$(shell echo $(DEBVERSION) | sed -e 's/^.*://' -e 's/-[0-9.]*$$//' -e 's/.dfsg$$//')
UPNAME := bobcat
UPFILE := $(UPNAME)_$(UPVERSION).tar.gz
DEFILE := $(UPNAME)_$(UPVERSION).orig.tar.gz
URL				   := https://www.icce.rug.nl/debian/bobcat
MD5CURRENT := `md5sum ../tarballs/$(DEFILE) | sed -e 's/ .*//'`
SVNTRUNK   := https://svn.sourceforge.net/svnroot/bobcat/trunk/bobcat

get-orig-source:
	@@[ -d ../tarballs/. ]||mkdir -p ../tarballs

	-@if [ ! -f ../tarballs/$(DEFILE) ] ; then \
	echo -e "Downloading $(URL)/$(UPFILE)\nSaving into ../tarballs/$(DEFILE) ..." ; \
	wget --no-check-certificate --quiet -nv -T20 -t3 -O \
	../tarballs/$(DEFILE) $(URL)/$(UPFILE) ; \
	else \
	echo "Upstream source tarball has already been downloaded" ; \
	fi

	-@if [ "$(MD5CURRENT)" != "$(MD5TRUSTED)" ] ; then \
	echo "Expecting upstream filename md5sum $(MD5TRUSTED), but $(MD5CURRENT) found" ; \
	echo "Upstream filename md5sum is NOT trusted! Possible upstream filename forge!" ; \
	false ; \
	else \
	echo "Upstream filename md5sum is trusted!" ; \
	fi

# call git-build from the project's base directory as `fakeroot debian/rules git-build'
# it creates the ./build-area and runs dpkg-buildpackage in build-area/$(UPNAME)-$(UPVERSION)
# which, if successful, creates the debian files in the build-area
# Probably easier to use is `git-bl'
git-build:
	@@[ -d ./build-area/. ]||mkdir -p ./build-area

	-@if [ ! -f ../tarballs/$(DEFILE) ] ; then \
	    echo "Upstream source tarball ../tarballs/$(DEFILE) not found" ; \
	else \
	    rm -rf build-area/$(UPNAME)-$(UPVERSION) build-area/run.lintian ; \
	    cp ../tarballs/$(DEFILE) build-area ; \
	    chdir build-area ; \
	    tar xzf $(DEFILE) ; \
	    cp -r ../debian $(UPNAME)-$(UPVERSION) ; \
	    chdir $(UPNAME)-$(UPVERSION) ; \
	    dpkg-buildpackage $(DPKG_BUILDPACKAGE) ; \
	    if [ "$$?" -eq 0 ] ; then \
	        chdir .. ; \
	        touch run.lintian ; \
	        rm -rf $(UPNAME)-$(UPVERSION) ; \
	    else \
	        chdir .. ; \
	        mv $(UPNAME)-$(UPVERSION) $(UPNAME)-$(UPVERSION)-obsolete-`date +%s` ; \
	    fi \
	fi

print-version:
	@@echo "Debian version:   $(DEBVERSION)"
	@@echo "Upstream version: $(UPVERSION)"

binary: binary-indep binary-arch
.PHONY: clean build build-indep build-arch binary-indep binary-arch binary install
