#!/bin/sh

. make/parameters
. VERSION

req()
{
    echo "$*"
    $* || exit 1
}

req mkdir -p tmp/lib tmp/bobcat

LIB_A=tmp/lib/lib${LIBRARY}.a

if [ "$1" != "all" ]
then
    echo "
    The class FBB::Milter can only be compiled if you have installed 
    the file libmilter/mfapi.h. To use the class Milter, programs using 
    Milter objects must also be linked against the milter library: 
    -lmilter -lbobcat 

    The class FBB::Milter can safely be left out of the bobcat library if
    you're not planning to construct mail filters using FBB::Milter.

    Press Enter y if you WANT to compile the files of the class FBB::Milter. 
    Press Enter or any other line if you DON'T WANT to include the class
                                  FBB::Milter in the bobcat library. 
"
    read REQ
    [ "$REQ" == "y" ] && MILTER=milter

    echo "
    The class FBB::Xpointer can only be compiled if you have installed 
    the file X11/Xlib.h. To use the class Xpointer, programs using Xpointer
    objects must also be linked against the X11 library: -lX11 -lbobcat

    The class FBB::Xpointer can safely be left out of the bobcat library if
    you're not planning to construct programs using Xpointer.

    Press Enter y if you WANT to compile the files of the class FBB::Xpointer. 
    Press Enter or any other line if you DON'T WANT to include the class
                                  FBB::Xpointer in the bobcat library. 
"
    read REQ
    [ "$REQ" == "y" ] && XPOINTER=xpointer

else
    MILTER=milter
    XPOINTER=xpointer
fi

## libso=lib${LIBRARY}.so
## ${libso}.${VERSION}
## \( ! -e ../$LIB_A -o $src -nt ../$LIB_A \) ] &&
    # Argument 1: library name
    # Argument 2: -fPIC when creating the shared library

compile()
{
    LIB=$1
    PIC=$2

    COMPILED=0

    for x in `cat CLASSES` $MILTER $XPOINTER
    do
        [ ! -e tmp/bobcat/$x -o $x/$x -nt tmp/bobcat/$x ] && 
                                                    req cp $x/$x tmp/bobcat
    done

    NR=0
    for x in `cat CLASSES` $MILTER $XPOINTER
    do
        req cd $x
        SRC=`find ./  -maxdepth 1 -regex '.*\.cc' -printf "%f\n"`

        [ "$SRC" == "" ] && (cd ..; continue)
        mkdir -p o
        for src in $SRC
        do
            BASE=${src%\.[^\.]*}
            OBJECT=o/${NR}${BASE}.o

            if [ -e $OBJECT -a $src -nt $OBJECT  -o \
                ! -e $OBJECT -a \( ! -e ../$LIB -o $src -nt ../$LIB \) ] 
            then
                COMPILED=1
                req $GCC $COPTS $PIC -o  $OBJECT -c ${src}
            fi
        done
        cd ..
        let NR=${NR}+1
    done
    
    
    req cd cfunctions
    SRC=`find ./  -maxdepth 1 -regex '.*\.c' -printf "%f\n"`
    [ "$SRC" == "" ] && (cd ..; continue)
    mkdir -p o
    for src in $SRC
    do
        BASE=${src%\.[^\.]*}
        OBJECT=o/c.${BASE}.o

        if [ -e $OBJECT -a $src -nt $OBJECT  -o \
            ! -e $OBJECT -a \( ! -e ../$LIB -o $src -nt ../$LIB \) ] 
        then
            COMPILED=1
            req gcc $COPTS $PIC -o  $OBJECT -c ${src}
        fi
    done
    cd ..

    return $COMPILED
}


compile $LIB_A
RMO=$?

OBJ=`find ./ -regex '.*\.o' -print`     # can be reused for the shared lib

if [ "$RMO" == "1" ] 
then
    req ar cru $LIB_A $OBJ
    req ranlib $LIB_A
    find ./ -regex '.*\.o' -exec rm '{}' \;
fi

# following the static compilation the shared library is built

version=`echo $VERSION | sed 's/\..*//'`
libso=lib${LIBRARY}.so
libsomajor=${libso}.${version}
libsoshared=${libso}.${VERSION}

compile tmp/lib/$libsoshared -fPIC                  # compile the shared lib
RMO=$?

if [ "$RMO" == "1" ]
then
    echo "$GCC -shared \
    -Wl,-z,def,-soname,${libsomajor} \
    -o tmp/lib/${libsoshared} ${LIBRARIES} "'*.o'

    $GCC -shared \
        -Wl,-z,def,-soname,${libsomajor} \
        -o tmp/lib/${libsoshared} ${LIBRARIES} $OBJ
    [ $? == 0 ] || exit 1

    req strip --strip-unneeded tmp/lib/${libsoshared} 
    req chmod -x tmp/lib/${libsoshared} 
    
    req ln -sf $libsoshared tmp/lib/$libsomajor
    req ln -sf $libsomajor tmp/lib/${libso}

    find ./ -regex '.*\.o' -exec rm '{}' \;
fi
