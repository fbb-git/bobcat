#ifndef _INCLUDED_BOBCAT_A2X_
#define _INCLUDED_BOBCAT_A2X_

#include <sstream>
#include <string>

namespace FBB
{
    class A2x: public std::istringstream
    {
        public:
            A2x();
            A2x(char const *txt);                   // initialize from text
            A2x(std::string const &str);
            A2x(A2x const &other);

            template <typename T>
            operator T();

            A2x &operator=(char const *txt);
    
            A2x &operator=(std::string const &str);
            A2x &operator=(A2x const &other);
    };

inline A2x::A2x()
{}

inline A2x::A2x(char const *txt)                    // initialize from text
:
    std::istringstream(txt)
{}

inline A2x::A2x(std::string const &str)
:
    std::istringstream(str.c_str())
{}

inline A2x::A2x(A2x const &other)
:
    std::istringstream(other.str())
{}

template <typename T>
inline A2x::operator T()
{
    T t;

    return (*this >> t) ? t : T();
}

inline A2x &A2x::operator=(std::string const &str)
{
    return operator=(str.c_str());
}            

inline A2x &A2x::operator=(A2x const &other)
{
    return operator=(other.str());
}

}

#endif
